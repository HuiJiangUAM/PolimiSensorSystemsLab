
Project3a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000732c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080074d0  080074d0  000174d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800788c  0800788c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007894  08007894  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007894  08007894  00017894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800789c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001d4  08007a70  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08007a70  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f064  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000227e  00000000  00000000  0002f2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00031530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3d  00000000  00000000  00032390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018614  00000000  00000000  00032ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108b7  00000000  00000000  0004b4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009adb7  00000000  00000000  0005bd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e3c  00000000  00000000  000f6b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fb98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074b4 	.word	0x080074b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080074b4 	.word	0x080074b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f5c:	b0be      	sub	sp, #248	; 0xf8
 8000f5e:	af06      	add	r7, sp, #24
 8000f60:	6078      	str	r0, [r7, #4]
	float POT_value = values_ADC[0]*3.3/4095.0;
 8000f62:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <HAL_ADC_ConvCpltCallback+0x178>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fae4 	bl	8000534 <__aeabi_i2d>
 8000f6c:	a350      	add	r3, pc, #320	; (adr r3, 80010b0 <HAL_ADC_ConvCpltCallback+0x158>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fb49 	bl	8000608 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	a34e      	add	r3, pc, #312	; (adr r3, 80010b8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fc6a 	bl	800085c <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fe12 	bl	8000bb8 <__aeabi_d2f>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float temperature = values_ADC[1]*3.3/4095.0;
 8000f9a:	4b4d      	ldr	r3, [pc, #308]	; (80010d0 <HAL_ADC_ConvCpltCallback+0x178>)
 8000f9c:	885b      	ldrh	r3, [r3, #2]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fac8 	bl	8000534 <__aeabi_i2d>
 8000fa4:	a342      	add	r3, pc, #264	; (adr r3, 80010b0 <HAL_ADC_ConvCpltCallback+0x158>)
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	f7ff fb2d 	bl	8000608 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	a340      	add	r3, pc, #256	; (adr r3, 80010b8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f7ff fc4e 	bl	800085c <__aeabi_ddiv>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fdf6 	bl	8000bb8 <__aeabi_d2f>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	float reference = values_ADC[2]*3.3/4095.0;
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <HAL_ADC_ConvCpltCallback+0x178>)
 8000fd4:	889b      	ldrh	r3, [r3, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff faac 	bl	8000534 <__aeabi_i2d>
 8000fdc:	a334      	add	r3, pc, #208	; (adr r3, 80010b0 <HAL_ADC_ConvCpltCallback+0x158>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fb11 	bl	8000608 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	a332      	add	r3, pc, #200	; (adr r3, 80010b8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fc32 	bl	800085c <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fdda 	bl	8000bb8 <__aeabi_d2f>
 8001004:	4603      	mov	r3, r0
 8001006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	temperature = (temperature-0.76)/0.0025+25.0;
 800100a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800100e:	f7ff faa3 	bl	8000558 <__aeabi_f2d>
 8001012:	a32b      	add	r3, pc, #172	; (adr r3, 80010c0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff f93e 	bl	8000298 <__aeabi_dsub>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	a328      	add	r3, pc, #160	; (adr r3, 80010c8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff fc17 	bl	800085c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_ADC_ConvCpltCallback+0x17c>)
 800103c:	f7ff f92e 	bl	800029c <__adddf3>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fdb6 	bl	8000bb8 <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	char string[200];
	int length = snprintf(string,sizeof(string),"Pot:%.2f V\r\nTemp:%.2f ºC\r\nRef:%.2f V\r\n\r\n",POT_value,temperature,reference);
 8001052:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001056:	f7ff fa7f 	bl	8000558 <__aeabi_f2d>
 800105a:	4604      	mov	r4, r0
 800105c:	460d      	mov	r5, r1
 800105e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001062:	f7ff fa79 	bl	8000558 <__aeabi_f2d>
 8001066:	4680      	mov	r8, r0
 8001068:	4689      	mov	r9, r1
 800106a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800106e:	f7ff fa73 	bl	8000558 <__aeabi_f2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	f107 0008 	add.w	r0, r7, #8
 800107a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800107e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001082:	e9cd 4500 	strd	r4, r5, [sp]
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_ADC_ConvCpltCallback+0x180>)
 8001088:	21c8      	movs	r1, #200	; 0xc8
 800108a:	f003 ffe1 	bl	8005050 <sniprintf>
 800108e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	HAL_UART_Transmit(&huart2,(uint8_t*) string,length,200);
 8001092:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001096:	b29a      	uxth	r2, r3
 8001098:	f107 0108 	add.w	r1, r7, #8
 800109c:	23c8      	movs	r3, #200	; 0xc8
 800109e:	480f      	ldr	r0, [pc, #60]	; (80010dc <HAL_ADC_ConvCpltCallback+0x184>)
 80010a0:	f002 fffb 	bl	800409a <HAL_UART_Transmit>
}
 80010a4:	bf00      	nop
 80010a6:	37e0      	adds	r7, #224	; 0xe0
 80010a8:	46bd      	mov	sp, r7
 80010aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010ae:	bf00      	nop
 80010b0:	66666666 	.word	0x66666666
 80010b4:	400a6666 	.word	0x400a6666
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40affe00 	.word	0x40affe00
 80010c0:	851eb852 	.word	0x851eb852
 80010c4:	3fe851eb 	.word	0x3fe851eb
 80010c8:	47ae147b 	.word	0x47ae147b
 80010cc:	3f647ae1 	.word	0x3f647ae1
 80010d0:	20000324 	.word	0x20000324
 80010d4:	40390000 	.word	0x40390000
 80010d8:	080074d0 	.word	0x080074d0
 80010dc:	200002e0 	.word	0x200002e0

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f000 fc5c 	bl	80019a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 f824 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f000 f994 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 80010f0:	f000 f972 	bl	80013d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010f4:	f000 f946 	bl	8001384 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010f8:	f000 f888 	bl	800120c <MX_ADC1_Init>
  MX_TIM2_Init();
 80010fc:	f000 f8f4 	bl	80012e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK){
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <main+0x48>)
 8001102:	f002 fcd3 	bl	8003aac <HAL_TIM_Base_Start>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <main+0x30>
    	  Error_Handler();
 800110c:	f000 f9f2 	bl	80014f4 <Error_Handler>
      }
  if(HAL_ADC_Start_DMA(&hadc1,(uint32_t*)values_ADC,3) != HAL_OK){
 8001110:	2203      	movs	r2, #3
 8001112:	4906      	ldr	r1, [pc, #24]	; (800112c <main+0x4c>)
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <main+0x50>)
 8001116:	f000 fe09 	bl	8001d2c <HAL_ADC_Start_DMA>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <main+0x44>
 	    	  		  Error_Handler();
 8001120:	f000 f9e8 	bl	80014f4 <Error_Handler>
 	    	  	  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001124:	e7fe      	b.n	8001124 <main+0x44>
 8001126:	bf00      	nop
 8001128:	20000298 	.word	0x20000298
 800112c:	20000324 	.word	0x20000324
 8001130:	200001f0 	.word	0x200001f0

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	; 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	2230      	movs	r2, #48	; 0x30
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f004 f87a 	bl	800523c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <SystemClock_Config+0xd0>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	4a28      	ldr	r2, [pc, #160]	; (8001204 <SystemClock_Config+0xd0>)
 8001162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <SystemClock_Config+0xd0>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <SystemClock_Config+0xd4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <SystemClock_Config+0xd4>)
 8001182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <SystemClock_Config+0xd4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119c:	2310      	movs	r3, #16
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a0:	2302      	movs	r3, #2
 80011a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011a8:	2310      	movs	r3, #16
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011b2:	2304      	movs	r3, #4
 80011b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b6:	2307      	movs	r3, #7
 80011b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 ff8c 	bl	80030dc <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ca:	f000 f993 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2102      	movs	r1, #2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 f9ee 	bl	80035cc <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011f6:	f000 f97d 	bl	80014f4 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121e:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <MX_ADC1_Init+0xd4>)
 8001220:	4a30      	ldr	r2, [pc, #192]	; (80012e4 <MX_ADC1_Init+0xd8>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <MX_ADC1_Init+0xd4>)
 8001226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <MX_ADC1_Init+0xd4>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <MX_ADC1_Init+0xd4>)
 8001234:	2201      	movs	r2, #1
 8001236:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MX_ADC1_Init+0xd4>)
 800123a:	2200      	movs	r2, #0
 800123c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <MX_ADC1_Init+0xd4>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <MX_ADC1_Init+0xd4>)
 8001248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <MX_ADC1_Init+0xd4>)
 8001250:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <MX_ADC1_Init+0xd4>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800125c:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MX_ADC1_Init+0xd4>)
 800125e:	2203      	movs	r2, #3
 8001260:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_ADC1_Init+0xd4>)
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_ADC1_Init+0xd4>)
 800126c:	2201      	movs	r2, #1
 800126e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001270:	481b      	ldr	r0, [pc, #108]	; (80012e0 <MX_ADC1_Init+0xd4>)
 8001272:	f000 fc07 	bl	8001a84 <HAL_ADC_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800127c:	f000 f93a 	bl	80014f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001280:	2301      	movs	r3, #1
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001288:	2307      	movs	r3, #7
 800128a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4813      	ldr	r0, [pc, #76]	; (80012e0 <MX_ADC1_Init+0xd4>)
 8001292:	f000 fe59 	bl	8001f48 <HAL_ADC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800129c:	f000 f92a 	bl	80014f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012a0:	2310      	movs	r3, #16
 80012a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_ADC1_Init+0xd4>)
 80012ae:	f000 fe4b 	bl	8001f48 <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80012b8:	f000 f91c 	bl	80014f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80012bc:	2311      	movs	r3, #17
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80012c0:	2303      	movs	r3, #3
 80012c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_ADC1_Init+0xd4>)
 80012ca:	f000 fe3d 	bl	8001f48 <HAL_ADC_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80012d4:	f000 f90e 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200001f0 	.word	0x200001f0
 80012e4:	40012000 	.word	0x40012000

080012e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001304:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <MX_TIM2_Init+0x98>)
 8001306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <MX_TIM2_Init+0x98>)
 800130e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001312:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_TIM2_Init+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <MX_TIM2_Init+0x98>)
 800131c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001320:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_TIM2_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_TIM2_Init+0x98>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800132e:	4814      	ldr	r0, [pc, #80]	; (8001380 <MX_TIM2_Init+0x98>)
 8001330:	f002 fb6c 	bl	8003a0c <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800133a:	f000 f8db 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4619      	mov	r1, r3
 800134a:	480d      	ldr	r0, [pc, #52]	; (8001380 <MX_TIM2_Init+0x98>)
 800134c:	f002 fc08 	bl	8003b60 <HAL_TIM_ConfigClockSource>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001356:	f000 f8cd 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800135a:	2320      	movs	r3, #32
 800135c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <MX_TIM2_Init+0x98>)
 8001368:	f002 fddc 	bl	8003f24 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001372:	f000 f8bf 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000298 	.word	0x20000298

08001384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <MX_USART2_UART_Init+0x50>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013bc:	f002 fe20 	bl	8004000 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c6:	f000 f895 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200002e0 	.word	0x200002e0
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_DMA_Init+0x3c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <MX_DMA_Init+0x3c>)
 80013e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_DMA_Init+0x3c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2038      	movs	r0, #56	; 0x38
 8001400:	f001 f927 	bl	8002652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001404:	2038      	movs	r0, #56	; 0x38
 8001406:	f001 f940 	bl	800268a <HAL_NVIC_EnableIRQ>

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <MX_GPIO_Init+0xd0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <MX_GPIO_Init+0xd0>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <MX_GPIO_Init+0xd0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <MX_GPIO_Init+0xd0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a25      	ldr	r2, [pc, #148]	; (80014e8 <MX_GPIO_Init+0xd0>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <MX_GPIO_Init+0xd0>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_GPIO_Init+0xd0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <MX_GPIO_Init+0xd0>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_GPIO_Init+0xd0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_GPIO_Init+0xd0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <MX_GPIO_Init+0xd0>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_GPIO_Init+0xd0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2120      	movs	r1, #32
 80014a2:	4812      	ldr	r0, [pc, #72]	; (80014ec <MX_GPIO_Init+0xd4>)
 80014a4:	f001 fe00 	bl	80030a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	480c      	ldr	r0, [pc, #48]	; (80014f0 <MX_GPIO_Init+0xd8>)
 80014c0:	f001 fc6e 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c4:	2320      	movs	r3, #32
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_GPIO_Init+0xd4>)
 80014dc:	f001 fc60 	bl	8002da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020800 	.word	0x40020800

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fc:	e7fe      	b.n	80014fc <Error_Handler+0x8>
	...

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_MspInit+0x4c>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_MspInit+0x4c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800153e:	2007      	movs	r0, #7
 8001540:	f001 f87c 	bl	800263c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a33      	ldr	r2, [pc, #204]	; (800163c <HAL_ADC_MspInit+0xec>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d15f      	bne.n	8001632 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b32      	ldr	r3, [pc, #200]	; (8001640 <HAL_ADC_MspInit+0xf0>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a31      	ldr	r2, [pc, #196]	; (8001640 <HAL_ADC_MspInit+0xf0>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_ADC_MspInit+0xf0>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_ADC_MspInit+0xf0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <HAL_ADC_MspInit+0xf0>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <HAL_ADC_MspInit+0xf0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015aa:	2302      	movs	r3, #2
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ae:	2303      	movs	r3, #3
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4821      	ldr	r0, [pc, #132]	; (8001644 <HAL_ADC_MspInit+0xf4>)
 80015be:	f001 fbef 	bl	8002da0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 80015c4:	4a21      	ldr	r2, [pc, #132]	; (800164c <HAL_ADC_MspInit+0xfc>)
 80015c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 80015dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 80015e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 80015ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 80015f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001606:	4810      	ldr	r0, [pc, #64]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 8001608:	f001 f85a 	bl	80026c0 <HAL_DMA_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001612:	f7ff ff6f 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_ADC_MspInit+0xf8>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2012      	movs	r0, #18
 8001628:	f001 f813 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800162c:	2012      	movs	r0, #18
 800162e:	f001 f82c 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40012000 	.word	0x40012000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	20000238 	.word	0x20000238
 800164c:	40026410 	.word	0x40026410

08001650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001660:	d10d      	bne.n	800167e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_TIM_Base_MspInit+0x3c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <HAL_TIM_Base_MspInit+0x3c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_TIM_Base_MspInit+0x3c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800

08001690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_UART_MspInit+0x84>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12b      	bne.n	800170a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_UART_MspInit+0x88>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_UART_MspInit+0x88>)
 80016bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_UART_MspInit+0x88>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_UART_MspInit+0x88>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_UART_MspInit+0x88>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_UART_MspInit+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ea:	230c      	movs	r3, #12
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fa:	2307      	movs	r3, #7
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_UART_MspInit+0x8c>)
 8001706:	f001 fb4b 	bl	8002da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40004400 	.word	0x40004400
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176c:	f000 f96a 	bl	8001a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <ADC_IRQHandler+0x10>)
 800177a:	f000 f9c6 	bl	8001b0a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200001f0 	.word	0x200001f0

08001788 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA2_Stream0_IRQHandler+0x10>)
 800178e:	f001 f89d 	bl	80028cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000238 	.word	0x20000238

0800179c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_kill>:

int _kill(int pid, int sig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017b6:	f003 fd4d 	bl	8005254 <__errno>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2216      	movs	r2, #22
 80017be:	601a      	str	r2, [r3, #0]
  return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_exit>:

void _exit (int status)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe7 	bl	80017ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80017de:	e7fe      	b.n	80017de <_exit+0x12>

080017e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e00a      	b.n	8001808 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f2:	f3af 8000 	nop.w
 80017f6:	4601      	mov	r1, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60ba      	str	r2, [r7, #8]
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf0      	blt.n	80017f2 <_read+0x12>
  }

  return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e009      	b.n	8001840 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	dbf1      	blt.n	800182c <_write+0x12>
  }
  return len;
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_close>:

int _close(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187a:	605a      	str	r2, [r3, #4]
  return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_isatty>:

int _isatty(int file)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f003 fcb2 	bl	8005254 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20018000 	.word	0x20018000
 800191c:	00000400 	.word	0x00000400
 8001920:	2000032c 	.word	0x2000032c
 8001924:	20000480 	.word	0x20000480

08001928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <SystemInit+0x20>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <SystemInit+0x20>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001952:	490e      	ldr	r1, [pc, #56]	; (800198c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001954:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001968:	4c0b      	ldr	r4, [pc, #44]	; (8001998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001976:	f7ff ffd7 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800197a:	f003 fc71 	bl	8005260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197e:	f7ff fbaf 	bl	80010e0 <main>
  bx  lr    
 8001982:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001984:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001990:	0800789c 	.word	0x0800789c
  ldr r2, =_sbss
 8001994:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001998:	20000480 	.word	0x20000480

0800199c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800199c:	e7fe      	b.n	800199c <DMA1_Stream0_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	; (80019e0 <HAL_Init+0x40>)
 80019aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_Init+0x40>)
 80019b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_Init+0x40>)
 80019c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c8:	2003      	movs	r0, #3
 80019ca:	f000 fe37 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 f808 	bl	80019e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d4:	f7ff fd94 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x54>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_InitTick+0x58>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fe4f 	bl	80026a6 <HAL_SYSTICK_Config>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00e      	b.n	8001a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b0f      	cmp	r3, #15
 8001a16:	d80a      	bhi.n	8001a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a20:	f000 fe17 	bl	8002652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <HAL_InitTick+0x5c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e000      	b.n	8001a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	20000004 	.word	0x20000004

08001a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x20>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_IncTick+0x24>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_IncTick+0x24>)
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000330 	.word	0x20000330

08001a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <HAL_GetTick+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000330 	.word	0x20000330

08001a84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e033      	b.n	8001b02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fd54 	bl	8001550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aca:	f023 0302 	bic.w	r3, r3, #2
 8001ace:	f043 0202 	orr.w	r2, r3, #2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fb58 	bl	800218c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f023 0303 	bic.w	r3, r3, #3
 8001aea:	f043 0201 	orr.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
 8001af2:	e001      	b.n	8001af8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d049      	beq.n	8001bd4 <HAL_ADC_IRQHandler+0xca>
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d046      	beq.n	8001bd4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d12b      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d127      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d119      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0220 	bic.w	r2, r2, #32
 8001b9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff f9c7 	bl	8000f58 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0212 	mvn.w	r2, #18
 8001bd2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d057      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x190>
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d054      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d105      	bne.n	8001c08 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d139      	bne.n	8001c8a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d12b      	bne.n	8001c8a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d124      	bne.n	8001c8a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d11d      	bne.n	8001c8a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d119      	bne.n	8001c8a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c64:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fbfc 	bl	8002488 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 020c 	mvn.w	r2, #12
 8001c98:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d017      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0x1d6>
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d014      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f925 	bl	8001f20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f06f 0201 	mvn.w	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cee:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d015      	beq.n	8001d22 <HAL_ADC_IRQHandler+0x218>
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d012      	beq.n	8001d22 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	f043 0202 	orr.w	r2, r3, #2
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0220 	mvn.w	r2, #32
 8001d10:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f90e 	bl	8001f34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0220 	mvn.w	r2, #32
 8001d20:	601a      	str	r2, [r3, #0]
  }
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_Start_DMA+0x1e>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e0ce      	b.n	8001ee8 <HAL_ADC_Start_DMA+0x1bc>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d018      	beq.n	8001d92 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d70:	4b5f      	ldr	r3, [pc, #380]	; (8001ef0 <HAL_ADC_Start_DMA+0x1c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a5f      	ldr	r2, [pc, #380]	; (8001ef4 <HAL_ADC_Start_DMA+0x1c8>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0c9a      	lsrs	r2, r3, #18
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da0:	d107      	bne.n	8001db2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	f040 8086 	bne.w	8001ece <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dca:	f023 0301 	bic.w	r3, r3, #1
 8001dce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e00:	d106      	bne.n	8001e10 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f023 0206 	bic.w	r2, r3, #6
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
 8001e0e:	e002      	b.n	8001e16 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_ADC_Start_DMA+0x1cc>)
 8001e20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e26:	4a35      	ldr	r2, [pc, #212]	; (8001efc <HAL_ADC_Start_DMA+0x1d0>)
 8001e28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	4a34      	ldr	r2, [pc, #208]	; (8001f00 <HAL_ADC_Start_DMA+0x1d4>)
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	4a33      	ldr	r2, [pc, #204]	; (8001f04 <HAL_ADC_Start_DMA+0x1d8>)
 8001e38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	334c      	adds	r3, #76	; 0x4c
 8001e6e:	4619      	mov	r1, r3
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f000 fcd2 	bl	800281c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10f      	bne.n	8001ea4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d129      	bne.n	8001ee6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	e020      	b.n	8001ee6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_ADC_Start_DMA+0x1dc>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d11b      	bne.n	8001ee6 <HAL_ADC_Start_DMA+0x1ba>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d114      	bne.n	8001ee6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	e00b      	b.n	8001ee6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f043 0210 	orr.w	r2, r3, #16
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	40012300 	.word	0x40012300
 8001efc:	08002385 	.word	0x08002385
 8001f00:	0800243f 	.word	0x0800243f
 8001f04:	0800245b 	.word	0x0800245b
 8001f08:	40012000 	.word	0x40012000

08001f0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x1c>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e105      	b.n	8002170 <HAL_ADC_ConfigChannel+0x228>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	d925      	bls.n	8001fc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68d9      	ldr	r1, [r3, #12]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	3b1e      	subs	r3, #30
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43da      	mvns	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	400a      	ands	r2, r1
 8001f98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68d9      	ldr	r1, [r3, #12]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	4603      	mov	r3, r0
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4403      	add	r3, r0
 8001fb2:	3b1e      	subs	r3, #30
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	e022      	b.n	8002006 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6919      	ldr	r1, [r3, #16]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6919      	ldr	r1, [r3, #16]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4403      	add	r3, r0
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b06      	cmp	r3, #6
 800200c:	d824      	bhi.n	8002058 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b05      	subs	r3, #5
 8002020:	221f      	movs	r2, #31
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	400a      	ands	r2, r1
 800202e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	3b05      	subs	r3, #5
 800204a:	fa00 f203 	lsl.w	r2, r0, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
 8002056:	e04c      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d824      	bhi.n	80020aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	3b23      	subs	r3, #35	; 0x23
 8002072:	221f      	movs	r2, #31
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43da      	mvns	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	400a      	ands	r2, r1
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	4618      	mov	r0, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3b23      	subs	r3, #35	; 0x23
 800209c:	fa00 f203 	lsl.w	r2, r0, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
 80020a8:	e023      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	3b41      	subs	r3, #65	; 0x41
 80020bc:	221f      	movs	r2, #31
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	400a      	ands	r2, r1
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	4618      	mov	r0, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b41      	subs	r3, #65	; 0x41
 80020e6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_ADC_ConfigChannel+0x234>)
 80020f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a21      	ldr	r2, [pc, #132]	; (8002180 <HAL_ADC_ConfigChannel+0x238>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d109      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x1cc>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b12      	cmp	r3, #18
 8002106:	d105      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_ADC_ConfigChannel+0x238>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d123      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x21e>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b10      	cmp	r3, #16
 8002124:	d003      	beq.n	800212e <HAL_ADC_ConfigChannel+0x1e6>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b11      	cmp	r3, #17
 800212c:	d11b      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b10      	cmp	r3, #16
 8002140:	d111      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_ADC_ConfigChannel+0x23c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a10      	ldr	r2, [pc, #64]	; (8002188 <HAL_ADC_ConfigChannel+0x240>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	0c9a      	lsrs	r2, r3, #18
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002158:	e002      	b.n	8002160 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3b01      	subs	r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f9      	bne.n	800215a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40012300 	.word	0x40012300
 8002180:	40012000 	.word	0x40012000
 8002184:	20000000 	.word	0x20000000
 8002188:	431bde83 	.word	0x431bde83

0800218c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002194:	4b79      	ldr	r3, [pc, #484]	; (800237c <ADC_Init+0x1f0>)
 8002196:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	021a      	lsls	r2, r3, #8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <ADC_Init+0x1f4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002232:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	e00f      	b.n	800228a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002288:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0202 	bic.w	r2, r2, #2
 8002298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e1b      	ldrb	r3, [r3, #24]
 80022a4:	005a      	lsls	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01b      	beq.n	80022f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	3b01      	subs	r3, #1
 80022e4:	035a      	lsls	r2, r3, #13
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	e007      	b.n	8002300 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	3b01      	subs	r3, #1
 800231c:	051a      	lsls	r2, r3, #20
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002342:	025a      	lsls	r2, r3, #9
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	029a      	lsls	r2, r3, #10
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	609a      	str	r2, [r3, #8]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40012300 	.word	0x40012300
 8002380:	0f000001 	.word	0x0f000001

08002384 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800239a:	2b00      	cmp	r3, #0
 800239c:	d13c      	bne.n	8002418 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d12b      	bne.n	8002410 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d127      	bne.n	8002410 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d119      	bne.n	8002410 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0220 	bic.w	r2, r2, #32
 80023ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7fe fda1 	bl	8000f58 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002416:	e00e      	b.n	8002436 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fd85 	bl	8001f34 <HAL_ADC_ErrorCallback>
}
 800242a:	e004      	b.n	8002436 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7ff fd5d 	bl	8001f0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2240      	movs	r2, #64	; 0x40
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f043 0204 	orr.w	r2, r3, #4
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7ff fd5a 	bl	8001f34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db0b      	blt.n	800252a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <__NVIC_EnableIRQ+0x38>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100

0800253c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db0a      	blt.n	8002566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	490c      	ldr	r1, [pc, #48]	; (8002588 <__NVIC_SetPriority+0x4c>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	440b      	add	r3, r1
 8002560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002564:	e00a      	b.n	800257c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <__NVIC_SetPriority+0x50>)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3b04      	subs	r3, #4
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	440b      	add	r3, r1
 800257a:	761a      	strb	r2, [r3, #24]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f1c3 0307 	rsb	r3, r3, #7
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	bf28      	it	cs
 80025ae:	2304      	movcs	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d902      	bls.n	80025c0 <NVIC_EncodePriority+0x30>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3b03      	subs	r3, #3
 80025be:	e000      	b.n	80025c2 <NVIC_EncodePriority+0x32>
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	4313      	orrs	r3, r2
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002608:	d301      	bcc.n	800260e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <SysTick_Config+0x40>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002616:	210f      	movs	r1, #15
 8002618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800261c:	f7ff ff8e 	bl	800253c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <SysTick_Config+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <SysTick_Config+0x40>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000e010 	.word	0xe000e010

0800263c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff29 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002664:	f7ff ff3e 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff ff8e 	bl	8002590 <NVIC_EncodePriority>
 8002674:	4602      	mov	r2, r0
 8002676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff5d 	bl	800253c <__NVIC_SetPriority>
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff31 	bl	8002500 <__NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffa2 	bl	80025f8 <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff f9ce 	bl	8001a6c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e099      	b.n	8002810 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fc:	e00f      	b.n	800271e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026fe:	f7ff f9b5 	bl	8001a6c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b05      	cmp	r3, #5
 800270a:	d908      	bls.n	800271e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2203      	movs	r2, #3
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e078      	b.n	8002810 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e8      	bne.n	80026fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4b38      	ldr	r3, [pc, #224]	; (8002818 <HAL_DMA_Init+0x158>)
 8002738:	4013      	ands	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800274a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2b04      	cmp	r3, #4
 8002776:	d107      	bne.n	8002788 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4313      	orrs	r3, r2
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f023 0307 	bic.w	r3, r3, #7
 800279e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d117      	bne.n	80027e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00e      	beq.n	80027e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fa6f 	bl	8002ca8 <DMA_CheckFifoParam>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2240      	movs	r2, #64	; 0x40
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027de:	2301      	movs	r3, #1
 80027e0:	e016      	b.n	8002810 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fa26 	bl	8002c3c <DMA_CalcBaseAndBitshift>
 80027f0:	4603      	mov	r3, r0
 80027f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	223f      	movs	r2, #63	; 0x3f
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	f010803f 	.word	0xf010803f

0800281c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_DMA_Start_IT+0x26>
 800283e:	2302      	movs	r3, #2
 8002840:	e040      	b.n	80028c4 <HAL_DMA_Start_IT+0xa8>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d12f      	bne.n	80028b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2202      	movs	r2, #2
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f9b8 	bl	8002be0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	223f      	movs	r2, #63	; 0x3f
 8002876:	409a      	lsls	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0216 	orr.w	r2, r2, #22
 800288a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0208 	orr.w	r2, r2, #8
 80028a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e005      	b.n	80028c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028d8:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <HAL_DMA_IRQHandler+0x248>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a8e      	ldr	r2, [pc, #568]	; (8002b18 <HAL_DMA_IRQHandler+0x24c>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	2208      	movs	r2, #8
 80028f8:	409a      	lsls	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0204 	bic.w	r2, r2, #4
 800291e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	2208      	movs	r2, #8
 8002926:	409a      	lsls	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	2201      	movs	r2, #1
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d012      	beq.n	800296e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	2201      	movs	r2, #1
 800295c:	409a      	lsls	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	2204      	movs	r2, #4
 8002974:	409a      	lsls	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d012      	beq.n	80029a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	2204      	movs	r2, #4
 8002992:	409a      	lsls	r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f043 0204 	orr.w	r2, r3, #4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	2210      	movs	r2, #16
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d043      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d03c      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	2210      	movs	r2, #16
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d018      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d108      	bne.n	80029fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d024      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
 80029fa:	e01f      	b.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01b      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
 8002a0c:	e016      	b.n	8002a3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d107      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0208 	bic.w	r2, r2, #8
 8002a2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2220      	movs	r2, #32
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 808f 	beq.w	8002b6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8087 	beq.w	8002b6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a62:	2220      	movs	r2, #32
 8002a64:	409a      	lsls	r2, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d136      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0216 	bic.w	r2, r2, #22
 8002a84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <HAL_DMA_IRQHandler+0x1da>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0208 	bic.w	r2, r2, #8
 8002ab4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	223f      	movs	r2, #63	; 0x3f
 8002abc:	409a      	lsls	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d07e      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
        }
        return;
 8002ae2:	e079      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01d      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d031      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
 8002b10:	e02c      	b.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
 8002b12:	bf00      	nop
 8002b14:	20000000 	.word	0x20000000
 8002b18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d023      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
 8002b2c:	e01e      	b.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10f      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0210 	bic.w	r2, r2, #16
 8002b4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d032      	beq.n	8002bda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d022      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2205      	movs	r2, #5
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d307      	bcc.n	8002bb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f2      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x2cc>
 8002bb2:	e000      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
 8002bd6:	e000      	b.n	8002bda <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bd8:	bf00      	nop
    }
  }
}
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d108      	bne.n	8002c20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c1e:	e007      	b.n	8002c30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	60da      	str	r2, [r3, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3b10      	subs	r3, #16
 8002c4c:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d909      	bls.n	8002c7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c7c:	e007      	b.n	8002c8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	aaaaaaab 	.word	0xaaaaaaab
 8002ca4:	08007514 	.word	0x08007514

08002ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11f      	bne.n	8002d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d856      	bhi.n	8002d76 <DMA_CheckFifoParam+0xce>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <DMA_CheckFifoParam+0x28>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002cf3 	.word	0x08002cf3
 8002cd8:	08002ce1 	.word	0x08002ce1
 8002cdc:	08002d77 	.word	0x08002d77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d046      	beq.n	8002d7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf0:	e043      	b.n	8002d7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cfa:	d140      	bne.n	8002d7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e03d      	b.n	8002d7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0a:	d121      	bne.n	8002d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d837      	bhi.n	8002d82 <DMA_CheckFifoParam+0xda>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <DMA_CheckFifoParam+0x70>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d2f 	.word	0x08002d2f
 8002d20:	08002d29 	.word	0x08002d29
 8002d24:	08002d41 	.word	0x08002d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2c:	e030      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d025      	beq.n	8002d86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3e:	e022      	b.n	8002d86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d4e:	e01c      	b.n	8002d8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d903      	bls.n	8002d5e <DMA_CheckFifoParam+0xb6>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d003      	beq.n	8002d64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d5c:	e018      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      break;
 8002d62:	e015      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e00b      	b.n	8002d8e <DMA_CheckFifoParam+0xe6>
      break;
 8002d76:	bf00      	nop
 8002d78:	e00a      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e008      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e006      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
 8002d84:	e004      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e159      	b.n	8003070 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 8148 	bne.w	800306a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d005      	beq.n	8002df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d130      	bne.n	8002e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d017      	beq.n	8002e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80a2 	beq.w	800306a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b57      	ldr	r3, [pc, #348]	; (8003088 <HAL_GPIO_Init+0x2e8>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a56      	ldr	r2, [pc, #344]	; (8003088 <HAL_GPIO_Init+0x2e8>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b54      	ldr	r3, [pc, #336]	; (8003088 <HAL_GPIO_Init+0x2e8>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f42:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_GPIO_Init+0x2ec>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a49      	ldr	r2, [pc, #292]	; (8003090 <HAL_GPIO_Init+0x2f0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d019      	beq.n	8002fa2 <HAL_GPIO_Init+0x202>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a48      	ldr	r2, [pc, #288]	; (8003094 <HAL_GPIO_Init+0x2f4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_GPIO_Init+0x1fe>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a47      	ldr	r2, [pc, #284]	; (8003098 <HAL_GPIO_Init+0x2f8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00d      	beq.n	8002f9a <HAL_GPIO_Init+0x1fa>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a46      	ldr	r2, [pc, #280]	; (800309c <HAL_GPIO_Init+0x2fc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <HAL_GPIO_Init+0x1f6>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a45      	ldr	r2, [pc, #276]	; (80030a0 <HAL_GPIO_Init+0x300>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <HAL_GPIO_Init+0x1f2>
 8002f8e:	2304      	movs	r3, #4
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_Init+0x204>
 8002f92:	2307      	movs	r3, #7
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x204>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x204>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x204>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x204>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb4:	4935      	ldr	r1, [pc, #212]	; (800308c <HAL_GPIO_Init+0x2ec>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc2:	4b38      	ldr	r3, [pc, #224]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe6:	4a2f      	ldr	r2, [pc, #188]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fec:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003010:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003016:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800303a:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <HAL_GPIO_Init+0x304>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003064:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b0f      	cmp	r3, #15
 8003074:	f67f aea2 	bls.w	8002dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	40013800 	.word	0x40013800
 8003090:	40020000 	.word	0x40020000
 8003094:	40020400 	.word	0x40020400
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40013c00 	.word	0x40013c00

080030a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
 80030b4:	4613      	mov	r3, r2
 80030b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030c4:	e003      	b.n	80030ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030c6:	887b      	ldrh	r3, [r7, #2]
 80030c8:	041a      	lsls	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	619a      	str	r2, [r3, #24]
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e267      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d075      	beq.n	80031e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fa:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b04      	cmp	r3, #4
 8003104:	d00c      	beq.n	8003120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4b85      	ldr	r3, [pc, #532]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800310e:	2b08      	cmp	r3, #8
 8003110:	d112      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003112:	4b82      	ldr	r3, [pc, #520]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311e:	d10b      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	4b7e      	ldr	r3, [pc, #504]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d05b      	beq.n	80031e4 <HAL_RCC_OscConfig+0x108>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d157      	bne.n	80031e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e242      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003140:	d106      	bne.n	8003150 <HAL_RCC_OscConfig+0x74>
 8003142:	4b76      	ldr	r3, [pc, #472]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a75      	ldr	r2, [pc, #468]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e01d      	b.n	800318c <HAL_RCC_OscConfig+0xb0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x98>
 800315a:	4b70      	ldr	r3, [pc, #448]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6f      	ldr	r2, [pc, #444]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b6d      	ldr	r3, [pc, #436]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6c      	ldr	r2, [pc, #432]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e00b      	b.n	800318c <HAL_RCC_OscConfig+0xb0>
 8003174:	4b69      	ldr	r3, [pc, #420]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a68      	ldr	r2, [pc, #416]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800317a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b66      	ldr	r3, [pc, #408]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a65      	ldr	r2, [pc, #404]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fc6a 	bl	8001a6c <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800319c:	f7fe fc66 	bl	8001a6c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e207      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b5b      	ldr	r3, [pc, #364]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0xc0>
 80031ba:	e014      	b.n	80031e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fc56 	bl	8001a6c <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fe fc52 	bl	8001a6c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e1f3      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	4b51      	ldr	r3, [pc, #324]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0xe8>
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d063      	beq.n	80032ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003206:	2b08      	cmp	r3, #8
 8003208:	d11c      	bne.n	8003244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320a:	4b44      	ldr	r3, [pc, #272]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d116      	bne.n	8003244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_RCC_OscConfig+0x152>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e1c7      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4937      	ldr	r1, [pc, #220]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	e03a      	b.n	80032ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	4b34      	ldr	r3, [pc, #208]	; (8003320 <HAL_RCC_OscConfig+0x244>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fe fc0b 	bl	8001a6c <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325a:	f7fe fc07 	bl	8001a6c <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1a8      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4925      	ldr	r1, [pc, #148]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_RCC_OscConfig+0x244>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe fbea 	bl	8001a6c <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329c:	f7fe fbe6 	bl	8001a6c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e187      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d036      	beq.n	8003334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <HAL_RCC_OscConfig+0x248>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe fbca 	bl	8001a6c <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032dc:	f7fe fbc6 	bl	8001a6c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e167      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80032f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x200>
 80032fa:	e01b      	b.n	8003334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_OscConfig+0x248>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7fe fbb3 	bl	8001a6c <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	e00e      	b.n	8003328 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330a:	f7fe fbaf 	bl	8001a6c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d907      	bls.n	8003328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e150      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
 800331c:	40023800 	.word	0x40023800
 8003320:	42470000 	.word	0x42470000
 8003324:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ea      	bne.n	800330a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8097 	beq.w	8003470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003346:	4b81      	ldr	r3, [pc, #516]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b7d      	ldr	r3, [pc, #500]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a7c      	ldr	r2, [pc, #496]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b7a      	ldr	r3, [pc, #488]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b77      	ldr	r3, [pc, #476]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d118      	bne.n	80033b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337e:	4b74      	ldr	r3, [pc, #464]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a73      	ldr	r2, [pc, #460]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338a:	f7fe fb6f 	bl	8001a6c <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7fe fb6b 	bl	8001a6c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e10c      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x2ea>
 80033b8:	4b64      	ldr	r3, [pc, #400]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a63      	ldr	r2, [pc, #396]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x324>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x30c>
 80033ce:	4b5f      	ldr	r3, [pc, #380]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a5e      	ldr	r2, [pc, #376]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
 80033da:	4b5c      	ldr	r3, [pc, #368]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a5b      	ldr	r2, [pc, #364]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0x324>
 80033e8:	4b58      	ldr	r3, [pc, #352]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a57      	ldr	r2, [pc, #348]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
 80033f4:	4b55      	ldr	r3, [pc, #340]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	4a54      	ldr	r2, [pc, #336]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033fa:	f023 0304 	bic.w	r3, r3, #4
 80033fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe fb30 	bl	8001a6c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fe fb2c 	bl	8001a6c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0cb      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003426:	4b49      	ldr	r3, [pc, #292]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ee      	beq.n	8003410 <HAL_RCC_OscConfig+0x334>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003434:	f7fe fb1a 	bl	8001a6c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fe fb16 	bl	8001a6c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0b5      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003452:	4b3e      	ldr	r3, [pc, #248]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ee      	bne.n	800343c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345e:	7dfb      	ldrb	r3, [r7, #23]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003464:	4b39      	ldr	r3, [pc, #228]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	4a38      	ldr	r2, [pc, #224]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800346a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a1 	beq.w	80035bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347a:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b08      	cmp	r3, #8
 8003484:	d05c      	beq.n	8003540 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d141      	bne.n	8003512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <HAL_RCC_OscConfig+0x478>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe faea 	bl	8001a6c <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe fae6 	bl	8001a6c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e087      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	3b01      	subs	r3, #1
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	491b      	ldr	r1, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e4:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_RCC_OscConfig+0x478>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fe fabf 	bl	8001a6c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fe fabb 	bl	8001a6c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e05c      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x416>
 8003510:	e054      	b.n	80035bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_RCC_OscConfig+0x478>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe faa8 	bl	8001a6c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe faa4 	bl	8001a6c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e045      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x444>
 800353e:	e03d      	b.n	80035bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e038      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
 800354c:	40023800 	.word	0x40023800
 8003550:	40007000 	.word	0x40007000
 8003554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_OscConfig+0x4ec>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d028      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d121      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d11a      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800358e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003590:	4293      	cmp	r3, r2
 8003592:	d111      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	3b01      	subs	r3, #1
 80035a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800

080035cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0cc      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b68      	ldr	r3, [pc, #416]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d90c      	bls.n	8003608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b65      	ldr	r3, [pc, #404]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b63      	ldr	r3, [pc, #396]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0b8      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003620:	4b59      	ldr	r3, [pc, #356]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a58      	ldr	r2, [pc, #352]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800362a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003638:	4b53      	ldr	r3, [pc, #332]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4a52      	ldr	r2, [pc, #328]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	494d      	ldr	r1, [pc, #308]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d044      	beq.n	80036ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d119      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e07f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d003      	beq.n	800368a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003686:	2b03      	cmp	r3, #3
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e06f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369a:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e067      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036aa:	4b37      	ldr	r3, [pc, #220]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 0203 	bic.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4934      	ldr	r1, [pc, #208]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036bc:	f7fe f9d6 	bl	8001a6c <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	e00a      	b.n	80036da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c4:	f7fe f9d2 	bl	8001a6c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e04f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036da:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 020c 	and.w	r2, r3, #12
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1eb      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ec:	4b25      	ldr	r3, [pc, #148]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d20c      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b22      	ldr	r3, [pc, #136]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b20      	ldr	r3, [pc, #128]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e032      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4916      	ldr	r1, [pc, #88]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	490e      	ldr	r1, [pc, #56]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003752:	f000 f821 	bl	8003798 <HAL_RCC_GetSysClockFreq>
 8003756:	4602      	mov	r2, r0
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	490a      	ldr	r1, [pc, #40]	; (800378c <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	5ccb      	ldrb	r3, [r1, r3]
 8003766:	fa22 f303 	lsr.w	r3, r2, r3
 800376a:	4a09      	ldr	r2, [pc, #36]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe f936 	bl	80019e4 <HAL_InitTick>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023c00 	.word	0x40023c00
 8003788:	40023800 	.word	0x40023800
 800378c:	080074fc 	.word	0x080074fc
 8003790:	20000000 	.word	0x20000000
 8003794:	20000004 	.word	0x20000004

08003798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b094      	sub	sp, #80	; 0x50
 800379e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	647b      	str	r3, [r7, #68]	; 0x44
 80037a4:	2300      	movs	r3, #0
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a8:	2300      	movs	r3, #0
 80037aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b0:	4b79      	ldr	r3, [pc, #484]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d00d      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x40>
 80037bc:	2b08      	cmp	r3, #8
 80037be:	f200 80e1 	bhi.w	8003984 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x34>
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ca:	e0db      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b73      	ldr	r3, [pc, #460]	; (800399c <HAL_RCC_GetSysClockFreq+0x204>)
 80037ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037d0:	e0db      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d2:	4b73      	ldr	r3, [pc, #460]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80037d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d6:	e0d8      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d8:	4b6f      	ldr	r3, [pc, #444]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e2:	4b6d      	ldr	r3, [pc, #436]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d063      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ee:	4b6a      	ldr	r3, [pc, #424]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	099b      	lsrs	r3, r3, #6
 80037f4:	2200      	movs	r2, #0
 80037f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
 8003802:	2300      	movs	r3, #0
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
 8003806:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800380a:	4622      	mov	r2, r4
 800380c:	462b      	mov	r3, r5
 800380e:	f04f 0000 	mov.w	r0, #0
 8003812:	f04f 0100 	mov.w	r1, #0
 8003816:	0159      	lsls	r1, r3, #5
 8003818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800381c:	0150      	lsls	r0, r2, #5
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4621      	mov	r1, r4
 8003824:	1a51      	subs	r1, r2, r1
 8003826:	6139      	str	r1, [r7, #16]
 8003828:	4629      	mov	r1, r5
 800382a:	eb63 0301 	sbc.w	r3, r3, r1
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800383c:	4659      	mov	r1, fp
 800383e:	018b      	lsls	r3, r1, #6
 8003840:	4651      	mov	r1, sl
 8003842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003846:	4651      	mov	r1, sl
 8003848:	018a      	lsls	r2, r1, #6
 800384a:	4651      	mov	r1, sl
 800384c:	ebb2 0801 	subs.w	r8, r2, r1
 8003850:	4659      	mov	r1, fp
 8003852:	eb63 0901 	sbc.w	r9, r3, r1
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800386a:	4690      	mov	r8, r2
 800386c:	4699      	mov	r9, r3
 800386e:	4623      	mov	r3, r4
 8003870:	eb18 0303 	adds.w	r3, r8, r3
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	462b      	mov	r3, r5
 8003878:	eb49 0303 	adc.w	r3, r9, r3
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800388a:	4629      	mov	r1, r5
 800388c:	024b      	lsls	r3, r1, #9
 800388e:	4621      	mov	r1, r4
 8003890:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003894:	4621      	mov	r1, r4
 8003896:	024a      	lsls	r2, r1, #9
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389e:	2200      	movs	r2, #0
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038a8:	f7fd f9d6 	bl	8000c58 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4613      	mov	r3, r2
 80038b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b4:	e058      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b6:	4b38      	ldr	r3, [pc, #224]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	2200      	movs	r2, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	4611      	mov	r1, r2
 80038c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	2300      	movs	r3, #0
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
 80038cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	0159      	lsls	r1, r3, #5
 80038de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e2:	0150      	lsls	r0, r2, #5
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4641      	mov	r1, r8
 80038ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ee:	4649      	mov	r1, r9
 80038f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003900:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003904:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003908:	ebb2 040a 	subs.w	r4, r2, sl
 800390c:	eb63 050b 	sbc.w	r5, r3, fp
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	00eb      	lsls	r3, r5, #3
 800391a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800391e:	00e2      	lsls	r2, r4, #3
 8003920:	4614      	mov	r4, r2
 8003922:	461d      	mov	r5, r3
 8003924:	4643      	mov	r3, r8
 8003926:	18e3      	adds	r3, r4, r3
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	464b      	mov	r3, r9
 800392c:	eb45 0303 	adc.w	r3, r5, r3
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800393e:	4629      	mov	r1, r5
 8003940:	028b      	lsls	r3, r1, #10
 8003942:	4621      	mov	r1, r4
 8003944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003948:	4621      	mov	r1, r4
 800394a:	028a      	lsls	r2, r1, #10
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003952:	2200      	movs	r2, #0
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	61fa      	str	r2, [r7, #28]
 8003958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800395c:	f7fd f97c 	bl	8000c58 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4613      	mov	r3, r2
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	3301      	adds	r3, #1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800397a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003982:	e002      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetSysClockFreq+0x204>)
 8003986:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800398a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800398c:	4618      	mov	r0, r3
 800398e:	3750      	adds	r7, #80	; 0x50
 8003990:	46bd      	mov	sp, r7
 8003992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	00f42400 	.word	0x00f42400
 80039a0:	007a1200 	.word	0x007a1200

080039a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000000 	.word	0x20000000

080039bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039c0:	f7ff fff0 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	0a9b      	lsrs	r3, r3, #10
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4903      	ldr	r1, [pc, #12]	; (80039e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40023800 	.word	0x40023800
 80039e0:	0800750c 	.word	0x0800750c

080039e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039e8:	f7ff ffdc 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	0b5b      	lsrs	r3, r3, #13
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	4903      	ldr	r1, [pc, #12]	; (8003a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	0800750c 	.word	0x0800750c

08003a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e041      	b.n	8003aa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd fe0c 	bl	8001650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 f950 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d001      	beq.n	8003ac4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e03c      	b.n	8003b3e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <HAL_TIM_Base_Start+0xa0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d018      	beq.n	8003b08 <HAL_TIM_Base_Start+0x5c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ade:	d013      	beq.n	8003b08 <HAL_TIM_Base_Start+0x5c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1a      	ldr	r2, [pc, #104]	; (8003b50 <HAL_TIM_Base_Start+0xa4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00e      	beq.n	8003b08 <HAL_TIM_Base_Start+0x5c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <HAL_TIM_Base_Start+0xa8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_TIM_Base_Start+0x5c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <HAL_TIM_Base_Start+0xac>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_TIM_Base_Start+0x5c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_TIM_Base_Start+0xb0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d111      	bne.n	8003b2c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d010      	beq.n	8003b3c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2a:	e007      	b.n	8003b3c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800
 8003b58:	40000c00 	.word	0x40000c00
 8003b5c:	40014000 	.word	0x40014000

08003b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIM_ConfigClockSource+0x1c>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0b4      	b.n	8003ce6 <HAL_TIM_ConfigClockSource+0x186>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb4:	d03e      	beq.n	8003c34 <HAL_TIM_ConfigClockSource+0xd4>
 8003bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bba:	f200 8087 	bhi.w	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc2:	f000 8086 	beq.w	8003cd2 <HAL_TIM_ConfigClockSource+0x172>
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bca:	d87f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b70      	cmp	r3, #112	; 0x70
 8003bce:	d01a      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0xa6>
 8003bd0:	2b70      	cmp	r3, #112	; 0x70
 8003bd2:	d87b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b60      	cmp	r3, #96	; 0x60
 8003bd6:	d050      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x11a>
 8003bd8:	2b60      	cmp	r3, #96	; 0x60
 8003bda:	d877      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b50      	cmp	r3, #80	; 0x50
 8003bde:	d03c      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0xfa>
 8003be0:	2b50      	cmp	r3, #80	; 0x50
 8003be2:	d873      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d058      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x13a>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d86f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b30      	cmp	r3, #48	; 0x30
 8003bee:	d064      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	2b30      	cmp	r3, #48	; 0x30
 8003bf2:	d86b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d060      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d867      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05c      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d05a      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003c04:	e062      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f000 f965 	bl	8003ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	609a      	str	r2, [r3, #8]
      break;
 8003c32:	e04f      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f000 f94e 	bl	8003ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c56:	609a      	str	r2, [r3, #8]
      break;
 8003c58:	e03c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f000 f8c2 	bl	8003df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2150      	movs	r1, #80	; 0x50
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f91b 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c78:	e02c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f000 f8e1 	bl	8003e4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2160      	movs	r1, #96	; 0x60
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f90b 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c98:	e01c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f000 f8a2 	bl	8003df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f8fb 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003cb8:	e00c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f000 f8f2 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003cca:	e003      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd0:	e000      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a34      	ldr	r2, [pc, #208]	; (8003dd4 <TIM_Base_SetConfig+0xe4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00f      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d00b      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a31      	ldr	r2, [pc, #196]	; (8003dd8 <TIM_Base_SetConfig+0xe8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d007      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <TIM_Base_SetConfig+0xec>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a2f      	ldr	r2, [pc, #188]	; (8003de0 <TIM_Base_SetConfig+0xf0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d108      	bne.n	8003d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a25      	ldr	r2, [pc, #148]	; (8003dd4 <TIM_Base_SetConfig+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01b      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d48:	d017      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <TIM_Base_SetConfig+0xe8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <TIM_Base_SetConfig+0xec>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00f      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a20      	ldr	r2, [pc, #128]	; (8003de0 <TIM_Base_SetConfig+0xf0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <TIM_Base_SetConfig+0xf4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <TIM_Base_SetConfig+0xf8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1d      	ldr	r2, [pc, #116]	; (8003dec <TIM_Base_SetConfig+0xfc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d108      	bne.n	8003d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <TIM_Base_SetConfig+0xe4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d103      	bne.n	8003dc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	615a      	str	r2, [r3, #20]
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40000800 	.word	0x40000800
 8003de0:	40000c00 	.word	0x40000c00
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40014400 	.word	0x40014400
 8003dec:	40014800 	.word	0x40014800

08003df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0201 	bic.w	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f023 030a 	bic.w	r3, r3, #10
 8003e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b087      	sub	sp, #28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f023 0210 	bic.w	r2, r3, #16
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	031b      	lsls	r3, r3, #12
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f043 0307 	orr.w	r3, r3, #7
 8003ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e050      	b.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d018      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f88:	d013      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00e      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a16      	ldr	r2, [pc, #88]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10c      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40014000 	.word	0x40014000

08004000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e03f      	b.n	8004092 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd fb32 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	; 0x24
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f929 	bl	800429c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b08a      	sub	sp, #40	; 0x28
 800409e:	af02      	add	r7, sp, #8
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d17c      	bne.n	80041b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_UART_Transmit+0x2c>
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e075      	b.n	80041b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_UART_Transmit+0x3e>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e06e      	b.n	80041b6 <HAL_UART_Transmit+0x11c>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2221      	movs	r2, #33	; 0x21
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ee:	f7fd fcbd 	bl	8001a6c <HAL_GetTick>
 80040f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004108:	d108      	bne.n	800411c <HAL_UART_Transmit+0x82>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d104      	bne.n	800411c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e003      	b.n	8004124 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800412c:	e02a      	b.n	8004184 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	2180      	movs	r1, #128	; 0x80
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f840 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e036      	b.n	80041b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800415c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	3302      	adds	r3, #2
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	e007      	b.n	8004176 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	3301      	adds	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1cf      	bne.n	800412e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	2140      	movs	r1, #64	; 0x40
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f810 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e006      	b.n	80041b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e000      	b.n	80041b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
  }
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3720      	adds	r7, #32
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b090      	sub	sp, #64	; 0x40
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ce:	e050      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d6:	d04c      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <UART_WaitOnFlagUntilTimeout+0x30>
 80041de:	f7fd fc45 	bl	8001a6c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d241      	bcs.n	8004272 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800420e:	637a      	str	r2, [r7, #52]	; 0x34
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e5      	bne.n	80041ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	613b      	str	r3, [r7, #16]
   return(result);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	63bb      	str	r3, [r7, #56]	; 0x38
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3314      	adds	r3, #20
 8004240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004242:	623a      	str	r2, [r7, #32]
 8004244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	69f9      	ldr	r1, [r7, #28]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e5      	bne.n	8004222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e00f      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4013      	ands	r3, r2
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	429a      	cmp	r2, r3
 800428e:	d09f      	beq.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3740      	adds	r7, #64	; 0x40
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800429c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a0:	b0c0      	sub	sp, #256	; 0x100
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	68d9      	ldr	r1, [r3, #12]
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	ea40 0301 	orr.w	r3, r0, r1
 80042c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	431a      	orrs	r2, r3
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042f4:	f021 010c 	bic.w	r1, r1, #12
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004302:	430b      	orrs	r3, r1
 8004304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004316:	6999      	ldr	r1, [r3, #24]
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	ea40 0301 	orr.w	r3, r0, r1
 8004322:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b8f      	ldr	r3, [pc, #572]	; (8004568 <UART_SetConfig+0x2cc>)
 800432c:	429a      	cmp	r2, r3
 800432e:	d005      	beq.n	800433c <UART_SetConfig+0xa0>
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	4b8d      	ldr	r3, [pc, #564]	; (800456c <UART_SetConfig+0x2d0>)
 8004338:	429a      	cmp	r2, r3
 800433a:	d104      	bne.n	8004346 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800433c:	f7ff fb52 	bl	80039e4 <HAL_RCC_GetPCLK2Freq>
 8004340:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004344:	e003      	b.n	800434e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004346:	f7ff fb39 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 800434a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004358:	f040 810c 	bne.w	8004574 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800435c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004360:	2200      	movs	r2, #0
 8004362:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004366:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800436a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800436e:	4622      	mov	r2, r4
 8004370:	462b      	mov	r3, r5
 8004372:	1891      	adds	r1, r2, r2
 8004374:	65b9      	str	r1, [r7, #88]	; 0x58
 8004376:	415b      	adcs	r3, r3
 8004378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800437a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800437e:	4621      	mov	r1, r4
 8004380:	eb12 0801 	adds.w	r8, r2, r1
 8004384:	4629      	mov	r1, r5
 8004386:	eb43 0901 	adc.w	r9, r3, r1
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800439a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800439e:	4690      	mov	r8, r2
 80043a0:	4699      	mov	r9, r3
 80043a2:	4623      	mov	r3, r4
 80043a4:	eb18 0303 	adds.w	r3, r8, r3
 80043a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043ac:	462b      	mov	r3, r5
 80043ae:	eb49 0303 	adc.w	r3, r9, r3
 80043b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043ca:	460b      	mov	r3, r1
 80043cc:	18db      	adds	r3, r3, r3
 80043ce:	653b      	str	r3, [r7, #80]	; 0x50
 80043d0:	4613      	mov	r3, r2
 80043d2:	eb42 0303 	adc.w	r3, r2, r3
 80043d6:	657b      	str	r3, [r7, #84]	; 0x54
 80043d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043e0:	f7fc fc3a 	bl	8000c58 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4b61      	ldr	r3, [pc, #388]	; (8004570 <UART_SetConfig+0x2d4>)
 80043ea:	fba3 2302 	umull	r2, r3, r3, r2
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	011c      	lsls	r4, r3, #4
 80043f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004400:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004404:	4642      	mov	r2, r8
 8004406:	464b      	mov	r3, r9
 8004408:	1891      	adds	r1, r2, r2
 800440a:	64b9      	str	r1, [r7, #72]	; 0x48
 800440c:	415b      	adcs	r3, r3
 800440e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004410:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004414:	4641      	mov	r1, r8
 8004416:	eb12 0a01 	adds.w	sl, r2, r1
 800441a:	4649      	mov	r1, r9
 800441c:	eb43 0b01 	adc.w	fp, r3, r1
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800442c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004430:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004434:	4692      	mov	sl, r2
 8004436:	469b      	mov	fp, r3
 8004438:	4643      	mov	r3, r8
 800443a:	eb1a 0303 	adds.w	r3, sl, r3
 800443e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004442:	464b      	mov	r3, r9
 8004444:	eb4b 0303 	adc.w	r3, fp, r3
 8004448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004458:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800445c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004460:	460b      	mov	r3, r1
 8004462:	18db      	adds	r3, r3, r3
 8004464:	643b      	str	r3, [r7, #64]	; 0x40
 8004466:	4613      	mov	r3, r2
 8004468:	eb42 0303 	adc.w	r3, r2, r3
 800446c:	647b      	str	r3, [r7, #68]	; 0x44
 800446e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004472:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004476:	f7fc fbef 	bl	8000c58 <__aeabi_uldivmod>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4611      	mov	r1, r2
 8004480:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <UART_SetConfig+0x2d4>)
 8004482:	fba3 2301 	umull	r2, r3, r3, r1
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	2264      	movs	r2, #100	; 0x64
 800448a:	fb02 f303 	mul.w	r3, r2, r3
 800448e:	1acb      	subs	r3, r1, r3
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004496:	4b36      	ldr	r3, [pc, #216]	; (8004570 <UART_SetConfig+0x2d4>)
 8004498:	fba3 2302 	umull	r2, r3, r3, r2
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044a4:	441c      	add	r4, r3
 80044a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044b8:	4642      	mov	r2, r8
 80044ba:	464b      	mov	r3, r9
 80044bc:	1891      	adds	r1, r2, r2
 80044be:	63b9      	str	r1, [r7, #56]	; 0x38
 80044c0:	415b      	adcs	r3, r3
 80044c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044c8:	4641      	mov	r1, r8
 80044ca:	1851      	adds	r1, r2, r1
 80044cc:	6339      	str	r1, [r7, #48]	; 0x30
 80044ce:	4649      	mov	r1, r9
 80044d0:	414b      	adcs	r3, r1
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044e0:	4659      	mov	r1, fp
 80044e2:	00cb      	lsls	r3, r1, #3
 80044e4:	4651      	mov	r1, sl
 80044e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ea:	4651      	mov	r1, sl
 80044ec:	00ca      	lsls	r2, r1, #3
 80044ee:	4610      	mov	r0, r2
 80044f0:	4619      	mov	r1, r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	4642      	mov	r2, r8
 80044f6:	189b      	adds	r3, r3, r2
 80044f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044fc:	464b      	mov	r3, r9
 80044fe:	460a      	mov	r2, r1
 8004500:	eb42 0303 	adc.w	r3, r2, r3
 8004504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004514:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004518:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800451c:	460b      	mov	r3, r1
 800451e:	18db      	adds	r3, r3, r3
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
 8004522:	4613      	mov	r3, r2
 8004524:	eb42 0303 	adc.w	r3, r2, r3
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800452a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800452e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004532:	f7fc fb91 	bl	8000c58 <__aeabi_uldivmod>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <UART_SetConfig+0x2d4>)
 800453c:	fba3 1302 	umull	r1, r3, r3, r2
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	2164      	movs	r1, #100	; 0x64
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	3332      	adds	r3, #50	; 0x32
 800454e:	4a08      	ldr	r2, [pc, #32]	; (8004570 <UART_SetConfig+0x2d4>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	f003 0207 	and.w	r2, r3, #7
 800455a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4422      	add	r2, r4
 8004562:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004564:	e106      	b.n	8004774 <UART_SetConfig+0x4d8>
 8004566:	bf00      	nop
 8004568:	40011000 	.word	0x40011000
 800456c:	40011400 	.word	0x40011400
 8004570:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004578:	2200      	movs	r2, #0
 800457a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800457e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004582:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004586:	4642      	mov	r2, r8
 8004588:	464b      	mov	r3, r9
 800458a:	1891      	adds	r1, r2, r2
 800458c:	6239      	str	r1, [r7, #32]
 800458e:	415b      	adcs	r3, r3
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
 8004592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004596:	4641      	mov	r1, r8
 8004598:	1854      	adds	r4, r2, r1
 800459a:	4649      	mov	r1, r9
 800459c:	eb43 0501 	adc.w	r5, r3, r1
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	00eb      	lsls	r3, r5, #3
 80045aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ae:	00e2      	lsls	r2, r4, #3
 80045b0:	4614      	mov	r4, r2
 80045b2:	461d      	mov	r5, r3
 80045b4:	4643      	mov	r3, r8
 80045b6:	18e3      	adds	r3, r4, r3
 80045b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045bc:	464b      	mov	r3, r9
 80045be:	eb45 0303 	adc.w	r3, r5, r3
 80045c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045e2:	4629      	mov	r1, r5
 80045e4:	008b      	lsls	r3, r1, #2
 80045e6:	4621      	mov	r1, r4
 80045e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ec:	4621      	mov	r1, r4
 80045ee:	008a      	lsls	r2, r1, #2
 80045f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045f4:	f7fc fb30 	bl	8000c58 <__aeabi_uldivmod>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4b60      	ldr	r3, [pc, #384]	; (8004780 <UART_SetConfig+0x4e4>)
 80045fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	011c      	lsls	r4, r3, #4
 8004606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800460a:	2200      	movs	r2, #0
 800460c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004610:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004614:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004618:	4642      	mov	r2, r8
 800461a:	464b      	mov	r3, r9
 800461c:	1891      	adds	r1, r2, r2
 800461e:	61b9      	str	r1, [r7, #24]
 8004620:	415b      	adcs	r3, r3
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004628:	4641      	mov	r1, r8
 800462a:	1851      	adds	r1, r2, r1
 800462c:	6139      	str	r1, [r7, #16]
 800462e:	4649      	mov	r1, r9
 8004630:	414b      	adcs	r3, r1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004640:	4659      	mov	r1, fp
 8004642:	00cb      	lsls	r3, r1, #3
 8004644:	4651      	mov	r1, sl
 8004646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800464a:	4651      	mov	r1, sl
 800464c:	00ca      	lsls	r2, r1, #3
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	4603      	mov	r3, r0
 8004654:	4642      	mov	r2, r8
 8004656:	189b      	adds	r3, r3, r2
 8004658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800465c:	464b      	mov	r3, r9
 800465e:	460a      	mov	r2, r1
 8004660:	eb42 0303 	adc.w	r3, r2, r3
 8004664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	67bb      	str	r3, [r7, #120]	; 0x78
 8004672:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004680:	4649      	mov	r1, r9
 8004682:	008b      	lsls	r3, r1, #2
 8004684:	4641      	mov	r1, r8
 8004686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800468a:	4641      	mov	r1, r8
 800468c:	008a      	lsls	r2, r1, #2
 800468e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004692:	f7fc fae1 	bl	8000c58 <__aeabi_uldivmod>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4611      	mov	r1, r2
 800469c:	4b38      	ldr	r3, [pc, #224]	; (8004780 <UART_SetConfig+0x4e4>)
 800469e:	fba3 2301 	umull	r2, r3, r3, r1
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2264      	movs	r2, #100	; 0x64
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	1acb      	subs	r3, r1, r3
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	3332      	adds	r3, #50	; 0x32
 80046b0:	4a33      	ldr	r2, [pc, #204]	; (8004780 <UART_SetConfig+0x4e4>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046bc:	441c      	add	r4, r3
 80046be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c2:	2200      	movs	r2, #0
 80046c4:	673b      	str	r3, [r7, #112]	; 0x70
 80046c6:	677a      	str	r2, [r7, #116]	; 0x74
 80046c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046cc:	4642      	mov	r2, r8
 80046ce:	464b      	mov	r3, r9
 80046d0:	1891      	adds	r1, r2, r2
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	415b      	adcs	r3, r3
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046dc:	4641      	mov	r1, r8
 80046de:	1851      	adds	r1, r2, r1
 80046e0:	6039      	str	r1, [r7, #0]
 80046e2:	4649      	mov	r1, r9
 80046e4:	414b      	adcs	r3, r1
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046f4:	4659      	mov	r1, fp
 80046f6:	00cb      	lsls	r3, r1, #3
 80046f8:	4651      	mov	r1, sl
 80046fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046fe:	4651      	mov	r1, sl
 8004700:	00ca      	lsls	r2, r1, #3
 8004702:	4610      	mov	r0, r2
 8004704:	4619      	mov	r1, r3
 8004706:	4603      	mov	r3, r0
 8004708:	4642      	mov	r2, r8
 800470a:	189b      	adds	r3, r3, r2
 800470c:	66bb      	str	r3, [r7, #104]	; 0x68
 800470e:	464b      	mov	r3, r9
 8004710:	460a      	mov	r2, r1
 8004712:	eb42 0303 	adc.w	r3, r2, r3
 8004716:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	663b      	str	r3, [r7, #96]	; 0x60
 8004722:	667a      	str	r2, [r7, #100]	; 0x64
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004730:	4649      	mov	r1, r9
 8004732:	008b      	lsls	r3, r1, #2
 8004734:	4641      	mov	r1, r8
 8004736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800473a:	4641      	mov	r1, r8
 800473c:	008a      	lsls	r2, r1, #2
 800473e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004742:	f7fc fa89 	bl	8000c58 <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <UART_SetConfig+0x4e4>)
 800474c:	fba3 1302 	umull	r1, r3, r3, r2
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	2164      	movs	r1, #100	; 0x64
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	3332      	adds	r3, #50	; 0x32
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <UART_SetConfig+0x4e4>)
 8004760:	fba2 2303 	umull	r2, r3, r2, r3
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	f003 020f 	and.w	r2, r3, #15
 800476a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4422      	add	r2, r4
 8004772:	609a      	str	r2, [r3, #8]
}
 8004774:	bf00      	nop
 8004776:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800477a:	46bd      	mov	sp, r7
 800477c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004780:	51eb851f 	.word	0x51eb851f

08004784 <__cvt>:
 8004784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004788:	ec55 4b10 	vmov	r4, r5, d0
 800478c:	2d00      	cmp	r5, #0
 800478e:	460e      	mov	r6, r1
 8004790:	4619      	mov	r1, r3
 8004792:	462b      	mov	r3, r5
 8004794:	bfbb      	ittet	lt
 8004796:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800479a:	461d      	movlt	r5, r3
 800479c:	2300      	movge	r3, #0
 800479e:	232d      	movlt	r3, #45	; 0x2d
 80047a0:	700b      	strb	r3, [r1, #0]
 80047a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80047a8:	4691      	mov	r9, r2
 80047aa:	f023 0820 	bic.w	r8, r3, #32
 80047ae:	bfbc      	itt	lt
 80047b0:	4622      	movlt	r2, r4
 80047b2:	4614      	movlt	r4, r2
 80047b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047b8:	d005      	beq.n	80047c6 <__cvt+0x42>
 80047ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80047be:	d100      	bne.n	80047c2 <__cvt+0x3e>
 80047c0:	3601      	adds	r6, #1
 80047c2:	2102      	movs	r1, #2
 80047c4:	e000      	b.n	80047c8 <__cvt+0x44>
 80047c6:	2103      	movs	r1, #3
 80047c8:	ab03      	add	r3, sp, #12
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	ab02      	add	r3, sp, #8
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	ec45 4b10 	vmov	d0, r4, r5
 80047d4:	4653      	mov	r3, sl
 80047d6:	4632      	mov	r2, r6
 80047d8:	f000 fdf2 	bl	80053c0 <_dtoa_r>
 80047dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047e0:	4607      	mov	r7, r0
 80047e2:	d102      	bne.n	80047ea <__cvt+0x66>
 80047e4:	f019 0f01 	tst.w	r9, #1
 80047e8:	d022      	beq.n	8004830 <__cvt+0xac>
 80047ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047ee:	eb07 0906 	add.w	r9, r7, r6
 80047f2:	d110      	bne.n	8004816 <__cvt+0x92>
 80047f4:	783b      	ldrb	r3, [r7, #0]
 80047f6:	2b30      	cmp	r3, #48	; 0x30
 80047f8:	d10a      	bne.n	8004810 <__cvt+0x8c>
 80047fa:	2200      	movs	r2, #0
 80047fc:	2300      	movs	r3, #0
 80047fe:	4620      	mov	r0, r4
 8004800:	4629      	mov	r1, r5
 8004802:	f7fc f969 	bl	8000ad8 <__aeabi_dcmpeq>
 8004806:	b918      	cbnz	r0, 8004810 <__cvt+0x8c>
 8004808:	f1c6 0601 	rsb	r6, r6, #1
 800480c:	f8ca 6000 	str.w	r6, [sl]
 8004810:	f8da 3000 	ldr.w	r3, [sl]
 8004814:	4499      	add	r9, r3
 8004816:	2200      	movs	r2, #0
 8004818:	2300      	movs	r3, #0
 800481a:	4620      	mov	r0, r4
 800481c:	4629      	mov	r1, r5
 800481e:	f7fc f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004822:	b108      	cbz	r0, 8004828 <__cvt+0xa4>
 8004824:	f8cd 900c 	str.w	r9, [sp, #12]
 8004828:	2230      	movs	r2, #48	; 0x30
 800482a:	9b03      	ldr	r3, [sp, #12]
 800482c:	454b      	cmp	r3, r9
 800482e:	d307      	bcc.n	8004840 <__cvt+0xbc>
 8004830:	9b03      	ldr	r3, [sp, #12]
 8004832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004834:	1bdb      	subs	r3, r3, r7
 8004836:	4638      	mov	r0, r7
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	b004      	add	sp, #16
 800483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004840:	1c59      	adds	r1, r3, #1
 8004842:	9103      	str	r1, [sp, #12]
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	e7f0      	b.n	800482a <__cvt+0xa6>

08004848 <__exponent>:
 8004848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800484a:	4603      	mov	r3, r0
 800484c:	2900      	cmp	r1, #0
 800484e:	bfb8      	it	lt
 8004850:	4249      	neglt	r1, r1
 8004852:	f803 2b02 	strb.w	r2, [r3], #2
 8004856:	bfb4      	ite	lt
 8004858:	222d      	movlt	r2, #45	; 0x2d
 800485a:	222b      	movge	r2, #43	; 0x2b
 800485c:	2909      	cmp	r1, #9
 800485e:	7042      	strb	r2, [r0, #1]
 8004860:	dd2a      	ble.n	80048b8 <__exponent+0x70>
 8004862:	f10d 0207 	add.w	r2, sp, #7
 8004866:	4617      	mov	r7, r2
 8004868:	260a      	movs	r6, #10
 800486a:	4694      	mov	ip, r2
 800486c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004870:	fb06 1415 	mls	r4, r6, r5, r1
 8004874:	3430      	adds	r4, #48	; 0x30
 8004876:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800487a:	460c      	mov	r4, r1
 800487c:	2c63      	cmp	r4, #99	; 0x63
 800487e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004882:	4629      	mov	r1, r5
 8004884:	dcf1      	bgt.n	800486a <__exponent+0x22>
 8004886:	3130      	adds	r1, #48	; 0x30
 8004888:	f1ac 0402 	sub.w	r4, ip, #2
 800488c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004890:	1c41      	adds	r1, r0, #1
 8004892:	4622      	mov	r2, r4
 8004894:	42ba      	cmp	r2, r7
 8004896:	d30a      	bcc.n	80048ae <__exponent+0x66>
 8004898:	f10d 0209 	add.w	r2, sp, #9
 800489c:	eba2 020c 	sub.w	r2, r2, ip
 80048a0:	42bc      	cmp	r4, r7
 80048a2:	bf88      	it	hi
 80048a4:	2200      	movhi	r2, #0
 80048a6:	4413      	add	r3, r2
 80048a8:	1a18      	subs	r0, r3, r0
 80048aa:	b003      	add	sp, #12
 80048ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80048b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80048b6:	e7ed      	b.n	8004894 <__exponent+0x4c>
 80048b8:	2330      	movs	r3, #48	; 0x30
 80048ba:	3130      	adds	r1, #48	; 0x30
 80048bc:	7083      	strb	r3, [r0, #2]
 80048be:	70c1      	strb	r1, [r0, #3]
 80048c0:	1d03      	adds	r3, r0, #4
 80048c2:	e7f1      	b.n	80048a8 <__exponent+0x60>

080048c4 <_printf_float>:
 80048c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c8:	ed2d 8b02 	vpush	{d8}
 80048cc:	b08d      	sub	sp, #52	; 0x34
 80048ce:	460c      	mov	r4, r1
 80048d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80048d4:	4616      	mov	r6, r2
 80048d6:	461f      	mov	r7, r3
 80048d8:	4605      	mov	r5, r0
 80048da:	f000 fcb7 	bl	800524c <_localeconv_r>
 80048de:	f8d0 a000 	ldr.w	sl, [r0]
 80048e2:	4650      	mov	r0, sl
 80048e4:	f7fb fccc 	bl	8000280 <strlen>
 80048e8:	2300      	movs	r3, #0
 80048ea:	930a      	str	r3, [sp, #40]	; 0x28
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	9305      	str	r3, [sp, #20]
 80048f0:	f8d8 3000 	ldr.w	r3, [r8]
 80048f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80048f8:	3307      	adds	r3, #7
 80048fa:	f023 0307 	bic.w	r3, r3, #7
 80048fe:	f103 0208 	add.w	r2, r3, #8
 8004902:	f8c8 2000 	str.w	r2, [r8]
 8004906:	e9d3 8900 	ldrd	r8, r9, [r3]
 800490a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800490e:	9307      	str	r3, [sp, #28]
 8004910:	f8cd 8018 	str.w	r8, [sp, #24]
 8004914:	ee08 0a10 	vmov	s16, r0
 8004918:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800491c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004920:	4b9e      	ldr	r3, [pc, #632]	; (8004b9c <_printf_float+0x2d8>)
 8004922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004926:	f7fc f909 	bl	8000b3c <__aeabi_dcmpun>
 800492a:	bb88      	cbnz	r0, 8004990 <_printf_float+0xcc>
 800492c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004930:	4b9a      	ldr	r3, [pc, #616]	; (8004b9c <_printf_float+0x2d8>)
 8004932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004936:	f7fc f8e3 	bl	8000b00 <__aeabi_dcmple>
 800493a:	bb48      	cbnz	r0, 8004990 <_printf_float+0xcc>
 800493c:	2200      	movs	r2, #0
 800493e:	2300      	movs	r3, #0
 8004940:	4640      	mov	r0, r8
 8004942:	4649      	mov	r1, r9
 8004944:	f7fc f8d2 	bl	8000aec <__aeabi_dcmplt>
 8004948:	b110      	cbz	r0, 8004950 <_printf_float+0x8c>
 800494a:	232d      	movs	r3, #45	; 0x2d
 800494c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004950:	4a93      	ldr	r2, [pc, #588]	; (8004ba0 <_printf_float+0x2dc>)
 8004952:	4b94      	ldr	r3, [pc, #592]	; (8004ba4 <_printf_float+0x2e0>)
 8004954:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004958:	bf94      	ite	ls
 800495a:	4690      	movls	r8, r2
 800495c:	4698      	movhi	r8, r3
 800495e:	2303      	movs	r3, #3
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	9b05      	ldr	r3, [sp, #20]
 8004964:	f023 0304 	bic.w	r3, r3, #4
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	f04f 0900 	mov.w	r9, #0
 800496e:	9700      	str	r7, [sp, #0]
 8004970:	4633      	mov	r3, r6
 8004972:	aa0b      	add	r2, sp, #44	; 0x2c
 8004974:	4621      	mov	r1, r4
 8004976:	4628      	mov	r0, r5
 8004978:	f000 f9da 	bl	8004d30 <_printf_common>
 800497c:	3001      	adds	r0, #1
 800497e:	f040 8090 	bne.w	8004aa2 <_printf_float+0x1de>
 8004982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004986:	b00d      	add	sp, #52	; 0x34
 8004988:	ecbd 8b02 	vpop	{d8}
 800498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004990:	4642      	mov	r2, r8
 8004992:	464b      	mov	r3, r9
 8004994:	4640      	mov	r0, r8
 8004996:	4649      	mov	r1, r9
 8004998:	f7fc f8d0 	bl	8000b3c <__aeabi_dcmpun>
 800499c:	b140      	cbz	r0, 80049b0 <_printf_float+0xec>
 800499e:	464b      	mov	r3, r9
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bfbc      	itt	lt
 80049a4:	232d      	movlt	r3, #45	; 0x2d
 80049a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049aa:	4a7f      	ldr	r2, [pc, #508]	; (8004ba8 <_printf_float+0x2e4>)
 80049ac:	4b7f      	ldr	r3, [pc, #508]	; (8004bac <_printf_float+0x2e8>)
 80049ae:	e7d1      	b.n	8004954 <_printf_float+0x90>
 80049b0:	6863      	ldr	r3, [r4, #4]
 80049b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80049b6:	9206      	str	r2, [sp, #24]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	d13f      	bne.n	8004a3c <_printf_float+0x178>
 80049bc:	2306      	movs	r3, #6
 80049be:	6063      	str	r3, [r4, #4]
 80049c0:	9b05      	ldr	r3, [sp, #20]
 80049c2:	6861      	ldr	r1, [r4, #4]
 80049c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80049c8:	2300      	movs	r3, #0
 80049ca:	9303      	str	r3, [sp, #12]
 80049cc:	ab0a      	add	r3, sp, #40	; 0x28
 80049ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80049d2:	ab09      	add	r3, sp, #36	; 0x24
 80049d4:	ec49 8b10 	vmov	d0, r8, r9
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	6022      	str	r2, [r4, #0]
 80049dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049e0:	4628      	mov	r0, r5
 80049e2:	f7ff fecf 	bl	8004784 <__cvt>
 80049e6:	9b06      	ldr	r3, [sp, #24]
 80049e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049ea:	2b47      	cmp	r3, #71	; 0x47
 80049ec:	4680      	mov	r8, r0
 80049ee:	d108      	bne.n	8004a02 <_printf_float+0x13e>
 80049f0:	1cc8      	adds	r0, r1, #3
 80049f2:	db02      	blt.n	80049fa <_printf_float+0x136>
 80049f4:	6863      	ldr	r3, [r4, #4]
 80049f6:	4299      	cmp	r1, r3
 80049f8:	dd41      	ble.n	8004a7e <_printf_float+0x1ba>
 80049fa:	f1ab 0302 	sub.w	r3, fp, #2
 80049fe:	fa5f fb83 	uxtb.w	fp, r3
 8004a02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a06:	d820      	bhi.n	8004a4a <_printf_float+0x186>
 8004a08:	3901      	subs	r1, #1
 8004a0a:	465a      	mov	r2, fp
 8004a0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a10:	9109      	str	r1, [sp, #36]	; 0x24
 8004a12:	f7ff ff19 	bl	8004848 <__exponent>
 8004a16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a18:	1813      	adds	r3, r2, r0
 8004a1a:	2a01      	cmp	r2, #1
 8004a1c:	4681      	mov	r9, r0
 8004a1e:	6123      	str	r3, [r4, #16]
 8004a20:	dc02      	bgt.n	8004a28 <_printf_float+0x164>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	07d2      	lsls	r2, r2, #31
 8004a26:	d501      	bpl.n	8004a2c <_printf_float+0x168>
 8004a28:	3301      	adds	r3, #1
 8004a2a:	6123      	str	r3, [r4, #16]
 8004a2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d09c      	beq.n	800496e <_printf_float+0xaa>
 8004a34:	232d      	movs	r3, #45	; 0x2d
 8004a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a3a:	e798      	b.n	800496e <_printf_float+0xaa>
 8004a3c:	9a06      	ldr	r2, [sp, #24]
 8004a3e:	2a47      	cmp	r2, #71	; 0x47
 8004a40:	d1be      	bne.n	80049c0 <_printf_float+0xfc>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1bc      	bne.n	80049c0 <_printf_float+0xfc>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e7b9      	b.n	80049be <_printf_float+0xfa>
 8004a4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004a4e:	d118      	bne.n	8004a82 <_printf_float+0x1be>
 8004a50:	2900      	cmp	r1, #0
 8004a52:	6863      	ldr	r3, [r4, #4]
 8004a54:	dd0b      	ble.n	8004a6e <_printf_float+0x1aa>
 8004a56:	6121      	str	r1, [r4, #16]
 8004a58:	b913      	cbnz	r3, 8004a60 <_printf_float+0x19c>
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	07d0      	lsls	r0, r2, #31
 8004a5e:	d502      	bpl.n	8004a66 <_printf_float+0x1a2>
 8004a60:	3301      	adds	r3, #1
 8004a62:	440b      	add	r3, r1
 8004a64:	6123      	str	r3, [r4, #16]
 8004a66:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a68:	f04f 0900 	mov.w	r9, #0
 8004a6c:	e7de      	b.n	8004a2c <_printf_float+0x168>
 8004a6e:	b913      	cbnz	r3, 8004a76 <_printf_float+0x1b2>
 8004a70:	6822      	ldr	r2, [r4, #0]
 8004a72:	07d2      	lsls	r2, r2, #31
 8004a74:	d501      	bpl.n	8004a7a <_printf_float+0x1b6>
 8004a76:	3302      	adds	r3, #2
 8004a78:	e7f4      	b.n	8004a64 <_printf_float+0x1a0>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e7f2      	b.n	8004a64 <_printf_float+0x1a0>
 8004a7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a84:	4299      	cmp	r1, r3
 8004a86:	db05      	blt.n	8004a94 <_printf_float+0x1d0>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	6121      	str	r1, [r4, #16]
 8004a8c:	07d8      	lsls	r0, r3, #31
 8004a8e:	d5ea      	bpl.n	8004a66 <_printf_float+0x1a2>
 8004a90:	1c4b      	adds	r3, r1, #1
 8004a92:	e7e7      	b.n	8004a64 <_printf_float+0x1a0>
 8004a94:	2900      	cmp	r1, #0
 8004a96:	bfd4      	ite	le
 8004a98:	f1c1 0202 	rsble	r2, r1, #2
 8004a9c:	2201      	movgt	r2, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	e7e0      	b.n	8004a64 <_printf_float+0x1a0>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	055a      	lsls	r2, r3, #21
 8004aa6:	d407      	bmi.n	8004ab8 <_printf_float+0x1f4>
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	4642      	mov	r2, r8
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d12c      	bne.n	8004b10 <_printf_float+0x24c>
 8004ab6:	e764      	b.n	8004982 <_printf_float+0xbe>
 8004ab8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004abc:	f240 80e0 	bls.w	8004c80 <_printf_float+0x3bc>
 8004ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f7fc f806 	bl	8000ad8 <__aeabi_dcmpeq>
 8004acc:	2800      	cmp	r0, #0
 8004ace:	d034      	beq.n	8004b3a <_printf_float+0x276>
 8004ad0:	4a37      	ldr	r2, [pc, #220]	; (8004bb0 <_printf_float+0x2ec>)
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	47b8      	blx	r7
 8004ada:	3001      	adds	r0, #1
 8004adc:	f43f af51 	beq.w	8004982 <_printf_float+0xbe>
 8004ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	db02      	blt.n	8004aee <_printf_float+0x22a>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	07d8      	lsls	r0, r3, #31
 8004aec:	d510      	bpl.n	8004b10 <_printf_float+0x24c>
 8004aee:	ee18 3a10 	vmov	r3, s16
 8004af2:	4652      	mov	r2, sl
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b8      	blx	r7
 8004afa:	3001      	adds	r0, #1
 8004afc:	f43f af41 	beq.w	8004982 <_printf_float+0xbe>
 8004b00:	f04f 0800 	mov.w	r8, #0
 8004b04:	f104 091a 	add.w	r9, r4, #26
 8004b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	4543      	cmp	r3, r8
 8004b0e:	dc09      	bgt.n	8004b24 <_printf_float+0x260>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	079b      	lsls	r3, r3, #30
 8004b14:	f100 8107 	bmi.w	8004d26 <_printf_float+0x462>
 8004b18:	68e0      	ldr	r0, [r4, #12]
 8004b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b1c:	4298      	cmp	r0, r3
 8004b1e:	bfb8      	it	lt
 8004b20:	4618      	movlt	r0, r3
 8004b22:	e730      	b.n	8004986 <_printf_float+0xc2>
 8004b24:	2301      	movs	r3, #1
 8004b26:	464a      	mov	r2, r9
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	47b8      	blx	r7
 8004b2e:	3001      	adds	r0, #1
 8004b30:	f43f af27 	beq.w	8004982 <_printf_float+0xbe>
 8004b34:	f108 0801 	add.w	r8, r8, #1
 8004b38:	e7e6      	b.n	8004b08 <_printf_float+0x244>
 8004b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	dc39      	bgt.n	8004bb4 <_printf_float+0x2f0>
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <_printf_float+0x2ec>)
 8004b42:	2301      	movs	r3, #1
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	f43f af19 	beq.w	8004982 <_printf_float+0xbe>
 8004b50:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b54:	4313      	orrs	r3, r2
 8004b56:	d102      	bne.n	8004b5e <_printf_float+0x29a>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	07d9      	lsls	r1, r3, #31
 8004b5c:	d5d8      	bpl.n	8004b10 <_printf_float+0x24c>
 8004b5e:	ee18 3a10 	vmov	r3, s16
 8004b62:	4652      	mov	r2, sl
 8004b64:	4631      	mov	r1, r6
 8004b66:	4628      	mov	r0, r5
 8004b68:	47b8      	blx	r7
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	f43f af09 	beq.w	8004982 <_printf_float+0xbe>
 8004b70:	f04f 0900 	mov.w	r9, #0
 8004b74:	f104 0a1a 	add.w	sl, r4, #26
 8004b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7a:	425b      	negs	r3, r3
 8004b7c:	454b      	cmp	r3, r9
 8004b7e:	dc01      	bgt.n	8004b84 <_printf_float+0x2c0>
 8004b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b82:	e792      	b.n	8004aaa <_printf_float+0x1e6>
 8004b84:	2301      	movs	r3, #1
 8004b86:	4652      	mov	r2, sl
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	47b8      	blx	r7
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f43f aef7 	beq.w	8004982 <_printf_float+0xbe>
 8004b94:	f109 0901 	add.w	r9, r9, #1
 8004b98:	e7ee      	b.n	8004b78 <_printf_float+0x2b4>
 8004b9a:	bf00      	nop
 8004b9c:	7fefffff 	.word	0x7fefffff
 8004ba0:	0800751c 	.word	0x0800751c
 8004ba4:	08007520 	.word	0x08007520
 8004ba8:	08007524 	.word	0x08007524
 8004bac:	08007528 	.word	0x08007528
 8004bb0:	0800752c 	.word	0x0800752c
 8004bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	bfa8      	it	ge
 8004bbc:	461a      	movge	r2, r3
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	4691      	mov	r9, r2
 8004bc2:	dc37      	bgt.n	8004c34 <_printf_float+0x370>
 8004bc4:	f04f 0b00 	mov.w	fp, #0
 8004bc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bcc:	f104 021a 	add.w	r2, r4, #26
 8004bd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bd2:	9305      	str	r3, [sp, #20]
 8004bd4:	eba3 0309 	sub.w	r3, r3, r9
 8004bd8:	455b      	cmp	r3, fp
 8004bda:	dc33      	bgt.n	8004c44 <_printf_float+0x380>
 8004bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004be0:	429a      	cmp	r2, r3
 8004be2:	db3b      	blt.n	8004c5c <_printf_float+0x398>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	07da      	lsls	r2, r3, #31
 8004be8:	d438      	bmi.n	8004c5c <_printf_float+0x398>
 8004bea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004bee:	eba2 0903 	sub.w	r9, r2, r3
 8004bf2:	9b05      	ldr	r3, [sp, #20]
 8004bf4:	1ad2      	subs	r2, r2, r3
 8004bf6:	4591      	cmp	r9, r2
 8004bf8:	bfa8      	it	ge
 8004bfa:	4691      	movge	r9, r2
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	dc35      	bgt.n	8004c6e <_printf_float+0x3aa>
 8004c02:	f04f 0800 	mov.w	r8, #0
 8004c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c0a:	f104 0a1a 	add.w	sl, r4, #26
 8004c0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	eba3 0309 	sub.w	r3, r3, r9
 8004c18:	4543      	cmp	r3, r8
 8004c1a:	f77f af79 	ble.w	8004b10 <_printf_float+0x24c>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	4652      	mov	r2, sl
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f aeaa 	beq.w	8004982 <_printf_float+0xbe>
 8004c2e:	f108 0801 	add.w	r8, r8, #1
 8004c32:	e7ec      	b.n	8004c0e <_printf_float+0x34a>
 8004c34:	4613      	mov	r3, r2
 8004c36:	4631      	mov	r1, r6
 8004c38:	4642      	mov	r2, r8
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d1c0      	bne.n	8004bc4 <_printf_float+0x300>
 8004c42:	e69e      	b.n	8004982 <_printf_float+0xbe>
 8004c44:	2301      	movs	r3, #1
 8004c46:	4631      	mov	r1, r6
 8004c48:	4628      	mov	r0, r5
 8004c4a:	9205      	str	r2, [sp, #20]
 8004c4c:	47b8      	blx	r7
 8004c4e:	3001      	adds	r0, #1
 8004c50:	f43f ae97 	beq.w	8004982 <_printf_float+0xbe>
 8004c54:	9a05      	ldr	r2, [sp, #20]
 8004c56:	f10b 0b01 	add.w	fp, fp, #1
 8004c5a:	e7b9      	b.n	8004bd0 <_printf_float+0x30c>
 8004c5c:	ee18 3a10 	vmov	r3, s16
 8004c60:	4652      	mov	r2, sl
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d1be      	bne.n	8004bea <_printf_float+0x326>
 8004c6c:	e689      	b.n	8004982 <_printf_float+0xbe>
 8004c6e:	9a05      	ldr	r2, [sp, #20]
 8004c70:	464b      	mov	r3, r9
 8004c72:	4442      	add	r2, r8
 8004c74:	4631      	mov	r1, r6
 8004c76:	4628      	mov	r0, r5
 8004c78:	47b8      	blx	r7
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d1c1      	bne.n	8004c02 <_printf_float+0x33e>
 8004c7e:	e680      	b.n	8004982 <_printf_float+0xbe>
 8004c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c82:	2a01      	cmp	r2, #1
 8004c84:	dc01      	bgt.n	8004c8a <_printf_float+0x3c6>
 8004c86:	07db      	lsls	r3, r3, #31
 8004c88:	d53a      	bpl.n	8004d00 <_printf_float+0x43c>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b8      	blx	r7
 8004c94:	3001      	adds	r0, #1
 8004c96:	f43f ae74 	beq.w	8004982 <_printf_float+0xbe>
 8004c9a:	ee18 3a10 	vmov	r3, s16
 8004c9e:	4652      	mov	r2, sl
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f ae6b 	beq.w	8004982 <_printf_float+0xbe>
 8004cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004cb8:	f7fb ff0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cbc:	b9d8      	cbnz	r0, 8004cf6 <_printf_float+0x432>
 8004cbe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004cc2:	f108 0201 	add.w	r2, r8, #1
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4628      	mov	r0, r5
 8004cca:	47b8      	blx	r7
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d10e      	bne.n	8004cee <_printf_float+0x42a>
 8004cd0:	e657      	b.n	8004982 <_printf_float+0xbe>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4652      	mov	r2, sl
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4628      	mov	r0, r5
 8004cda:	47b8      	blx	r7
 8004cdc:	3001      	adds	r0, #1
 8004cde:	f43f ae50 	beq.w	8004982 <_printf_float+0xbe>
 8004ce2:	f108 0801 	add.w	r8, r8, #1
 8004ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	4543      	cmp	r3, r8
 8004cec:	dcf1      	bgt.n	8004cd2 <_printf_float+0x40e>
 8004cee:	464b      	mov	r3, r9
 8004cf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cf4:	e6da      	b.n	8004aac <_printf_float+0x1e8>
 8004cf6:	f04f 0800 	mov.w	r8, #0
 8004cfa:	f104 0a1a 	add.w	sl, r4, #26
 8004cfe:	e7f2      	b.n	8004ce6 <_printf_float+0x422>
 8004d00:	2301      	movs	r3, #1
 8004d02:	4642      	mov	r2, r8
 8004d04:	e7df      	b.n	8004cc6 <_printf_float+0x402>
 8004d06:	2301      	movs	r3, #1
 8004d08:	464a      	mov	r2, r9
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	f43f ae36 	beq.w	8004982 <_printf_float+0xbe>
 8004d16:	f108 0801 	add.w	r8, r8, #1
 8004d1a:	68e3      	ldr	r3, [r4, #12]
 8004d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d1e:	1a5b      	subs	r3, r3, r1
 8004d20:	4543      	cmp	r3, r8
 8004d22:	dcf0      	bgt.n	8004d06 <_printf_float+0x442>
 8004d24:	e6f8      	b.n	8004b18 <_printf_float+0x254>
 8004d26:	f04f 0800 	mov.w	r8, #0
 8004d2a:	f104 0919 	add.w	r9, r4, #25
 8004d2e:	e7f4      	b.n	8004d1a <_printf_float+0x456>

08004d30 <_printf_common>:
 8004d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d34:	4616      	mov	r6, r2
 8004d36:	4699      	mov	r9, r3
 8004d38:	688a      	ldr	r2, [r1, #8]
 8004d3a:	690b      	ldr	r3, [r1, #16]
 8004d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d40:	4293      	cmp	r3, r2
 8004d42:	bfb8      	it	lt
 8004d44:	4613      	movlt	r3, r2
 8004d46:	6033      	str	r3, [r6, #0]
 8004d48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d4c:	4607      	mov	r7, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	b10a      	cbz	r2, 8004d56 <_printf_common+0x26>
 8004d52:	3301      	adds	r3, #1
 8004d54:	6033      	str	r3, [r6, #0]
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	0699      	lsls	r1, r3, #26
 8004d5a:	bf42      	ittt	mi
 8004d5c:	6833      	ldrmi	r3, [r6, #0]
 8004d5e:	3302      	addmi	r3, #2
 8004d60:	6033      	strmi	r3, [r6, #0]
 8004d62:	6825      	ldr	r5, [r4, #0]
 8004d64:	f015 0506 	ands.w	r5, r5, #6
 8004d68:	d106      	bne.n	8004d78 <_printf_common+0x48>
 8004d6a:	f104 0a19 	add.w	sl, r4, #25
 8004d6e:	68e3      	ldr	r3, [r4, #12]
 8004d70:	6832      	ldr	r2, [r6, #0]
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	42ab      	cmp	r3, r5
 8004d76:	dc26      	bgt.n	8004dc6 <_printf_common+0x96>
 8004d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d7c:	1e13      	subs	r3, r2, #0
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	bf18      	it	ne
 8004d82:	2301      	movne	r3, #1
 8004d84:	0692      	lsls	r2, r2, #26
 8004d86:	d42b      	bmi.n	8004de0 <_printf_common+0xb0>
 8004d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	4638      	mov	r0, r7
 8004d90:	47c0      	blx	r8
 8004d92:	3001      	adds	r0, #1
 8004d94:	d01e      	beq.n	8004dd4 <_printf_common+0xa4>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	6922      	ldr	r2, [r4, #16]
 8004d9a:	f003 0306 	and.w	r3, r3, #6
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	bf02      	ittt	eq
 8004da2:	68e5      	ldreq	r5, [r4, #12]
 8004da4:	6833      	ldreq	r3, [r6, #0]
 8004da6:	1aed      	subeq	r5, r5, r3
 8004da8:	68a3      	ldr	r3, [r4, #8]
 8004daa:	bf0c      	ite	eq
 8004dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db0:	2500      	movne	r5, #0
 8004db2:	4293      	cmp	r3, r2
 8004db4:	bfc4      	itt	gt
 8004db6:	1a9b      	subgt	r3, r3, r2
 8004db8:	18ed      	addgt	r5, r5, r3
 8004dba:	2600      	movs	r6, #0
 8004dbc:	341a      	adds	r4, #26
 8004dbe:	42b5      	cmp	r5, r6
 8004dc0:	d11a      	bne.n	8004df8 <_printf_common+0xc8>
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e008      	b.n	8004dd8 <_printf_common+0xa8>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4652      	mov	r2, sl
 8004dca:	4649      	mov	r1, r9
 8004dcc:	4638      	mov	r0, r7
 8004dce:	47c0      	blx	r8
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d103      	bne.n	8004ddc <_printf_common+0xac>
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ddc:	3501      	adds	r5, #1
 8004dde:	e7c6      	b.n	8004d6e <_printf_common+0x3e>
 8004de0:	18e1      	adds	r1, r4, r3
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	2030      	movs	r0, #48	; 0x30
 8004de6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dea:	4422      	add	r2, r4
 8004dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004df0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df4:	3302      	adds	r3, #2
 8004df6:	e7c7      	b.n	8004d88 <_printf_common+0x58>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	4638      	mov	r0, r7
 8004e00:	47c0      	blx	r8
 8004e02:	3001      	adds	r0, #1
 8004e04:	d0e6      	beq.n	8004dd4 <_printf_common+0xa4>
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7d9      	b.n	8004dbe <_printf_common+0x8e>
	...

08004e0c <_printf_i>:
 8004e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	7e0f      	ldrb	r7, [r1, #24]
 8004e12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e14:	2f78      	cmp	r7, #120	; 0x78
 8004e16:	4691      	mov	r9, r2
 8004e18:	4680      	mov	r8, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	469a      	mov	sl, r3
 8004e1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e22:	d807      	bhi.n	8004e34 <_printf_i+0x28>
 8004e24:	2f62      	cmp	r7, #98	; 0x62
 8004e26:	d80a      	bhi.n	8004e3e <_printf_i+0x32>
 8004e28:	2f00      	cmp	r7, #0
 8004e2a:	f000 80d4 	beq.w	8004fd6 <_printf_i+0x1ca>
 8004e2e:	2f58      	cmp	r7, #88	; 0x58
 8004e30:	f000 80c0 	beq.w	8004fb4 <_printf_i+0x1a8>
 8004e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e3c:	e03a      	b.n	8004eb4 <_printf_i+0xa8>
 8004e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e42:	2b15      	cmp	r3, #21
 8004e44:	d8f6      	bhi.n	8004e34 <_printf_i+0x28>
 8004e46:	a101      	add	r1, pc, #4	; (adr r1, 8004e4c <_printf_i+0x40>)
 8004e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e4c:	08004ea5 	.word	0x08004ea5
 8004e50:	08004eb9 	.word	0x08004eb9
 8004e54:	08004e35 	.word	0x08004e35
 8004e58:	08004e35 	.word	0x08004e35
 8004e5c:	08004e35 	.word	0x08004e35
 8004e60:	08004e35 	.word	0x08004e35
 8004e64:	08004eb9 	.word	0x08004eb9
 8004e68:	08004e35 	.word	0x08004e35
 8004e6c:	08004e35 	.word	0x08004e35
 8004e70:	08004e35 	.word	0x08004e35
 8004e74:	08004e35 	.word	0x08004e35
 8004e78:	08004fbd 	.word	0x08004fbd
 8004e7c:	08004ee5 	.word	0x08004ee5
 8004e80:	08004f77 	.word	0x08004f77
 8004e84:	08004e35 	.word	0x08004e35
 8004e88:	08004e35 	.word	0x08004e35
 8004e8c:	08004fdf 	.word	0x08004fdf
 8004e90:	08004e35 	.word	0x08004e35
 8004e94:	08004ee5 	.word	0x08004ee5
 8004e98:	08004e35 	.word	0x08004e35
 8004e9c:	08004e35 	.word	0x08004e35
 8004ea0:	08004f7f 	.word	0x08004f7f
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	1d1a      	adds	r2, r3, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	602a      	str	r2, [r5, #0]
 8004eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e09f      	b.n	8004ff8 <_printf_i+0x1ec>
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	682b      	ldr	r3, [r5, #0]
 8004ebc:	0607      	lsls	r7, r0, #24
 8004ebe:	f103 0104 	add.w	r1, r3, #4
 8004ec2:	6029      	str	r1, [r5, #0]
 8004ec4:	d501      	bpl.n	8004eca <_printf_i+0xbe>
 8004ec6:	681e      	ldr	r6, [r3, #0]
 8004ec8:	e003      	b.n	8004ed2 <_printf_i+0xc6>
 8004eca:	0646      	lsls	r6, r0, #25
 8004ecc:	d5fb      	bpl.n	8004ec6 <_printf_i+0xba>
 8004ece:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ed2:	2e00      	cmp	r6, #0
 8004ed4:	da03      	bge.n	8004ede <_printf_i+0xd2>
 8004ed6:	232d      	movs	r3, #45	; 0x2d
 8004ed8:	4276      	negs	r6, r6
 8004eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ede:	485a      	ldr	r0, [pc, #360]	; (8005048 <_printf_i+0x23c>)
 8004ee0:	230a      	movs	r3, #10
 8004ee2:	e012      	b.n	8004f0a <_printf_i+0xfe>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	6820      	ldr	r0, [r4, #0]
 8004ee8:	1d19      	adds	r1, r3, #4
 8004eea:	6029      	str	r1, [r5, #0]
 8004eec:	0605      	lsls	r5, r0, #24
 8004eee:	d501      	bpl.n	8004ef4 <_printf_i+0xe8>
 8004ef0:	681e      	ldr	r6, [r3, #0]
 8004ef2:	e002      	b.n	8004efa <_printf_i+0xee>
 8004ef4:	0641      	lsls	r1, r0, #25
 8004ef6:	d5fb      	bpl.n	8004ef0 <_printf_i+0xe4>
 8004ef8:	881e      	ldrh	r6, [r3, #0]
 8004efa:	4853      	ldr	r0, [pc, #332]	; (8005048 <_printf_i+0x23c>)
 8004efc:	2f6f      	cmp	r7, #111	; 0x6f
 8004efe:	bf0c      	ite	eq
 8004f00:	2308      	moveq	r3, #8
 8004f02:	230a      	movne	r3, #10
 8004f04:	2100      	movs	r1, #0
 8004f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f0a:	6865      	ldr	r5, [r4, #4]
 8004f0c:	60a5      	str	r5, [r4, #8]
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	bfa2      	ittt	ge
 8004f12:	6821      	ldrge	r1, [r4, #0]
 8004f14:	f021 0104 	bicge.w	r1, r1, #4
 8004f18:	6021      	strge	r1, [r4, #0]
 8004f1a:	b90e      	cbnz	r6, 8004f20 <_printf_i+0x114>
 8004f1c:	2d00      	cmp	r5, #0
 8004f1e:	d04b      	beq.n	8004fb8 <_printf_i+0x1ac>
 8004f20:	4615      	mov	r5, r2
 8004f22:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f26:	fb03 6711 	mls	r7, r3, r1, r6
 8004f2a:	5dc7      	ldrb	r7, [r0, r7]
 8004f2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f30:	4637      	mov	r7, r6
 8004f32:	42bb      	cmp	r3, r7
 8004f34:	460e      	mov	r6, r1
 8004f36:	d9f4      	bls.n	8004f22 <_printf_i+0x116>
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d10b      	bne.n	8004f54 <_printf_i+0x148>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	07de      	lsls	r6, r3, #31
 8004f40:	d508      	bpl.n	8004f54 <_printf_i+0x148>
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	6861      	ldr	r1, [r4, #4]
 8004f46:	4299      	cmp	r1, r3
 8004f48:	bfde      	ittt	le
 8004f4a:	2330      	movle	r3, #48	; 0x30
 8004f4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f54:	1b52      	subs	r2, r2, r5
 8004f56:	6122      	str	r2, [r4, #16]
 8004f58:	f8cd a000 	str.w	sl, [sp]
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	aa03      	add	r2, sp, #12
 8004f60:	4621      	mov	r1, r4
 8004f62:	4640      	mov	r0, r8
 8004f64:	f7ff fee4 	bl	8004d30 <_printf_common>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d14a      	bne.n	8005002 <_printf_i+0x1f6>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f70:	b004      	add	sp, #16
 8004f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f043 0320 	orr.w	r3, r3, #32
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	4833      	ldr	r0, [pc, #204]	; (800504c <_printf_i+0x240>)
 8004f80:	2778      	movs	r7, #120	; 0x78
 8004f82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	6829      	ldr	r1, [r5, #0]
 8004f8a:	061f      	lsls	r7, r3, #24
 8004f8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f90:	d402      	bmi.n	8004f98 <_printf_i+0x18c>
 8004f92:	065f      	lsls	r7, r3, #25
 8004f94:	bf48      	it	mi
 8004f96:	b2b6      	uxthmi	r6, r6
 8004f98:	07df      	lsls	r7, r3, #31
 8004f9a:	bf48      	it	mi
 8004f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004fa0:	6029      	str	r1, [r5, #0]
 8004fa2:	bf48      	it	mi
 8004fa4:	6023      	strmi	r3, [r4, #0]
 8004fa6:	b91e      	cbnz	r6, 8004fb0 <_printf_i+0x1a4>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	f023 0320 	bic.w	r3, r3, #32
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	e7a7      	b.n	8004f04 <_printf_i+0xf8>
 8004fb4:	4824      	ldr	r0, [pc, #144]	; (8005048 <_printf_i+0x23c>)
 8004fb6:	e7e4      	b.n	8004f82 <_printf_i+0x176>
 8004fb8:	4615      	mov	r5, r2
 8004fba:	e7bd      	b.n	8004f38 <_printf_i+0x12c>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	6826      	ldr	r6, [r4, #0]
 8004fc0:	6961      	ldr	r1, [r4, #20]
 8004fc2:	1d18      	adds	r0, r3, #4
 8004fc4:	6028      	str	r0, [r5, #0]
 8004fc6:	0635      	lsls	r5, r6, #24
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	d501      	bpl.n	8004fd0 <_printf_i+0x1c4>
 8004fcc:	6019      	str	r1, [r3, #0]
 8004fce:	e002      	b.n	8004fd6 <_printf_i+0x1ca>
 8004fd0:	0670      	lsls	r0, r6, #25
 8004fd2:	d5fb      	bpl.n	8004fcc <_printf_i+0x1c0>
 8004fd4:	8019      	strh	r1, [r3, #0]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6123      	str	r3, [r4, #16]
 8004fda:	4615      	mov	r5, r2
 8004fdc:	e7bc      	b.n	8004f58 <_printf_i+0x14c>
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	1d1a      	adds	r2, r3, #4
 8004fe2:	602a      	str	r2, [r5, #0]
 8004fe4:	681d      	ldr	r5, [r3, #0]
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4628      	mov	r0, r5
 8004fec:	f7fb f8f8 	bl	80001e0 <memchr>
 8004ff0:	b108      	cbz	r0, 8004ff6 <_printf_i+0x1ea>
 8004ff2:	1b40      	subs	r0, r0, r5
 8004ff4:	6060      	str	r0, [r4, #4]
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005000:	e7aa      	b.n	8004f58 <_printf_i+0x14c>
 8005002:	6923      	ldr	r3, [r4, #16]
 8005004:	462a      	mov	r2, r5
 8005006:	4649      	mov	r1, r9
 8005008:	4640      	mov	r0, r8
 800500a:	47d0      	blx	sl
 800500c:	3001      	adds	r0, #1
 800500e:	d0ad      	beq.n	8004f6c <_printf_i+0x160>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	079b      	lsls	r3, r3, #30
 8005014:	d413      	bmi.n	800503e <_printf_i+0x232>
 8005016:	68e0      	ldr	r0, [r4, #12]
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	4298      	cmp	r0, r3
 800501c:	bfb8      	it	lt
 800501e:	4618      	movlt	r0, r3
 8005020:	e7a6      	b.n	8004f70 <_printf_i+0x164>
 8005022:	2301      	movs	r3, #1
 8005024:	4632      	mov	r2, r6
 8005026:	4649      	mov	r1, r9
 8005028:	4640      	mov	r0, r8
 800502a:	47d0      	blx	sl
 800502c:	3001      	adds	r0, #1
 800502e:	d09d      	beq.n	8004f6c <_printf_i+0x160>
 8005030:	3501      	adds	r5, #1
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	9903      	ldr	r1, [sp, #12]
 8005036:	1a5b      	subs	r3, r3, r1
 8005038:	42ab      	cmp	r3, r5
 800503a:	dcf2      	bgt.n	8005022 <_printf_i+0x216>
 800503c:	e7eb      	b.n	8005016 <_printf_i+0x20a>
 800503e:	2500      	movs	r5, #0
 8005040:	f104 0619 	add.w	r6, r4, #25
 8005044:	e7f5      	b.n	8005032 <_printf_i+0x226>
 8005046:	bf00      	nop
 8005048:	0800752e 	.word	0x0800752e
 800504c:	0800753f 	.word	0x0800753f

08005050 <sniprintf>:
 8005050:	b40c      	push	{r2, r3}
 8005052:	b530      	push	{r4, r5, lr}
 8005054:	4b17      	ldr	r3, [pc, #92]	; (80050b4 <sniprintf+0x64>)
 8005056:	1e0c      	subs	r4, r1, #0
 8005058:	681d      	ldr	r5, [r3, #0]
 800505a:	b09d      	sub	sp, #116	; 0x74
 800505c:	da08      	bge.n	8005070 <sniprintf+0x20>
 800505e:	238b      	movs	r3, #139	; 0x8b
 8005060:	602b      	str	r3, [r5, #0]
 8005062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005066:	b01d      	add	sp, #116	; 0x74
 8005068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800506c:	b002      	add	sp, #8
 800506e:	4770      	bx	lr
 8005070:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005074:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005078:	bf14      	ite	ne
 800507a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800507e:	4623      	moveq	r3, r4
 8005080:	9304      	str	r3, [sp, #16]
 8005082:	9307      	str	r3, [sp, #28]
 8005084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005088:	9002      	str	r0, [sp, #8]
 800508a:	9006      	str	r0, [sp, #24]
 800508c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005090:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005092:	ab21      	add	r3, sp, #132	; 0x84
 8005094:	a902      	add	r1, sp, #8
 8005096:	4628      	mov	r0, r5
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	f000 ffdd 	bl	8006058 <_svfiprintf_r>
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	bfbc      	itt	lt
 80050a2:	238b      	movlt	r3, #139	; 0x8b
 80050a4:	602b      	strlt	r3, [r5, #0]
 80050a6:	2c00      	cmp	r4, #0
 80050a8:	d0dd      	beq.n	8005066 <sniprintf+0x16>
 80050aa:	9b02      	ldr	r3, [sp, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	e7d9      	b.n	8005066 <sniprintf+0x16>
 80050b2:	bf00      	nop
 80050b4:	20000064 	.word	0x20000064

080050b8 <std>:
 80050b8:	2300      	movs	r3, #0
 80050ba:	b510      	push	{r4, lr}
 80050bc:	4604      	mov	r4, r0
 80050be:	e9c0 3300 	strd	r3, r3, [r0]
 80050c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050c6:	6083      	str	r3, [r0, #8]
 80050c8:	8181      	strh	r1, [r0, #12]
 80050ca:	6643      	str	r3, [r0, #100]	; 0x64
 80050cc:	81c2      	strh	r2, [r0, #14]
 80050ce:	6183      	str	r3, [r0, #24]
 80050d0:	4619      	mov	r1, r3
 80050d2:	2208      	movs	r2, #8
 80050d4:	305c      	adds	r0, #92	; 0x5c
 80050d6:	f000 f8b1 	bl	800523c <memset>
 80050da:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <std+0x58>)
 80050dc:	6263      	str	r3, [r4, #36]	; 0x24
 80050de:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <std+0x5c>)
 80050e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80050e2:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <std+0x60>)
 80050e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <std+0x64>)
 80050e8:	6323      	str	r3, [r4, #48]	; 0x30
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <std+0x68>)
 80050ec:	6224      	str	r4, [r4, #32]
 80050ee:	429c      	cmp	r4, r3
 80050f0:	d006      	beq.n	8005100 <std+0x48>
 80050f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050f6:	4294      	cmp	r4, r2
 80050f8:	d002      	beq.n	8005100 <std+0x48>
 80050fa:	33d0      	adds	r3, #208	; 0xd0
 80050fc:	429c      	cmp	r4, r3
 80050fe:	d105      	bne.n	800510c <std+0x54>
 8005100:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005108:	f000 b8ce 	b.w	80052a8 <__retarget_lock_init_recursive>
 800510c:	bd10      	pop	{r4, pc}
 800510e:	bf00      	nop
 8005110:	08006c11 	.word	0x08006c11
 8005114:	08006c33 	.word	0x08006c33
 8005118:	08006c6b 	.word	0x08006c6b
 800511c:	08006c8f 	.word	0x08006c8f
 8005120:	20000334 	.word	0x20000334

08005124 <stdio_exit_handler>:
 8005124:	4a02      	ldr	r2, [pc, #8]	; (8005130 <stdio_exit_handler+0xc>)
 8005126:	4903      	ldr	r1, [pc, #12]	; (8005134 <stdio_exit_handler+0x10>)
 8005128:	4803      	ldr	r0, [pc, #12]	; (8005138 <stdio_exit_handler+0x14>)
 800512a:	f000 b869 	b.w	8005200 <_fwalk_sglue>
 800512e:	bf00      	nop
 8005130:	2000000c 	.word	0x2000000c
 8005134:	080064b1 	.word	0x080064b1
 8005138:	20000018 	.word	0x20000018

0800513c <cleanup_stdio>:
 800513c:	6841      	ldr	r1, [r0, #4]
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <cleanup_stdio+0x34>)
 8005140:	4299      	cmp	r1, r3
 8005142:	b510      	push	{r4, lr}
 8005144:	4604      	mov	r4, r0
 8005146:	d001      	beq.n	800514c <cleanup_stdio+0x10>
 8005148:	f001 f9b2 	bl	80064b0 <_fflush_r>
 800514c:	68a1      	ldr	r1, [r4, #8]
 800514e:	4b09      	ldr	r3, [pc, #36]	; (8005174 <cleanup_stdio+0x38>)
 8005150:	4299      	cmp	r1, r3
 8005152:	d002      	beq.n	800515a <cleanup_stdio+0x1e>
 8005154:	4620      	mov	r0, r4
 8005156:	f001 f9ab 	bl	80064b0 <_fflush_r>
 800515a:	68e1      	ldr	r1, [r4, #12]
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <cleanup_stdio+0x3c>)
 800515e:	4299      	cmp	r1, r3
 8005160:	d004      	beq.n	800516c <cleanup_stdio+0x30>
 8005162:	4620      	mov	r0, r4
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005168:	f001 b9a2 	b.w	80064b0 <_fflush_r>
 800516c:	bd10      	pop	{r4, pc}
 800516e:	bf00      	nop
 8005170:	20000334 	.word	0x20000334
 8005174:	2000039c 	.word	0x2000039c
 8005178:	20000404 	.word	0x20000404

0800517c <global_stdio_init.part.0>:
 800517c:	b510      	push	{r4, lr}
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <global_stdio_init.part.0+0x30>)
 8005180:	4c0b      	ldr	r4, [pc, #44]	; (80051b0 <global_stdio_init.part.0+0x34>)
 8005182:	4a0c      	ldr	r2, [pc, #48]	; (80051b4 <global_stdio_init.part.0+0x38>)
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	4620      	mov	r0, r4
 8005188:	2200      	movs	r2, #0
 800518a:	2104      	movs	r1, #4
 800518c:	f7ff ff94 	bl	80050b8 <std>
 8005190:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005194:	2201      	movs	r2, #1
 8005196:	2109      	movs	r1, #9
 8005198:	f7ff ff8e 	bl	80050b8 <std>
 800519c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80051a0:	2202      	movs	r2, #2
 80051a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a6:	2112      	movs	r1, #18
 80051a8:	f7ff bf86 	b.w	80050b8 <std>
 80051ac:	2000046c 	.word	0x2000046c
 80051b0:	20000334 	.word	0x20000334
 80051b4:	08005125 	.word	0x08005125

080051b8 <__sfp_lock_acquire>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__sfp_lock_acquire+0x8>)
 80051ba:	f000 b876 	b.w	80052aa <__retarget_lock_acquire_recursive>
 80051be:	bf00      	nop
 80051c0:	20000471 	.word	0x20000471

080051c4 <__sfp_lock_release>:
 80051c4:	4801      	ldr	r0, [pc, #4]	; (80051cc <__sfp_lock_release+0x8>)
 80051c6:	f000 b871 	b.w	80052ac <__retarget_lock_release_recursive>
 80051ca:	bf00      	nop
 80051cc:	20000471 	.word	0x20000471

080051d0 <__sinit>:
 80051d0:	b510      	push	{r4, lr}
 80051d2:	4604      	mov	r4, r0
 80051d4:	f7ff fff0 	bl	80051b8 <__sfp_lock_acquire>
 80051d8:	6a23      	ldr	r3, [r4, #32]
 80051da:	b11b      	cbz	r3, 80051e4 <__sinit+0x14>
 80051dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e0:	f7ff bff0 	b.w	80051c4 <__sfp_lock_release>
 80051e4:	4b04      	ldr	r3, [pc, #16]	; (80051f8 <__sinit+0x28>)
 80051e6:	6223      	str	r3, [r4, #32]
 80051e8:	4b04      	ldr	r3, [pc, #16]	; (80051fc <__sinit+0x2c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f5      	bne.n	80051dc <__sinit+0xc>
 80051f0:	f7ff ffc4 	bl	800517c <global_stdio_init.part.0>
 80051f4:	e7f2      	b.n	80051dc <__sinit+0xc>
 80051f6:	bf00      	nop
 80051f8:	0800513d 	.word	0x0800513d
 80051fc:	2000046c 	.word	0x2000046c

08005200 <_fwalk_sglue>:
 8005200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005204:	4607      	mov	r7, r0
 8005206:	4688      	mov	r8, r1
 8005208:	4614      	mov	r4, r2
 800520a:	2600      	movs	r6, #0
 800520c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005210:	f1b9 0901 	subs.w	r9, r9, #1
 8005214:	d505      	bpl.n	8005222 <_fwalk_sglue+0x22>
 8005216:	6824      	ldr	r4, [r4, #0]
 8005218:	2c00      	cmp	r4, #0
 800521a:	d1f7      	bne.n	800520c <_fwalk_sglue+0xc>
 800521c:	4630      	mov	r0, r6
 800521e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005222:	89ab      	ldrh	r3, [r5, #12]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d907      	bls.n	8005238 <_fwalk_sglue+0x38>
 8005228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800522c:	3301      	adds	r3, #1
 800522e:	d003      	beq.n	8005238 <_fwalk_sglue+0x38>
 8005230:	4629      	mov	r1, r5
 8005232:	4638      	mov	r0, r7
 8005234:	47c0      	blx	r8
 8005236:	4306      	orrs	r6, r0
 8005238:	3568      	adds	r5, #104	; 0x68
 800523a:	e7e9      	b.n	8005210 <_fwalk_sglue+0x10>

0800523c <memset>:
 800523c:	4402      	add	r2, r0
 800523e:	4603      	mov	r3, r0
 8005240:	4293      	cmp	r3, r2
 8005242:	d100      	bne.n	8005246 <memset+0xa>
 8005244:	4770      	bx	lr
 8005246:	f803 1b01 	strb.w	r1, [r3], #1
 800524a:	e7f9      	b.n	8005240 <memset+0x4>

0800524c <_localeconv_r>:
 800524c:	4800      	ldr	r0, [pc, #0]	; (8005250 <_localeconv_r+0x4>)
 800524e:	4770      	bx	lr
 8005250:	20000158 	.word	0x20000158

08005254 <__errno>:
 8005254:	4b01      	ldr	r3, [pc, #4]	; (800525c <__errno+0x8>)
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	20000064 	.word	0x20000064

08005260 <__libc_init_array>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	4d0d      	ldr	r5, [pc, #52]	; (8005298 <__libc_init_array+0x38>)
 8005264:	4c0d      	ldr	r4, [pc, #52]	; (800529c <__libc_init_array+0x3c>)
 8005266:	1b64      	subs	r4, r4, r5
 8005268:	10a4      	asrs	r4, r4, #2
 800526a:	2600      	movs	r6, #0
 800526c:	42a6      	cmp	r6, r4
 800526e:	d109      	bne.n	8005284 <__libc_init_array+0x24>
 8005270:	4d0b      	ldr	r5, [pc, #44]	; (80052a0 <__libc_init_array+0x40>)
 8005272:	4c0c      	ldr	r4, [pc, #48]	; (80052a4 <__libc_init_array+0x44>)
 8005274:	f002 f91e 	bl	80074b4 <_init>
 8005278:	1b64      	subs	r4, r4, r5
 800527a:	10a4      	asrs	r4, r4, #2
 800527c:	2600      	movs	r6, #0
 800527e:	42a6      	cmp	r6, r4
 8005280:	d105      	bne.n	800528e <__libc_init_array+0x2e>
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	f855 3b04 	ldr.w	r3, [r5], #4
 8005288:	4798      	blx	r3
 800528a:	3601      	adds	r6, #1
 800528c:	e7ee      	b.n	800526c <__libc_init_array+0xc>
 800528e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005292:	4798      	blx	r3
 8005294:	3601      	adds	r6, #1
 8005296:	e7f2      	b.n	800527e <__libc_init_array+0x1e>
 8005298:	08007894 	.word	0x08007894
 800529c:	08007894 	.word	0x08007894
 80052a0:	08007894 	.word	0x08007894
 80052a4:	08007898 	.word	0x08007898

080052a8 <__retarget_lock_init_recursive>:
 80052a8:	4770      	bx	lr

080052aa <__retarget_lock_acquire_recursive>:
 80052aa:	4770      	bx	lr

080052ac <__retarget_lock_release_recursive>:
 80052ac:	4770      	bx	lr

080052ae <quorem>:
 80052ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b2:	6903      	ldr	r3, [r0, #16]
 80052b4:	690c      	ldr	r4, [r1, #16]
 80052b6:	42a3      	cmp	r3, r4
 80052b8:	4607      	mov	r7, r0
 80052ba:	db7e      	blt.n	80053ba <quorem+0x10c>
 80052bc:	3c01      	subs	r4, #1
 80052be:	f101 0814 	add.w	r8, r1, #20
 80052c2:	f100 0514 	add.w	r5, r0, #20
 80052c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052d4:	3301      	adds	r3, #1
 80052d6:	429a      	cmp	r2, r3
 80052d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80052e4:	d331      	bcc.n	800534a <quorem+0x9c>
 80052e6:	f04f 0e00 	mov.w	lr, #0
 80052ea:	4640      	mov	r0, r8
 80052ec:	46ac      	mov	ip, r5
 80052ee:	46f2      	mov	sl, lr
 80052f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80052f4:	b293      	uxth	r3, r2
 80052f6:	fb06 e303 	mla	r3, r6, r3, lr
 80052fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052fe:	0c1a      	lsrs	r2, r3, #16
 8005300:	b29b      	uxth	r3, r3
 8005302:	ebaa 0303 	sub.w	r3, sl, r3
 8005306:	f8dc a000 	ldr.w	sl, [ip]
 800530a:	fa13 f38a 	uxtah	r3, r3, sl
 800530e:	fb06 220e 	mla	r2, r6, lr, r2
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	9b00      	ldr	r3, [sp, #0]
 8005316:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800531a:	b292      	uxth	r2, r2
 800531c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005324:	f8bd 3000 	ldrh.w	r3, [sp]
 8005328:	4581      	cmp	r9, r0
 800532a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800532e:	f84c 3b04 	str.w	r3, [ip], #4
 8005332:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005336:	d2db      	bcs.n	80052f0 <quorem+0x42>
 8005338:	f855 300b 	ldr.w	r3, [r5, fp]
 800533c:	b92b      	cbnz	r3, 800534a <quorem+0x9c>
 800533e:	9b01      	ldr	r3, [sp, #4]
 8005340:	3b04      	subs	r3, #4
 8005342:	429d      	cmp	r5, r3
 8005344:	461a      	mov	r2, r3
 8005346:	d32c      	bcc.n	80053a2 <quorem+0xf4>
 8005348:	613c      	str	r4, [r7, #16]
 800534a:	4638      	mov	r0, r7
 800534c:	f001 fb60 	bl	8006a10 <__mcmp>
 8005350:	2800      	cmp	r0, #0
 8005352:	db22      	blt.n	800539a <quorem+0xec>
 8005354:	3601      	adds	r6, #1
 8005356:	4629      	mov	r1, r5
 8005358:	2000      	movs	r0, #0
 800535a:	f858 2b04 	ldr.w	r2, [r8], #4
 800535e:	f8d1 c000 	ldr.w	ip, [r1]
 8005362:	b293      	uxth	r3, r2
 8005364:	1ac3      	subs	r3, r0, r3
 8005366:	0c12      	lsrs	r2, r2, #16
 8005368:	fa13 f38c 	uxtah	r3, r3, ip
 800536c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005370:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005374:	b29b      	uxth	r3, r3
 8005376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800537a:	45c1      	cmp	r9, r8
 800537c:	f841 3b04 	str.w	r3, [r1], #4
 8005380:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005384:	d2e9      	bcs.n	800535a <quorem+0xac>
 8005386:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800538a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800538e:	b922      	cbnz	r2, 800539a <quorem+0xec>
 8005390:	3b04      	subs	r3, #4
 8005392:	429d      	cmp	r5, r3
 8005394:	461a      	mov	r2, r3
 8005396:	d30a      	bcc.n	80053ae <quorem+0x100>
 8005398:	613c      	str	r4, [r7, #16]
 800539a:	4630      	mov	r0, r6
 800539c:	b003      	add	sp, #12
 800539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	3b04      	subs	r3, #4
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	d1ce      	bne.n	8005348 <quorem+0x9a>
 80053aa:	3c01      	subs	r4, #1
 80053ac:	e7c9      	b.n	8005342 <quorem+0x94>
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	3b04      	subs	r3, #4
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d1f0      	bne.n	8005398 <quorem+0xea>
 80053b6:	3c01      	subs	r4, #1
 80053b8:	e7eb      	b.n	8005392 <quorem+0xe4>
 80053ba:	2000      	movs	r0, #0
 80053bc:	e7ee      	b.n	800539c <quorem+0xee>
	...

080053c0 <_dtoa_r>:
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	ed2d 8b04 	vpush	{d8-d9}
 80053c8:	69c5      	ldr	r5, [r0, #28]
 80053ca:	b093      	sub	sp, #76	; 0x4c
 80053cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80053d0:	ec57 6b10 	vmov	r6, r7, d0
 80053d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053d8:	9107      	str	r1, [sp, #28]
 80053da:	4604      	mov	r4, r0
 80053dc:	920a      	str	r2, [sp, #40]	; 0x28
 80053de:	930d      	str	r3, [sp, #52]	; 0x34
 80053e0:	b975      	cbnz	r5, 8005400 <_dtoa_r+0x40>
 80053e2:	2010      	movs	r0, #16
 80053e4:	f000 ff36 	bl	8006254 <malloc>
 80053e8:	4602      	mov	r2, r0
 80053ea:	61e0      	str	r0, [r4, #28]
 80053ec:	b920      	cbnz	r0, 80053f8 <_dtoa_r+0x38>
 80053ee:	4bae      	ldr	r3, [pc, #696]	; (80056a8 <_dtoa_r+0x2e8>)
 80053f0:	21ef      	movs	r1, #239	; 0xef
 80053f2:	48ae      	ldr	r0, [pc, #696]	; (80056ac <_dtoa_r+0x2ec>)
 80053f4:	f001 fcfc 	bl	8006df0 <__assert_func>
 80053f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053fc:	6005      	str	r5, [r0, #0]
 80053fe:	60c5      	str	r5, [r0, #12]
 8005400:	69e3      	ldr	r3, [r4, #28]
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	b151      	cbz	r1, 800541c <_dtoa_r+0x5c>
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	604a      	str	r2, [r1, #4]
 800540a:	2301      	movs	r3, #1
 800540c:	4093      	lsls	r3, r2
 800540e:	608b      	str	r3, [r1, #8]
 8005410:	4620      	mov	r0, r4
 8005412:	f001 f8c1 	bl	8006598 <_Bfree>
 8005416:	69e3      	ldr	r3, [r4, #28]
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	1e3b      	subs	r3, r7, #0
 800541e:	bfbb      	ittet	lt
 8005420:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005424:	9303      	strlt	r3, [sp, #12]
 8005426:	2300      	movge	r3, #0
 8005428:	2201      	movlt	r2, #1
 800542a:	bfac      	ite	ge
 800542c:	f8c8 3000 	strge.w	r3, [r8]
 8005430:	f8c8 2000 	strlt.w	r2, [r8]
 8005434:	4b9e      	ldr	r3, [pc, #632]	; (80056b0 <_dtoa_r+0x2f0>)
 8005436:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800543a:	ea33 0308 	bics.w	r3, r3, r8
 800543e:	d11b      	bne.n	8005478 <_dtoa_r+0xb8>
 8005440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005442:	f242 730f 	movw	r3, #9999	; 0x270f
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800544c:	4333      	orrs	r3, r6
 800544e:	f000 8593 	beq.w	8005f78 <_dtoa_r+0xbb8>
 8005452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005454:	b963      	cbnz	r3, 8005470 <_dtoa_r+0xb0>
 8005456:	4b97      	ldr	r3, [pc, #604]	; (80056b4 <_dtoa_r+0x2f4>)
 8005458:	e027      	b.n	80054aa <_dtoa_r+0xea>
 800545a:	4b97      	ldr	r3, [pc, #604]	; (80056b8 <_dtoa_r+0x2f8>)
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	3308      	adds	r3, #8
 8005460:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	9800      	ldr	r0, [sp, #0]
 8005466:	b013      	add	sp, #76	; 0x4c
 8005468:	ecbd 8b04 	vpop	{d8-d9}
 800546c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005470:	4b90      	ldr	r3, [pc, #576]	; (80056b4 <_dtoa_r+0x2f4>)
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	3303      	adds	r3, #3
 8005476:	e7f3      	b.n	8005460 <_dtoa_r+0xa0>
 8005478:	ed9d 7b02 	vldr	d7, [sp, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	ec51 0b17 	vmov	r0, r1, d7
 8005482:	eeb0 8a47 	vmov.f32	s16, s14
 8005486:	eef0 8a67 	vmov.f32	s17, s15
 800548a:	2300      	movs	r3, #0
 800548c:	f7fb fb24 	bl	8000ad8 <__aeabi_dcmpeq>
 8005490:	4681      	mov	r9, r0
 8005492:	b160      	cbz	r0, 80054ae <_dtoa_r+0xee>
 8005494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005496:	2301      	movs	r3, #1
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8568 	beq.w	8005f72 <_dtoa_r+0xbb2>
 80054a2:	4b86      	ldr	r3, [pc, #536]	; (80056bc <_dtoa_r+0x2fc>)
 80054a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	e7da      	b.n	8005464 <_dtoa_r+0xa4>
 80054ae:	aa10      	add	r2, sp, #64	; 0x40
 80054b0:	a911      	add	r1, sp, #68	; 0x44
 80054b2:	4620      	mov	r0, r4
 80054b4:	eeb0 0a48 	vmov.f32	s0, s16
 80054b8:	eef0 0a68 	vmov.f32	s1, s17
 80054bc:	f001 fb4e 	bl	8006b5c <__d2b>
 80054c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054c4:	4682      	mov	sl, r0
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	d07f      	beq.n	80055ca <_dtoa_r+0x20a>
 80054ca:	ee18 3a90 	vmov	r3, s17
 80054ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80054d6:	ec51 0b18 	vmov	r0, r1, d8
 80054da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80054de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80054e6:	4619      	mov	r1, r3
 80054e8:	2200      	movs	r2, #0
 80054ea:	4b75      	ldr	r3, [pc, #468]	; (80056c0 <_dtoa_r+0x300>)
 80054ec:	f7fa fed4 	bl	8000298 <__aeabi_dsub>
 80054f0:	a367      	add	r3, pc, #412	; (adr r3, 8005690 <_dtoa_r+0x2d0>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fb f887 	bl	8000608 <__aeabi_dmul>
 80054fa:	a367      	add	r3, pc, #412	; (adr r3, 8005698 <_dtoa_r+0x2d8>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fa fecc 	bl	800029c <__adddf3>
 8005504:	4606      	mov	r6, r0
 8005506:	4628      	mov	r0, r5
 8005508:	460f      	mov	r7, r1
 800550a:	f7fb f813 	bl	8000534 <__aeabi_i2d>
 800550e:	a364      	add	r3, pc, #400	; (adr r3, 80056a0 <_dtoa_r+0x2e0>)
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f7fb f878 	bl	8000608 <__aeabi_dmul>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4630      	mov	r0, r6
 800551e:	4639      	mov	r1, r7
 8005520:	f7fa febc 	bl	800029c <__adddf3>
 8005524:	4606      	mov	r6, r0
 8005526:	460f      	mov	r7, r1
 8005528:	f7fb fb1e 	bl	8000b68 <__aeabi_d2iz>
 800552c:	2200      	movs	r2, #0
 800552e:	4683      	mov	fp, r0
 8005530:	2300      	movs	r3, #0
 8005532:	4630      	mov	r0, r6
 8005534:	4639      	mov	r1, r7
 8005536:	f7fb fad9 	bl	8000aec <__aeabi_dcmplt>
 800553a:	b148      	cbz	r0, 8005550 <_dtoa_r+0x190>
 800553c:	4658      	mov	r0, fp
 800553e:	f7fa fff9 	bl	8000534 <__aeabi_i2d>
 8005542:	4632      	mov	r2, r6
 8005544:	463b      	mov	r3, r7
 8005546:	f7fb fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 800554a:	b908      	cbnz	r0, 8005550 <_dtoa_r+0x190>
 800554c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005550:	f1bb 0f16 	cmp.w	fp, #22
 8005554:	d857      	bhi.n	8005606 <_dtoa_r+0x246>
 8005556:	4b5b      	ldr	r3, [pc, #364]	; (80056c4 <_dtoa_r+0x304>)
 8005558:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	ec51 0b18 	vmov	r0, r1, d8
 8005564:	f7fb fac2 	bl	8000aec <__aeabi_dcmplt>
 8005568:	2800      	cmp	r0, #0
 800556a:	d04e      	beq.n	800560a <_dtoa_r+0x24a>
 800556c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005570:	2300      	movs	r3, #0
 8005572:	930c      	str	r3, [sp, #48]	; 0x30
 8005574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005576:	1b5b      	subs	r3, r3, r5
 8005578:	1e5a      	subs	r2, r3, #1
 800557a:	bf45      	ittet	mi
 800557c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005580:	9305      	strmi	r3, [sp, #20]
 8005582:	2300      	movpl	r3, #0
 8005584:	2300      	movmi	r3, #0
 8005586:	9206      	str	r2, [sp, #24]
 8005588:	bf54      	ite	pl
 800558a:	9305      	strpl	r3, [sp, #20]
 800558c:	9306      	strmi	r3, [sp, #24]
 800558e:	f1bb 0f00 	cmp.w	fp, #0
 8005592:	db3c      	blt.n	800560e <_dtoa_r+0x24e>
 8005594:	9b06      	ldr	r3, [sp, #24]
 8005596:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800559a:	445b      	add	r3, fp
 800559c:	9306      	str	r3, [sp, #24]
 800559e:	2300      	movs	r3, #0
 80055a0:	9308      	str	r3, [sp, #32]
 80055a2:	9b07      	ldr	r3, [sp, #28]
 80055a4:	2b09      	cmp	r3, #9
 80055a6:	d868      	bhi.n	800567a <_dtoa_r+0x2ba>
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	bfc4      	itt	gt
 80055ac:	3b04      	subgt	r3, #4
 80055ae:	9307      	strgt	r3, [sp, #28]
 80055b0:	9b07      	ldr	r3, [sp, #28]
 80055b2:	f1a3 0302 	sub.w	r3, r3, #2
 80055b6:	bfcc      	ite	gt
 80055b8:	2500      	movgt	r5, #0
 80055ba:	2501      	movle	r5, #1
 80055bc:	2b03      	cmp	r3, #3
 80055be:	f200 8085 	bhi.w	80056cc <_dtoa_r+0x30c>
 80055c2:	e8df f003 	tbb	[pc, r3]
 80055c6:	3b2e      	.short	0x3b2e
 80055c8:	5839      	.short	0x5839
 80055ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80055ce:	441d      	add	r5, r3
 80055d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	bfc1      	itttt	gt
 80055d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80055e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80055e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80055e8:	bfd6      	itet	le
 80055ea:	f1c3 0320 	rsble	r3, r3, #32
 80055ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80055f2:	fa06 f003 	lslle.w	r0, r6, r3
 80055f6:	f7fa ff8d 	bl	8000514 <__aeabi_ui2d>
 80055fa:	2201      	movs	r2, #1
 80055fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005600:	3d01      	subs	r5, #1
 8005602:	920e      	str	r2, [sp, #56]	; 0x38
 8005604:	e76f      	b.n	80054e6 <_dtoa_r+0x126>
 8005606:	2301      	movs	r3, #1
 8005608:	e7b3      	b.n	8005572 <_dtoa_r+0x1b2>
 800560a:	900c      	str	r0, [sp, #48]	; 0x30
 800560c:	e7b2      	b.n	8005574 <_dtoa_r+0x1b4>
 800560e:	9b05      	ldr	r3, [sp, #20]
 8005610:	eba3 030b 	sub.w	r3, r3, fp
 8005614:	9305      	str	r3, [sp, #20]
 8005616:	f1cb 0300 	rsb	r3, fp, #0
 800561a:	9308      	str	r3, [sp, #32]
 800561c:	2300      	movs	r3, #0
 800561e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005620:	e7bf      	b.n	80055a2 <_dtoa_r+0x1e2>
 8005622:	2300      	movs	r3, #0
 8005624:	9309      	str	r3, [sp, #36]	; 0x24
 8005626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	dc52      	bgt.n	80056d2 <_dtoa_r+0x312>
 800562c:	2301      	movs	r3, #1
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	9304      	str	r3, [sp, #16]
 8005632:	461a      	mov	r2, r3
 8005634:	920a      	str	r2, [sp, #40]	; 0x28
 8005636:	e00b      	b.n	8005650 <_dtoa_r+0x290>
 8005638:	2301      	movs	r3, #1
 800563a:	e7f3      	b.n	8005624 <_dtoa_r+0x264>
 800563c:	2300      	movs	r3, #0
 800563e:	9309      	str	r3, [sp, #36]	; 0x24
 8005640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005642:	445b      	add	r3, fp
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	3301      	adds	r3, #1
 8005648:	2b01      	cmp	r3, #1
 800564a:	9304      	str	r3, [sp, #16]
 800564c:	bfb8      	it	lt
 800564e:	2301      	movlt	r3, #1
 8005650:	69e0      	ldr	r0, [r4, #28]
 8005652:	2100      	movs	r1, #0
 8005654:	2204      	movs	r2, #4
 8005656:	f102 0614 	add.w	r6, r2, #20
 800565a:	429e      	cmp	r6, r3
 800565c:	d93d      	bls.n	80056da <_dtoa_r+0x31a>
 800565e:	6041      	str	r1, [r0, #4]
 8005660:	4620      	mov	r0, r4
 8005662:	f000 ff59 	bl	8006518 <_Balloc>
 8005666:	9000      	str	r0, [sp, #0]
 8005668:	2800      	cmp	r0, #0
 800566a:	d139      	bne.n	80056e0 <_dtoa_r+0x320>
 800566c:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <_dtoa_r+0x308>)
 800566e:	4602      	mov	r2, r0
 8005670:	f240 11af 	movw	r1, #431	; 0x1af
 8005674:	e6bd      	b.n	80053f2 <_dtoa_r+0x32>
 8005676:	2301      	movs	r3, #1
 8005678:	e7e1      	b.n	800563e <_dtoa_r+0x27e>
 800567a:	2501      	movs	r5, #1
 800567c:	2300      	movs	r3, #0
 800567e:	9307      	str	r3, [sp, #28]
 8005680:	9509      	str	r5, [sp, #36]	; 0x24
 8005682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	9304      	str	r3, [sp, #16]
 800568a:	2200      	movs	r2, #0
 800568c:	2312      	movs	r3, #18
 800568e:	e7d1      	b.n	8005634 <_dtoa_r+0x274>
 8005690:	636f4361 	.word	0x636f4361
 8005694:	3fd287a7 	.word	0x3fd287a7
 8005698:	8b60c8b3 	.word	0x8b60c8b3
 800569c:	3fc68a28 	.word	0x3fc68a28
 80056a0:	509f79fb 	.word	0x509f79fb
 80056a4:	3fd34413 	.word	0x3fd34413
 80056a8:	0800755d 	.word	0x0800755d
 80056ac:	08007574 	.word	0x08007574
 80056b0:	7ff00000 	.word	0x7ff00000
 80056b4:	08007559 	.word	0x08007559
 80056b8:	08007550 	.word	0x08007550
 80056bc:	0800752d 	.word	0x0800752d
 80056c0:	3ff80000 	.word	0x3ff80000
 80056c4:	08007670 	.word	0x08007670
 80056c8:	080075cc 	.word	0x080075cc
 80056cc:	2301      	movs	r3, #1
 80056ce:	9309      	str	r3, [sp, #36]	; 0x24
 80056d0:	e7d7      	b.n	8005682 <_dtoa_r+0x2c2>
 80056d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	9304      	str	r3, [sp, #16]
 80056d8:	e7ba      	b.n	8005650 <_dtoa_r+0x290>
 80056da:	3101      	adds	r1, #1
 80056dc:	0052      	lsls	r2, r2, #1
 80056de:	e7ba      	b.n	8005656 <_dtoa_r+0x296>
 80056e0:	69e3      	ldr	r3, [r4, #28]
 80056e2:	9a00      	ldr	r2, [sp, #0]
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	9b04      	ldr	r3, [sp, #16]
 80056e8:	2b0e      	cmp	r3, #14
 80056ea:	f200 80a8 	bhi.w	800583e <_dtoa_r+0x47e>
 80056ee:	2d00      	cmp	r5, #0
 80056f0:	f000 80a5 	beq.w	800583e <_dtoa_r+0x47e>
 80056f4:	f1bb 0f00 	cmp.w	fp, #0
 80056f8:	dd38      	ble.n	800576c <_dtoa_r+0x3ac>
 80056fa:	4bc0      	ldr	r3, [pc, #768]	; (80059fc <_dtoa_r+0x63c>)
 80056fc:	f00b 020f 	and.w	r2, fp, #15
 8005700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005704:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005708:	e9d3 6700 	ldrd	r6, r7, [r3]
 800570c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005710:	d019      	beq.n	8005746 <_dtoa_r+0x386>
 8005712:	4bbb      	ldr	r3, [pc, #748]	; (8005a00 <_dtoa_r+0x640>)
 8005714:	ec51 0b18 	vmov	r0, r1, d8
 8005718:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800571c:	f7fb f89e 	bl	800085c <__aeabi_ddiv>
 8005720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005724:	f008 080f 	and.w	r8, r8, #15
 8005728:	2503      	movs	r5, #3
 800572a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005a00 <_dtoa_r+0x640>
 800572e:	f1b8 0f00 	cmp.w	r8, #0
 8005732:	d10a      	bne.n	800574a <_dtoa_r+0x38a>
 8005734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005738:	4632      	mov	r2, r6
 800573a:	463b      	mov	r3, r7
 800573c:	f7fb f88e 	bl	800085c <__aeabi_ddiv>
 8005740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005744:	e02b      	b.n	800579e <_dtoa_r+0x3de>
 8005746:	2502      	movs	r5, #2
 8005748:	e7ef      	b.n	800572a <_dtoa_r+0x36a>
 800574a:	f018 0f01 	tst.w	r8, #1
 800574e:	d008      	beq.n	8005762 <_dtoa_r+0x3a2>
 8005750:	4630      	mov	r0, r6
 8005752:	4639      	mov	r1, r7
 8005754:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005758:	f7fa ff56 	bl	8000608 <__aeabi_dmul>
 800575c:	3501      	adds	r5, #1
 800575e:	4606      	mov	r6, r0
 8005760:	460f      	mov	r7, r1
 8005762:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005766:	f109 0908 	add.w	r9, r9, #8
 800576a:	e7e0      	b.n	800572e <_dtoa_r+0x36e>
 800576c:	f000 809f 	beq.w	80058ae <_dtoa_r+0x4ee>
 8005770:	f1cb 0600 	rsb	r6, fp, #0
 8005774:	4ba1      	ldr	r3, [pc, #644]	; (80059fc <_dtoa_r+0x63c>)
 8005776:	4fa2      	ldr	r7, [pc, #648]	; (8005a00 <_dtoa_r+0x640>)
 8005778:	f006 020f 	and.w	r2, r6, #15
 800577c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	ec51 0b18 	vmov	r0, r1, d8
 8005788:	f7fa ff3e 	bl	8000608 <__aeabi_dmul>
 800578c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005790:	1136      	asrs	r6, r6, #4
 8005792:	2300      	movs	r3, #0
 8005794:	2502      	movs	r5, #2
 8005796:	2e00      	cmp	r6, #0
 8005798:	d17e      	bne.n	8005898 <_dtoa_r+0x4d8>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1d0      	bne.n	8005740 <_dtoa_r+0x380>
 800579e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8084 	beq.w	80058b2 <_dtoa_r+0x4f2>
 80057aa:	4b96      	ldr	r3, [pc, #600]	; (8005a04 <_dtoa_r+0x644>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	4640      	mov	r0, r8
 80057b0:	4649      	mov	r1, r9
 80057b2:	f7fb f99b 	bl	8000aec <__aeabi_dcmplt>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d07b      	beq.n	80058b2 <_dtoa_r+0x4f2>
 80057ba:	9b04      	ldr	r3, [sp, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d078      	beq.n	80058b2 <_dtoa_r+0x4f2>
 80057c0:	9b01      	ldr	r3, [sp, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	dd39      	ble.n	800583a <_dtoa_r+0x47a>
 80057c6:	4b90      	ldr	r3, [pc, #576]	; (8005a08 <_dtoa_r+0x648>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	4640      	mov	r0, r8
 80057cc:	4649      	mov	r1, r9
 80057ce:	f7fa ff1b 	bl	8000608 <__aeabi_dmul>
 80057d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057d6:	9e01      	ldr	r6, [sp, #4]
 80057d8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80057dc:	3501      	adds	r5, #1
 80057de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80057e2:	4628      	mov	r0, r5
 80057e4:	f7fa fea6 	bl	8000534 <__aeabi_i2d>
 80057e8:	4642      	mov	r2, r8
 80057ea:	464b      	mov	r3, r9
 80057ec:	f7fa ff0c 	bl	8000608 <__aeabi_dmul>
 80057f0:	4b86      	ldr	r3, [pc, #536]	; (8005a0c <_dtoa_r+0x64c>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	f7fa fd52 	bl	800029c <__adddf3>
 80057f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80057fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005800:	9303      	str	r3, [sp, #12]
 8005802:	2e00      	cmp	r6, #0
 8005804:	d158      	bne.n	80058b8 <_dtoa_r+0x4f8>
 8005806:	4b82      	ldr	r3, [pc, #520]	; (8005a10 <_dtoa_r+0x650>)
 8005808:	2200      	movs	r2, #0
 800580a:	4640      	mov	r0, r8
 800580c:	4649      	mov	r1, r9
 800580e:	f7fa fd43 	bl	8000298 <__aeabi_dsub>
 8005812:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005816:	4680      	mov	r8, r0
 8005818:	4689      	mov	r9, r1
 800581a:	f7fb f985 	bl	8000b28 <__aeabi_dcmpgt>
 800581e:	2800      	cmp	r0, #0
 8005820:	f040 8296 	bne.w	8005d50 <_dtoa_r+0x990>
 8005824:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005828:	4640      	mov	r0, r8
 800582a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800582e:	4649      	mov	r1, r9
 8005830:	f7fb f95c 	bl	8000aec <__aeabi_dcmplt>
 8005834:	2800      	cmp	r0, #0
 8005836:	f040 8289 	bne.w	8005d4c <_dtoa_r+0x98c>
 800583a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800583e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005840:	2b00      	cmp	r3, #0
 8005842:	f2c0 814e 	blt.w	8005ae2 <_dtoa_r+0x722>
 8005846:	f1bb 0f0e 	cmp.w	fp, #14
 800584a:	f300 814a 	bgt.w	8005ae2 <_dtoa_r+0x722>
 800584e:	4b6b      	ldr	r3, [pc, #428]	; (80059fc <_dtoa_r+0x63c>)
 8005850:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005854:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	f280 80dc 	bge.w	8005a18 <_dtoa_r+0x658>
 8005860:	9b04      	ldr	r3, [sp, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f300 80d8 	bgt.w	8005a18 <_dtoa_r+0x658>
 8005868:	f040 826f 	bne.w	8005d4a <_dtoa_r+0x98a>
 800586c:	4b68      	ldr	r3, [pc, #416]	; (8005a10 <_dtoa_r+0x650>)
 800586e:	2200      	movs	r2, #0
 8005870:	4640      	mov	r0, r8
 8005872:	4649      	mov	r1, r9
 8005874:	f7fa fec8 	bl	8000608 <__aeabi_dmul>
 8005878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800587c:	f7fb f94a 	bl	8000b14 <__aeabi_dcmpge>
 8005880:	9e04      	ldr	r6, [sp, #16]
 8005882:	4637      	mov	r7, r6
 8005884:	2800      	cmp	r0, #0
 8005886:	f040 8245 	bne.w	8005d14 <_dtoa_r+0x954>
 800588a:	9d00      	ldr	r5, [sp, #0]
 800588c:	2331      	movs	r3, #49	; 0x31
 800588e:	f805 3b01 	strb.w	r3, [r5], #1
 8005892:	f10b 0b01 	add.w	fp, fp, #1
 8005896:	e241      	b.n	8005d1c <_dtoa_r+0x95c>
 8005898:	07f2      	lsls	r2, r6, #31
 800589a:	d505      	bpl.n	80058a8 <_dtoa_r+0x4e8>
 800589c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a0:	f7fa feb2 	bl	8000608 <__aeabi_dmul>
 80058a4:	3501      	adds	r5, #1
 80058a6:	2301      	movs	r3, #1
 80058a8:	1076      	asrs	r6, r6, #1
 80058aa:	3708      	adds	r7, #8
 80058ac:	e773      	b.n	8005796 <_dtoa_r+0x3d6>
 80058ae:	2502      	movs	r5, #2
 80058b0:	e775      	b.n	800579e <_dtoa_r+0x3de>
 80058b2:	9e04      	ldr	r6, [sp, #16]
 80058b4:	465f      	mov	r7, fp
 80058b6:	e792      	b.n	80057de <_dtoa_r+0x41e>
 80058b8:	9900      	ldr	r1, [sp, #0]
 80058ba:	4b50      	ldr	r3, [pc, #320]	; (80059fc <_dtoa_r+0x63c>)
 80058bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058c0:	4431      	add	r1, r6
 80058c2:	9102      	str	r1, [sp, #8]
 80058c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058c6:	eeb0 9a47 	vmov.f32	s18, s14
 80058ca:	eef0 9a67 	vmov.f32	s19, s15
 80058ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058d6:	2900      	cmp	r1, #0
 80058d8:	d044      	beq.n	8005964 <_dtoa_r+0x5a4>
 80058da:	494e      	ldr	r1, [pc, #312]	; (8005a14 <_dtoa_r+0x654>)
 80058dc:	2000      	movs	r0, #0
 80058de:	f7fa ffbd 	bl	800085c <__aeabi_ddiv>
 80058e2:	ec53 2b19 	vmov	r2, r3, d9
 80058e6:	f7fa fcd7 	bl	8000298 <__aeabi_dsub>
 80058ea:	9d00      	ldr	r5, [sp, #0]
 80058ec:	ec41 0b19 	vmov	d9, r0, r1
 80058f0:	4649      	mov	r1, r9
 80058f2:	4640      	mov	r0, r8
 80058f4:	f7fb f938 	bl	8000b68 <__aeabi_d2iz>
 80058f8:	4606      	mov	r6, r0
 80058fa:	f7fa fe1b 	bl	8000534 <__aeabi_i2d>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fa fcc7 	bl	8000298 <__aeabi_dsub>
 800590a:	3630      	adds	r6, #48	; 0x30
 800590c:	f805 6b01 	strb.w	r6, [r5], #1
 8005910:	ec53 2b19 	vmov	r2, r3, d9
 8005914:	4680      	mov	r8, r0
 8005916:	4689      	mov	r9, r1
 8005918:	f7fb f8e8 	bl	8000aec <__aeabi_dcmplt>
 800591c:	2800      	cmp	r0, #0
 800591e:	d164      	bne.n	80059ea <_dtoa_r+0x62a>
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	4937      	ldr	r1, [pc, #220]	; (8005a04 <_dtoa_r+0x644>)
 8005926:	2000      	movs	r0, #0
 8005928:	f7fa fcb6 	bl	8000298 <__aeabi_dsub>
 800592c:	ec53 2b19 	vmov	r2, r3, d9
 8005930:	f7fb f8dc 	bl	8000aec <__aeabi_dcmplt>
 8005934:	2800      	cmp	r0, #0
 8005936:	f040 80b6 	bne.w	8005aa6 <_dtoa_r+0x6e6>
 800593a:	9b02      	ldr	r3, [sp, #8]
 800593c:	429d      	cmp	r5, r3
 800593e:	f43f af7c 	beq.w	800583a <_dtoa_r+0x47a>
 8005942:	4b31      	ldr	r3, [pc, #196]	; (8005a08 <_dtoa_r+0x648>)
 8005944:	ec51 0b19 	vmov	r0, r1, d9
 8005948:	2200      	movs	r2, #0
 800594a:	f7fa fe5d 	bl	8000608 <__aeabi_dmul>
 800594e:	4b2e      	ldr	r3, [pc, #184]	; (8005a08 <_dtoa_r+0x648>)
 8005950:	ec41 0b19 	vmov	d9, r0, r1
 8005954:	2200      	movs	r2, #0
 8005956:	4640      	mov	r0, r8
 8005958:	4649      	mov	r1, r9
 800595a:	f7fa fe55 	bl	8000608 <__aeabi_dmul>
 800595e:	4680      	mov	r8, r0
 8005960:	4689      	mov	r9, r1
 8005962:	e7c5      	b.n	80058f0 <_dtoa_r+0x530>
 8005964:	ec51 0b17 	vmov	r0, r1, d7
 8005968:	f7fa fe4e 	bl	8000608 <__aeabi_dmul>
 800596c:	9b02      	ldr	r3, [sp, #8]
 800596e:	9d00      	ldr	r5, [sp, #0]
 8005970:	930f      	str	r3, [sp, #60]	; 0x3c
 8005972:	ec41 0b19 	vmov	d9, r0, r1
 8005976:	4649      	mov	r1, r9
 8005978:	4640      	mov	r0, r8
 800597a:	f7fb f8f5 	bl	8000b68 <__aeabi_d2iz>
 800597e:	4606      	mov	r6, r0
 8005980:	f7fa fdd8 	bl	8000534 <__aeabi_i2d>
 8005984:	3630      	adds	r6, #48	; 0x30
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4640      	mov	r0, r8
 800598c:	4649      	mov	r1, r9
 800598e:	f7fa fc83 	bl	8000298 <__aeabi_dsub>
 8005992:	f805 6b01 	strb.w	r6, [r5], #1
 8005996:	9b02      	ldr	r3, [sp, #8]
 8005998:	429d      	cmp	r5, r3
 800599a:	4680      	mov	r8, r0
 800599c:	4689      	mov	r9, r1
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	d124      	bne.n	80059ee <_dtoa_r+0x62e>
 80059a4:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <_dtoa_r+0x654>)
 80059a6:	ec51 0b19 	vmov	r0, r1, d9
 80059aa:	f7fa fc77 	bl	800029c <__adddf3>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4640      	mov	r0, r8
 80059b4:	4649      	mov	r1, r9
 80059b6:	f7fb f8b7 	bl	8000b28 <__aeabi_dcmpgt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d173      	bne.n	8005aa6 <_dtoa_r+0x6e6>
 80059be:	ec53 2b19 	vmov	r2, r3, d9
 80059c2:	4914      	ldr	r1, [pc, #80]	; (8005a14 <_dtoa_r+0x654>)
 80059c4:	2000      	movs	r0, #0
 80059c6:	f7fa fc67 	bl	8000298 <__aeabi_dsub>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4640      	mov	r0, r8
 80059d0:	4649      	mov	r1, r9
 80059d2:	f7fb f88b 	bl	8000aec <__aeabi_dcmplt>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	f43f af2f 	beq.w	800583a <_dtoa_r+0x47a>
 80059dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80059de:	1e6b      	subs	r3, r5, #1
 80059e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80059e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059e6:	2b30      	cmp	r3, #48	; 0x30
 80059e8:	d0f8      	beq.n	80059dc <_dtoa_r+0x61c>
 80059ea:	46bb      	mov	fp, r7
 80059ec:	e04a      	b.n	8005a84 <_dtoa_r+0x6c4>
 80059ee:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <_dtoa_r+0x648>)
 80059f0:	f7fa fe0a 	bl	8000608 <__aeabi_dmul>
 80059f4:	4680      	mov	r8, r0
 80059f6:	4689      	mov	r9, r1
 80059f8:	e7bd      	b.n	8005976 <_dtoa_r+0x5b6>
 80059fa:	bf00      	nop
 80059fc:	08007670 	.word	0x08007670
 8005a00:	08007648 	.word	0x08007648
 8005a04:	3ff00000 	.word	0x3ff00000
 8005a08:	40240000 	.word	0x40240000
 8005a0c:	401c0000 	.word	0x401c0000
 8005a10:	40140000 	.word	0x40140000
 8005a14:	3fe00000 	.word	0x3fe00000
 8005a18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a1c:	9d00      	ldr	r5, [sp, #0]
 8005a1e:	4642      	mov	r2, r8
 8005a20:	464b      	mov	r3, r9
 8005a22:	4630      	mov	r0, r6
 8005a24:	4639      	mov	r1, r7
 8005a26:	f7fa ff19 	bl	800085c <__aeabi_ddiv>
 8005a2a:	f7fb f89d 	bl	8000b68 <__aeabi_d2iz>
 8005a2e:	9001      	str	r0, [sp, #4]
 8005a30:	f7fa fd80 	bl	8000534 <__aeabi_i2d>
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	f7fa fde6 	bl	8000608 <__aeabi_dmul>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4630      	mov	r0, r6
 8005a42:	4639      	mov	r1, r7
 8005a44:	f7fa fc28 	bl	8000298 <__aeabi_dsub>
 8005a48:	9e01      	ldr	r6, [sp, #4]
 8005a4a:	9f04      	ldr	r7, [sp, #16]
 8005a4c:	3630      	adds	r6, #48	; 0x30
 8005a4e:	f805 6b01 	strb.w	r6, [r5], #1
 8005a52:	9e00      	ldr	r6, [sp, #0]
 8005a54:	1bae      	subs	r6, r5, r6
 8005a56:	42b7      	cmp	r7, r6
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	d134      	bne.n	8005ac8 <_dtoa_r+0x708>
 8005a5e:	f7fa fc1d 	bl	800029c <__adddf3>
 8005a62:	4642      	mov	r2, r8
 8005a64:	464b      	mov	r3, r9
 8005a66:	4606      	mov	r6, r0
 8005a68:	460f      	mov	r7, r1
 8005a6a:	f7fb f85d 	bl	8000b28 <__aeabi_dcmpgt>
 8005a6e:	b9c8      	cbnz	r0, 8005aa4 <_dtoa_r+0x6e4>
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fb f82e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a7c:	b110      	cbz	r0, 8005a84 <_dtoa_r+0x6c4>
 8005a7e:	9b01      	ldr	r3, [sp, #4]
 8005a80:	07db      	lsls	r3, r3, #31
 8005a82:	d40f      	bmi.n	8005aa4 <_dtoa_r+0x6e4>
 8005a84:	4651      	mov	r1, sl
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 fd86 	bl	8006598 <_Bfree>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a90:	702b      	strb	r3, [r5, #0]
 8005a92:	f10b 0301 	add.w	r3, fp, #1
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f43f ace2 	beq.w	8005464 <_dtoa_r+0xa4>
 8005aa0:	601d      	str	r5, [r3, #0]
 8005aa2:	e4df      	b.n	8005464 <_dtoa_r+0xa4>
 8005aa4:	465f      	mov	r7, fp
 8005aa6:	462b      	mov	r3, r5
 8005aa8:	461d      	mov	r5, r3
 8005aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aae:	2a39      	cmp	r2, #57	; 0x39
 8005ab0:	d106      	bne.n	8005ac0 <_dtoa_r+0x700>
 8005ab2:	9a00      	ldr	r2, [sp, #0]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d1f7      	bne.n	8005aa8 <_dtoa_r+0x6e8>
 8005ab8:	9900      	ldr	r1, [sp, #0]
 8005aba:	2230      	movs	r2, #48	; 0x30
 8005abc:	3701      	adds	r7, #1
 8005abe:	700a      	strb	r2, [r1, #0]
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	3201      	adds	r2, #1
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	e790      	b.n	80059ea <_dtoa_r+0x62a>
 8005ac8:	4ba3      	ldr	r3, [pc, #652]	; (8005d58 <_dtoa_r+0x998>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	f7fa fd9c 	bl	8000608 <__aeabi_dmul>
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	460f      	mov	r7, r1
 8005ad8:	f7fa fffe 	bl	8000ad8 <__aeabi_dcmpeq>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d09e      	beq.n	8005a1e <_dtoa_r+0x65e>
 8005ae0:	e7d0      	b.n	8005a84 <_dtoa_r+0x6c4>
 8005ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	f000 80ca 	beq.w	8005c7e <_dtoa_r+0x8be>
 8005aea:	9a07      	ldr	r2, [sp, #28]
 8005aec:	2a01      	cmp	r2, #1
 8005aee:	f300 80ad 	bgt.w	8005c4c <_dtoa_r+0x88c>
 8005af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	f000 80a5 	beq.w	8005c44 <_dtoa_r+0x884>
 8005afa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005afe:	9e08      	ldr	r6, [sp, #32]
 8005b00:	9d05      	ldr	r5, [sp, #20]
 8005b02:	9a05      	ldr	r2, [sp, #20]
 8005b04:	441a      	add	r2, r3
 8005b06:	9205      	str	r2, [sp, #20]
 8005b08:	9a06      	ldr	r2, [sp, #24]
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	441a      	add	r2, r3
 8005b0e:	4620      	mov	r0, r4
 8005b10:	9206      	str	r2, [sp, #24]
 8005b12:	f000 fdf7 	bl	8006704 <__i2b>
 8005b16:	4607      	mov	r7, r0
 8005b18:	b165      	cbz	r5, 8005b34 <_dtoa_r+0x774>
 8005b1a:	9b06      	ldr	r3, [sp, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dd09      	ble.n	8005b34 <_dtoa_r+0x774>
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	9a05      	ldr	r2, [sp, #20]
 8005b24:	bfa8      	it	ge
 8005b26:	462b      	movge	r3, r5
 8005b28:	1ad2      	subs	r2, r2, r3
 8005b2a:	9205      	str	r2, [sp, #20]
 8005b2c:	9a06      	ldr	r2, [sp, #24]
 8005b2e:	1aed      	subs	r5, r5, r3
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	9306      	str	r3, [sp, #24]
 8005b34:	9b08      	ldr	r3, [sp, #32]
 8005b36:	b1f3      	cbz	r3, 8005b76 <_dtoa_r+0x7b6>
 8005b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 80a3 	beq.w	8005c86 <_dtoa_r+0x8c6>
 8005b40:	2e00      	cmp	r6, #0
 8005b42:	dd10      	ble.n	8005b66 <_dtoa_r+0x7a6>
 8005b44:	4639      	mov	r1, r7
 8005b46:	4632      	mov	r2, r6
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fe9b 	bl	8006884 <__pow5mult>
 8005b4e:	4652      	mov	r2, sl
 8005b50:	4601      	mov	r1, r0
 8005b52:	4607      	mov	r7, r0
 8005b54:	4620      	mov	r0, r4
 8005b56:	f000 fdeb 	bl	8006730 <__multiply>
 8005b5a:	4651      	mov	r1, sl
 8005b5c:	4680      	mov	r8, r0
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 fd1a 	bl	8006598 <_Bfree>
 8005b64:	46c2      	mov	sl, r8
 8005b66:	9b08      	ldr	r3, [sp, #32]
 8005b68:	1b9a      	subs	r2, r3, r6
 8005b6a:	d004      	beq.n	8005b76 <_dtoa_r+0x7b6>
 8005b6c:	4651      	mov	r1, sl
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 fe88 	bl	8006884 <__pow5mult>
 8005b74:	4682      	mov	sl, r0
 8005b76:	2101      	movs	r1, #1
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 fdc3 	bl	8006704 <__i2b>
 8005b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	4606      	mov	r6, r0
 8005b84:	f340 8081 	ble.w	8005c8a <_dtoa_r+0x8ca>
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 fe79 	bl	8006884 <__pow5mult>
 8005b92:	9b07      	ldr	r3, [sp, #28]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	4606      	mov	r6, r0
 8005b98:	dd7a      	ble.n	8005c90 <_dtoa_r+0x8d0>
 8005b9a:	f04f 0800 	mov.w	r8, #0
 8005b9e:	6933      	ldr	r3, [r6, #16]
 8005ba0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ba4:	6918      	ldr	r0, [r3, #16]
 8005ba6:	f000 fd5f 	bl	8006668 <__hi0bits>
 8005baa:	f1c0 0020 	rsb	r0, r0, #32
 8005bae:	9b06      	ldr	r3, [sp, #24]
 8005bb0:	4418      	add	r0, r3
 8005bb2:	f010 001f 	ands.w	r0, r0, #31
 8005bb6:	f000 8094 	beq.w	8005ce2 <_dtoa_r+0x922>
 8005bba:	f1c0 0320 	rsb	r3, r0, #32
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	f340 8085 	ble.w	8005cce <_dtoa_r+0x90e>
 8005bc4:	9b05      	ldr	r3, [sp, #20]
 8005bc6:	f1c0 001c 	rsb	r0, r0, #28
 8005bca:	4403      	add	r3, r0
 8005bcc:	9305      	str	r3, [sp, #20]
 8005bce:	9b06      	ldr	r3, [sp, #24]
 8005bd0:	4403      	add	r3, r0
 8005bd2:	4405      	add	r5, r0
 8005bd4:	9306      	str	r3, [sp, #24]
 8005bd6:	9b05      	ldr	r3, [sp, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dd05      	ble.n	8005be8 <_dtoa_r+0x828>
 8005bdc:	4651      	mov	r1, sl
 8005bde:	461a      	mov	r2, r3
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 fea9 	bl	8006938 <__lshift>
 8005be6:	4682      	mov	sl, r0
 8005be8:	9b06      	ldr	r3, [sp, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	dd05      	ble.n	8005bfa <_dtoa_r+0x83a>
 8005bee:	4631      	mov	r1, r6
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 fea0 	bl	8006938 <__lshift>
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d072      	beq.n	8005ce6 <_dtoa_r+0x926>
 8005c00:	4631      	mov	r1, r6
 8005c02:	4650      	mov	r0, sl
 8005c04:	f000 ff04 	bl	8006a10 <__mcmp>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	da6c      	bge.n	8005ce6 <_dtoa_r+0x926>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	4651      	mov	r1, sl
 8005c10:	220a      	movs	r2, #10
 8005c12:	4620      	mov	r0, r4
 8005c14:	f000 fce2 	bl	80065dc <__multadd>
 8005c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005c1e:	4682      	mov	sl, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 81b0 	beq.w	8005f86 <_dtoa_r+0xbc6>
 8005c26:	2300      	movs	r3, #0
 8005c28:	4639      	mov	r1, r7
 8005c2a:	220a      	movs	r2, #10
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f000 fcd5 	bl	80065dc <__multadd>
 8005c32:	9b01      	ldr	r3, [sp, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	4607      	mov	r7, r0
 8005c38:	f300 8096 	bgt.w	8005d68 <_dtoa_r+0x9a8>
 8005c3c:	9b07      	ldr	r3, [sp, #28]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	dc59      	bgt.n	8005cf6 <_dtoa_r+0x936>
 8005c42:	e091      	b.n	8005d68 <_dtoa_r+0x9a8>
 8005c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c4a:	e758      	b.n	8005afe <_dtoa_r+0x73e>
 8005c4c:	9b04      	ldr	r3, [sp, #16]
 8005c4e:	1e5e      	subs	r6, r3, #1
 8005c50:	9b08      	ldr	r3, [sp, #32]
 8005c52:	42b3      	cmp	r3, r6
 8005c54:	bfbf      	itttt	lt
 8005c56:	9b08      	ldrlt	r3, [sp, #32]
 8005c58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005c5a:	9608      	strlt	r6, [sp, #32]
 8005c5c:	1af3      	sublt	r3, r6, r3
 8005c5e:	bfb4      	ite	lt
 8005c60:	18d2      	addlt	r2, r2, r3
 8005c62:	1b9e      	subge	r6, r3, r6
 8005c64:	9b04      	ldr	r3, [sp, #16]
 8005c66:	bfbc      	itt	lt
 8005c68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005c6a:	2600      	movlt	r6, #0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bfb7      	itett	lt
 8005c70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005c74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005c78:	1a9d      	sublt	r5, r3, r2
 8005c7a:	2300      	movlt	r3, #0
 8005c7c:	e741      	b.n	8005b02 <_dtoa_r+0x742>
 8005c7e:	9e08      	ldr	r6, [sp, #32]
 8005c80:	9d05      	ldr	r5, [sp, #20]
 8005c82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c84:	e748      	b.n	8005b18 <_dtoa_r+0x758>
 8005c86:	9a08      	ldr	r2, [sp, #32]
 8005c88:	e770      	b.n	8005b6c <_dtoa_r+0x7ac>
 8005c8a:	9b07      	ldr	r3, [sp, #28]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	dc19      	bgt.n	8005cc4 <_dtoa_r+0x904>
 8005c90:	9b02      	ldr	r3, [sp, #8]
 8005c92:	b9bb      	cbnz	r3, 8005cc4 <_dtoa_r+0x904>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c9a:	b99b      	cbnz	r3, 8005cc4 <_dtoa_r+0x904>
 8005c9c:	9b03      	ldr	r3, [sp, #12]
 8005c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ca2:	0d1b      	lsrs	r3, r3, #20
 8005ca4:	051b      	lsls	r3, r3, #20
 8005ca6:	b183      	cbz	r3, 8005cca <_dtoa_r+0x90a>
 8005ca8:	9b05      	ldr	r3, [sp, #20]
 8005caa:	3301      	adds	r3, #1
 8005cac:	9305      	str	r3, [sp, #20]
 8005cae:	9b06      	ldr	r3, [sp, #24]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	9306      	str	r3, [sp, #24]
 8005cb4:	f04f 0801 	mov.w	r8, #1
 8005cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f47f af6f 	bne.w	8005b9e <_dtoa_r+0x7de>
 8005cc0:	2001      	movs	r0, #1
 8005cc2:	e774      	b.n	8005bae <_dtoa_r+0x7ee>
 8005cc4:	f04f 0800 	mov.w	r8, #0
 8005cc8:	e7f6      	b.n	8005cb8 <_dtoa_r+0x8f8>
 8005cca:	4698      	mov	r8, r3
 8005ccc:	e7f4      	b.n	8005cb8 <_dtoa_r+0x8f8>
 8005cce:	d082      	beq.n	8005bd6 <_dtoa_r+0x816>
 8005cd0:	9a05      	ldr	r2, [sp, #20]
 8005cd2:	331c      	adds	r3, #28
 8005cd4:	441a      	add	r2, r3
 8005cd6:	9205      	str	r2, [sp, #20]
 8005cd8:	9a06      	ldr	r2, [sp, #24]
 8005cda:	441a      	add	r2, r3
 8005cdc:	441d      	add	r5, r3
 8005cde:	9206      	str	r2, [sp, #24]
 8005ce0:	e779      	b.n	8005bd6 <_dtoa_r+0x816>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	e7f4      	b.n	8005cd0 <_dtoa_r+0x910>
 8005ce6:	9b04      	ldr	r3, [sp, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	dc37      	bgt.n	8005d5c <_dtoa_r+0x99c>
 8005cec:	9b07      	ldr	r3, [sp, #28]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	dd34      	ble.n	8005d5c <_dtoa_r+0x99c>
 8005cf2:	9b04      	ldr	r3, [sp, #16]
 8005cf4:	9301      	str	r3, [sp, #4]
 8005cf6:	9b01      	ldr	r3, [sp, #4]
 8005cf8:	b963      	cbnz	r3, 8005d14 <_dtoa_r+0x954>
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	2205      	movs	r2, #5
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 fc6c 	bl	80065dc <__multadd>
 8005d04:	4601      	mov	r1, r0
 8005d06:	4606      	mov	r6, r0
 8005d08:	4650      	mov	r0, sl
 8005d0a:	f000 fe81 	bl	8006a10 <__mcmp>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f73f adbb 	bgt.w	800588a <_dtoa_r+0x4ca>
 8005d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d16:	9d00      	ldr	r5, [sp, #0]
 8005d18:	ea6f 0b03 	mvn.w	fp, r3
 8005d1c:	f04f 0800 	mov.w	r8, #0
 8005d20:	4631      	mov	r1, r6
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 fc38 	bl	8006598 <_Bfree>
 8005d28:	2f00      	cmp	r7, #0
 8005d2a:	f43f aeab 	beq.w	8005a84 <_dtoa_r+0x6c4>
 8005d2e:	f1b8 0f00 	cmp.w	r8, #0
 8005d32:	d005      	beq.n	8005d40 <_dtoa_r+0x980>
 8005d34:	45b8      	cmp	r8, r7
 8005d36:	d003      	beq.n	8005d40 <_dtoa_r+0x980>
 8005d38:	4641      	mov	r1, r8
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 fc2c 	bl	8006598 <_Bfree>
 8005d40:	4639      	mov	r1, r7
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 fc28 	bl	8006598 <_Bfree>
 8005d48:	e69c      	b.n	8005a84 <_dtoa_r+0x6c4>
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	4637      	mov	r7, r6
 8005d4e:	e7e1      	b.n	8005d14 <_dtoa_r+0x954>
 8005d50:	46bb      	mov	fp, r7
 8005d52:	4637      	mov	r7, r6
 8005d54:	e599      	b.n	800588a <_dtoa_r+0x4ca>
 8005d56:	bf00      	nop
 8005d58:	40240000 	.word	0x40240000
 8005d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80c8 	beq.w	8005ef4 <_dtoa_r+0xb34>
 8005d64:	9b04      	ldr	r3, [sp, #16]
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	2d00      	cmp	r5, #0
 8005d6a:	dd05      	ble.n	8005d78 <_dtoa_r+0x9b8>
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	462a      	mov	r2, r5
 8005d70:	4620      	mov	r0, r4
 8005d72:	f000 fde1 	bl	8006938 <__lshift>
 8005d76:	4607      	mov	r7, r0
 8005d78:	f1b8 0f00 	cmp.w	r8, #0
 8005d7c:	d05b      	beq.n	8005e36 <_dtoa_r+0xa76>
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fbc9 	bl	8006518 <_Balloc>
 8005d86:	4605      	mov	r5, r0
 8005d88:	b928      	cbnz	r0, 8005d96 <_dtoa_r+0x9d6>
 8005d8a:	4b83      	ldr	r3, [pc, #524]	; (8005f98 <_dtoa_r+0xbd8>)
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005d92:	f7ff bb2e 	b.w	80053f2 <_dtoa_r+0x32>
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	3202      	adds	r2, #2
 8005d9a:	0092      	lsls	r2, r2, #2
 8005d9c:	f107 010c 	add.w	r1, r7, #12
 8005da0:	300c      	adds	r0, #12
 8005da2:	f001 f817 	bl	8006dd4 <memcpy>
 8005da6:	2201      	movs	r2, #1
 8005da8:	4629      	mov	r1, r5
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 fdc4 	bl	8006938 <__lshift>
 8005db0:	9b00      	ldr	r3, [sp, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dba:	4413      	add	r3, r2
 8005dbc:	9308      	str	r3, [sp, #32]
 8005dbe:	9b02      	ldr	r3, [sp, #8]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	46b8      	mov	r8, r7
 8005dc6:	9306      	str	r3, [sp, #24]
 8005dc8:	4607      	mov	r7, r0
 8005dca:	9b04      	ldr	r3, [sp, #16]
 8005dcc:	4631      	mov	r1, r6
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	4650      	mov	r0, sl
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	f7ff fa6b 	bl	80052ae <quorem>
 8005dd8:	4641      	mov	r1, r8
 8005dda:	9002      	str	r0, [sp, #8]
 8005ddc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005de0:	4650      	mov	r0, sl
 8005de2:	f000 fe15 	bl	8006a10 <__mcmp>
 8005de6:	463a      	mov	r2, r7
 8005de8:	9005      	str	r0, [sp, #20]
 8005dea:	4631      	mov	r1, r6
 8005dec:	4620      	mov	r0, r4
 8005dee:	f000 fe2b 	bl	8006a48 <__mdiff>
 8005df2:	68c2      	ldr	r2, [r0, #12]
 8005df4:	4605      	mov	r5, r0
 8005df6:	bb02      	cbnz	r2, 8005e3a <_dtoa_r+0xa7a>
 8005df8:	4601      	mov	r1, r0
 8005dfa:	4650      	mov	r0, sl
 8005dfc:	f000 fe08 	bl	8006a10 <__mcmp>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4629      	mov	r1, r5
 8005e04:	4620      	mov	r0, r4
 8005e06:	9209      	str	r2, [sp, #36]	; 0x24
 8005e08:	f000 fbc6 	bl	8006598 <_Bfree>
 8005e0c:	9b07      	ldr	r3, [sp, #28]
 8005e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e10:	9d04      	ldr	r5, [sp, #16]
 8005e12:	ea43 0102 	orr.w	r1, r3, r2
 8005e16:	9b06      	ldr	r3, [sp, #24]
 8005e18:	4319      	orrs	r1, r3
 8005e1a:	d110      	bne.n	8005e3e <_dtoa_r+0xa7e>
 8005e1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e20:	d029      	beq.n	8005e76 <_dtoa_r+0xab6>
 8005e22:	9b05      	ldr	r3, [sp, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dd02      	ble.n	8005e2e <_dtoa_r+0xa6e>
 8005e28:	9b02      	ldr	r3, [sp, #8]
 8005e2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005e2e:	9b01      	ldr	r3, [sp, #4]
 8005e30:	f883 9000 	strb.w	r9, [r3]
 8005e34:	e774      	b.n	8005d20 <_dtoa_r+0x960>
 8005e36:	4638      	mov	r0, r7
 8005e38:	e7ba      	b.n	8005db0 <_dtoa_r+0x9f0>
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	e7e1      	b.n	8005e02 <_dtoa_r+0xa42>
 8005e3e:	9b05      	ldr	r3, [sp, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	db04      	blt.n	8005e4e <_dtoa_r+0xa8e>
 8005e44:	9907      	ldr	r1, [sp, #28]
 8005e46:	430b      	orrs	r3, r1
 8005e48:	9906      	ldr	r1, [sp, #24]
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	d120      	bne.n	8005e90 <_dtoa_r+0xad0>
 8005e4e:	2a00      	cmp	r2, #0
 8005e50:	dded      	ble.n	8005e2e <_dtoa_r+0xa6e>
 8005e52:	4651      	mov	r1, sl
 8005e54:	2201      	movs	r2, #1
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 fd6e 	bl	8006938 <__lshift>
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4682      	mov	sl, r0
 8005e60:	f000 fdd6 	bl	8006a10 <__mcmp>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	dc03      	bgt.n	8005e70 <_dtoa_r+0xab0>
 8005e68:	d1e1      	bne.n	8005e2e <_dtoa_r+0xa6e>
 8005e6a:	f019 0f01 	tst.w	r9, #1
 8005e6e:	d0de      	beq.n	8005e2e <_dtoa_r+0xa6e>
 8005e70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e74:	d1d8      	bne.n	8005e28 <_dtoa_r+0xa68>
 8005e76:	9a01      	ldr	r2, [sp, #4]
 8005e78:	2339      	movs	r3, #57	; 0x39
 8005e7a:	7013      	strb	r3, [r2, #0]
 8005e7c:	462b      	mov	r3, r5
 8005e7e:	461d      	mov	r5, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e86:	2a39      	cmp	r2, #57	; 0x39
 8005e88:	d06c      	beq.n	8005f64 <_dtoa_r+0xba4>
 8005e8a:	3201      	adds	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e747      	b.n	8005d20 <_dtoa_r+0x960>
 8005e90:	2a00      	cmp	r2, #0
 8005e92:	dd07      	ble.n	8005ea4 <_dtoa_r+0xae4>
 8005e94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e98:	d0ed      	beq.n	8005e76 <_dtoa_r+0xab6>
 8005e9a:	9a01      	ldr	r2, [sp, #4]
 8005e9c:	f109 0301 	add.w	r3, r9, #1
 8005ea0:	7013      	strb	r3, [r2, #0]
 8005ea2:	e73d      	b.n	8005d20 <_dtoa_r+0x960>
 8005ea4:	9b04      	ldr	r3, [sp, #16]
 8005ea6:	9a08      	ldr	r2, [sp, #32]
 8005ea8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d043      	beq.n	8005f38 <_dtoa_r+0xb78>
 8005eb0:	4651      	mov	r1, sl
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	220a      	movs	r2, #10
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 fb90 	bl	80065dc <__multadd>
 8005ebc:	45b8      	cmp	r8, r7
 8005ebe:	4682      	mov	sl, r0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	f04f 020a 	mov.w	r2, #10
 8005ec8:	4641      	mov	r1, r8
 8005eca:	4620      	mov	r0, r4
 8005ecc:	d107      	bne.n	8005ede <_dtoa_r+0xb1e>
 8005ece:	f000 fb85 	bl	80065dc <__multadd>
 8005ed2:	4680      	mov	r8, r0
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	e775      	b.n	8005dca <_dtoa_r+0xa0a>
 8005ede:	f000 fb7d 	bl	80065dc <__multadd>
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	220a      	movs	r2, #10
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 fb76 	bl	80065dc <__multadd>
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	e7f0      	b.n	8005ed6 <_dtoa_r+0xb16>
 8005ef4:	9b04      	ldr	r3, [sp, #16]
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	9d00      	ldr	r5, [sp, #0]
 8005efa:	4631      	mov	r1, r6
 8005efc:	4650      	mov	r0, sl
 8005efe:	f7ff f9d6 	bl	80052ae <quorem>
 8005f02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	f805 9b01 	strb.w	r9, [r5], #1
 8005f0c:	1aea      	subs	r2, r5, r3
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	4293      	cmp	r3, r2
 8005f12:	dd07      	ble.n	8005f24 <_dtoa_r+0xb64>
 8005f14:	4651      	mov	r1, sl
 8005f16:	2300      	movs	r3, #0
 8005f18:	220a      	movs	r2, #10
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f000 fb5e 	bl	80065dc <__multadd>
 8005f20:	4682      	mov	sl, r0
 8005f22:	e7ea      	b.n	8005efa <_dtoa_r+0xb3a>
 8005f24:	9b01      	ldr	r3, [sp, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	bfc8      	it	gt
 8005f2a:	461d      	movgt	r5, r3
 8005f2c:	9b00      	ldr	r3, [sp, #0]
 8005f2e:	bfd8      	it	le
 8005f30:	2501      	movle	r5, #1
 8005f32:	441d      	add	r5, r3
 8005f34:	f04f 0800 	mov.w	r8, #0
 8005f38:	4651      	mov	r1, sl
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 fcfb 	bl	8006938 <__lshift>
 8005f42:	4631      	mov	r1, r6
 8005f44:	4682      	mov	sl, r0
 8005f46:	f000 fd63 	bl	8006a10 <__mcmp>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	dc96      	bgt.n	8005e7c <_dtoa_r+0xabc>
 8005f4e:	d102      	bne.n	8005f56 <_dtoa_r+0xb96>
 8005f50:	f019 0f01 	tst.w	r9, #1
 8005f54:	d192      	bne.n	8005e7c <_dtoa_r+0xabc>
 8005f56:	462b      	mov	r3, r5
 8005f58:	461d      	mov	r5, r3
 8005f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f5e:	2a30      	cmp	r2, #48	; 0x30
 8005f60:	d0fa      	beq.n	8005f58 <_dtoa_r+0xb98>
 8005f62:	e6dd      	b.n	8005d20 <_dtoa_r+0x960>
 8005f64:	9a00      	ldr	r2, [sp, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d189      	bne.n	8005e7e <_dtoa_r+0xabe>
 8005f6a:	f10b 0b01 	add.w	fp, fp, #1
 8005f6e:	2331      	movs	r3, #49	; 0x31
 8005f70:	e796      	b.n	8005ea0 <_dtoa_r+0xae0>
 8005f72:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <_dtoa_r+0xbdc>)
 8005f74:	f7ff ba99 	b.w	80054aa <_dtoa_r+0xea>
 8005f78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f47f aa6d 	bne.w	800545a <_dtoa_r+0x9a>
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <_dtoa_r+0xbe0>)
 8005f82:	f7ff ba92 	b.w	80054aa <_dtoa_r+0xea>
 8005f86:	9b01      	ldr	r3, [sp, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	dcb5      	bgt.n	8005ef8 <_dtoa_r+0xb38>
 8005f8c:	9b07      	ldr	r3, [sp, #28]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	f73f aeb1 	bgt.w	8005cf6 <_dtoa_r+0x936>
 8005f94:	e7b0      	b.n	8005ef8 <_dtoa_r+0xb38>
 8005f96:	bf00      	nop
 8005f98:	080075cc 	.word	0x080075cc
 8005f9c:	0800752c 	.word	0x0800752c
 8005fa0:	08007550 	.word	0x08007550

08005fa4 <__ssputs_r>:
 8005fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	688e      	ldr	r6, [r1, #8]
 8005faa:	461f      	mov	r7, r3
 8005fac:	42be      	cmp	r6, r7
 8005fae:	680b      	ldr	r3, [r1, #0]
 8005fb0:	4682      	mov	sl, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	4690      	mov	r8, r2
 8005fb6:	d82c      	bhi.n	8006012 <__ssputs_r+0x6e>
 8005fb8:	898a      	ldrh	r2, [r1, #12]
 8005fba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fbe:	d026      	beq.n	800600e <__ssputs_r+0x6a>
 8005fc0:	6965      	ldr	r5, [r4, #20]
 8005fc2:	6909      	ldr	r1, [r1, #16]
 8005fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fc8:	eba3 0901 	sub.w	r9, r3, r1
 8005fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fd0:	1c7b      	adds	r3, r7, #1
 8005fd2:	444b      	add	r3, r9
 8005fd4:	106d      	asrs	r5, r5, #1
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	bf38      	it	cc
 8005fda:	461d      	movcc	r5, r3
 8005fdc:	0553      	lsls	r3, r2, #21
 8005fde:	d527      	bpl.n	8006030 <__ssputs_r+0x8c>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f000 f95f 	bl	80062a4 <_malloc_r>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	b360      	cbz	r0, 8006044 <__ssputs_r+0xa0>
 8005fea:	6921      	ldr	r1, [r4, #16]
 8005fec:	464a      	mov	r2, r9
 8005fee:	f000 fef1 	bl	8006dd4 <memcpy>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	6126      	str	r6, [r4, #16]
 8006000:	6165      	str	r5, [r4, #20]
 8006002:	444e      	add	r6, r9
 8006004:	eba5 0509 	sub.w	r5, r5, r9
 8006008:	6026      	str	r6, [r4, #0]
 800600a:	60a5      	str	r5, [r4, #8]
 800600c:	463e      	mov	r6, r7
 800600e:	42be      	cmp	r6, r7
 8006010:	d900      	bls.n	8006014 <__ssputs_r+0x70>
 8006012:	463e      	mov	r6, r7
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	4632      	mov	r2, r6
 8006018:	4641      	mov	r1, r8
 800601a:	f000 fe6b 	bl	8006cf4 <memmove>
 800601e:	68a3      	ldr	r3, [r4, #8]
 8006020:	1b9b      	subs	r3, r3, r6
 8006022:	60a3      	str	r3, [r4, #8]
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	4433      	add	r3, r6
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	2000      	movs	r0, #0
 800602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006030:	462a      	mov	r2, r5
 8006032:	f000 fe30 	bl	8006c96 <_realloc_r>
 8006036:	4606      	mov	r6, r0
 8006038:	2800      	cmp	r0, #0
 800603a:	d1e0      	bne.n	8005ffe <__ssputs_r+0x5a>
 800603c:	6921      	ldr	r1, [r4, #16]
 800603e:	4650      	mov	r0, sl
 8006040:	f000 ff0a 	bl	8006e58 <_free_r>
 8006044:	230c      	movs	r3, #12
 8006046:	f8ca 3000 	str.w	r3, [sl]
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006050:	81a3      	strh	r3, [r4, #12]
 8006052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006056:	e7e9      	b.n	800602c <__ssputs_r+0x88>

08006058 <_svfiprintf_r>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	4698      	mov	r8, r3
 800605e:	898b      	ldrh	r3, [r1, #12]
 8006060:	061b      	lsls	r3, r3, #24
 8006062:	b09d      	sub	sp, #116	; 0x74
 8006064:	4607      	mov	r7, r0
 8006066:	460d      	mov	r5, r1
 8006068:	4614      	mov	r4, r2
 800606a:	d50e      	bpl.n	800608a <_svfiprintf_r+0x32>
 800606c:	690b      	ldr	r3, [r1, #16]
 800606e:	b963      	cbnz	r3, 800608a <_svfiprintf_r+0x32>
 8006070:	2140      	movs	r1, #64	; 0x40
 8006072:	f000 f917 	bl	80062a4 <_malloc_r>
 8006076:	6028      	str	r0, [r5, #0]
 8006078:	6128      	str	r0, [r5, #16]
 800607a:	b920      	cbnz	r0, 8006086 <_svfiprintf_r+0x2e>
 800607c:	230c      	movs	r3, #12
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006084:	e0d0      	b.n	8006228 <_svfiprintf_r+0x1d0>
 8006086:	2340      	movs	r3, #64	; 0x40
 8006088:	616b      	str	r3, [r5, #20]
 800608a:	2300      	movs	r3, #0
 800608c:	9309      	str	r3, [sp, #36]	; 0x24
 800608e:	2320      	movs	r3, #32
 8006090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006094:	f8cd 800c 	str.w	r8, [sp, #12]
 8006098:	2330      	movs	r3, #48	; 0x30
 800609a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006240 <_svfiprintf_r+0x1e8>
 800609e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060a2:	f04f 0901 	mov.w	r9, #1
 80060a6:	4623      	mov	r3, r4
 80060a8:	469a      	mov	sl, r3
 80060aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ae:	b10a      	cbz	r2, 80060b4 <_svfiprintf_r+0x5c>
 80060b0:	2a25      	cmp	r2, #37	; 0x25
 80060b2:	d1f9      	bne.n	80060a8 <_svfiprintf_r+0x50>
 80060b4:	ebba 0b04 	subs.w	fp, sl, r4
 80060b8:	d00b      	beq.n	80060d2 <_svfiprintf_r+0x7a>
 80060ba:	465b      	mov	r3, fp
 80060bc:	4622      	mov	r2, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	4638      	mov	r0, r7
 80060c2:	f7ff ff6f 	bl	8005fa4 <__ssputs_r>
 80060c6:	3001      	adds	r0, #1
 80060c8:	f000 80a9 	beq.w	800621e <_svfiprintf_r+0x1c6>
 80060cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ce:	445a      	add	r2, fp
 80060d0:	9209      	str	r2, [sp, #36]	; 0x24
 80060d2:	f89a 3000 	ldrb.w	r3, [sl]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 80a1 	beq.w	800621e <_svfiprintf_r+0x1c6>
 80060dc:	2300      	movs	r3, #0
 80060de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e6:	f10a 0a01 	add.w	sl, sl, #1
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060f2:	931a      	str	r3, [sp, #104]	; 0x68
 80060f4:	4654      	mov	r4, sl
 80060f6:	2205      	movs	r2, #5
 80060f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fc:	4850      	ldr	r0, [pc, #320]	; (8006240 <_svfiprintf_r+0x1e8>)
 80060fe:	f7fa f86f 	bl	80001e0 <memchr>
 8006102:	9a04      	ldr	r2, [sp, #16]
 8006104:	b9d8      	cbnz	r0, 800613e <_svfiprintf_r+0xe6>
 8006106:	06d0      	lsls	r0, r2, #27
 8006108:	bf44      	itt	mi
 800610a:	2320      	movmi	r3, #32
 800610c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006110:	0711      	lsls	r1, r2, #28
 8006112:	bf44      	itt	mi
 8006114:	232b      	movmi	r3, #43	; 0x2b
 8006116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800611a:	f89a 3000 	ldrb.w	r3, [sl]
 800611e:	2b2a      	cmp	r3, #42	; 0x2a
 8006120:	d015      	beq.n	800614e <_svfiprintf_r+0xf6>
 8006122:	9a07      	ldr	r2, [sp, #28]
 8006124:	4654      	mov	r4, sl
 8006126:	2000      	movs	r0, #0
 8006128:	f04f 0c0a 	mov.w	ip, #10
 800612c:	4621      	mov	r1, r4
 800612e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006132:	3b30      	subs	r3, #48	; 0x30
 8006134:	2b09      	cmp	r3, #9
 8006136:	d94d      	bls.n	80061d4 <_svfiprintf_r+0x17c>
 8006138:	b1b0      	cbz	r0, 8006168 <_svfiprintf_r+0x110>
 800613a:	9207      	str	r2, [sp, #28]
 800613c:	e014      	b.n	8006168 <_svfiprintf_r+0x110>
 800613e:	eba0 0308 	sub.w	r3, r0, r8
 8006142:	fa09 f303 	lsl.w	r3, r9, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	46a2      	mov	sl, r4
 800614c:	e7d2      	b.n	80060f4 <_svfiprintf_r+0x9c>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	1d19      	adds	r1, r3, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	9103      	str	r1, [sp, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	bfbb      	ittet	lt
 800615a:	425b      	neglt	r3, r3
 800615c:	f042 0202 	orrlt.w	r2, r2, #2
 8006160:	9307      	strge	r3, [sp, #28]
 8006162:	9307      	strlt	r3, [sp, #28]
 8006164:	bfb8      	it	lt
 8006166:	9204      	strlt	r2, [sp, #16]
 8006168:	7823      	ldrb	r3, [r4, #0]
 800616a:	2b2e      	cmp	r3, #46	; 0x2e
 800616c:	d10c      	bne.n	8006188 <_svfiprintf_r+0x130>
 800616e:	7863      	ldrb	r3, [r4, #1]
 8006170:	2b2a      	cmp	r3, #42	; 0x2a
 8006172:	d134      	bne.n	80061de <_svfiprintf_r+0x186>
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	9203      	str	r2, [sp, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfb8      	it	lt
 8006180:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006184:	3402      	adds	r4, #2
 8006186:	9305      	str	r3, [sp, #20]
 8006188:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006250 <_svfiprintf_r+0x1f8>
 800618c:	7821      	ldrb	r1, [r4, #0]
 800618e:	2203      	movs	r2, #3
 8006190:	4650      	mov	r0, sl
 8006192:	f7fa f825 	bl	80001e0 <memchr>
 8006196:	b138      	cbz	r0, 80061a8 <_svfiprintf_r+0x150>
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	eba0 000a 	sub.w	r0, r0, sl
 800619e:	2240      	movs	r2, #64	; 0x40
 80061a0:	4082      	lsls	r2, r0
 80061a2:	4313      	orrs	r3, r2
 80061a4:	3401      	adds	r4, #1
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ac:	4825      	ldr	r0, [pc, #148]	; (8006244 <_svfiprintf_r+0x1ec>)
 80061ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b2:	2206      	movs	r2, #6
 80061b4:	f7fa f814 	bl	80001e0 <memchr>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d038      	beq.n	800622e <_svfiprintf_r+0x1d6>
 80061bc:	4b22      	ldr	r3, [pc, #136]	; (8006248 <_svfiprintf_r+0x1f0>)
 80061be:	bb1b      	cbnz	r3, 8006208 <_svfiprintf_r+0x1b0>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	3307      	adds	r3, #7
 80061c4:	f023 0307 	bic.w	r3, r3, #7
 80061c8:	3308      	adds	r3, #8
 80061ca:	9303      	str	r3, [sp, #12]
 80061cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ce:	4433      	add	r3, r6
 80061d0:	9309      	str	r3, [sp, #36]	; 0x24
 80061d2:	e768      	b.n	80060a6 <_svfiprintf_r+0x4e>
 80061d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d8:	460c      	mov	r4, r1
 80061da:	2001      	movs	r0, #1
 80061dc:	e7a6      	b.n	800612c <_svfiprintf_r+0xd4>
 80061de:	2300      	movs	r3, #0
 80061e0:	3401      	adds	r4, #1
 80061e2:	9305      	str	r3, [sp, #20]
 80061e4:	4619      	mov	r1, r3
 80061e6:	f04f 0c0a 	mov.w	ip, #10
 80061ea:	4620      	mov	r0, r4
 80061ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f0:	3a30      	subs	r2, #48	; 0x30
 80061f2:	2a09      	cmp	r2, #9
 80061f4:	d903      	bls.n	80061fe <_svfiprintf_r+0x1a6>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0c6      	beq.n	8006188 <_svfiprintf_r+0x130>
 80061fa:	9105      	str	r1, [sp, #20]
 80061fc:	e7c4      	b.n	8006188 <_svfiprintf_r+0x130>
 80061fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006202:	4604      	mov	r4, r0
 8006204:	2301      	movs	r3, #1
 8006206:	e7f0      	b.n	80061ea <_svfiprintf_r+0x192>
 8006208:	ab03      	add	r3, sp, #12
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	462a      	mov	r2, r5
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <_svfiprintf_r+0x1f4>)
 8006210:	a904      	add	r1, sp, #16
 8006212:	4638      	mov	r0, r7
 8006214:	f7fe fb56 	bl	80048c4 <_printf_float>
 8006218:	1c42      	adds	r2, r0, #1
 800621a:	4606      	mov	r6, r0
 800621c:	d1d6      	bne.n	80061cc <_svfiprintf_r+0x174>
 800621e:	89ab      	ldrh	r3, [r5, #12]
 8006220:	065b      	lsls	r3, r3, #25
 8006222:	f53f af2d 	bmi.w	8006080 <_svfiprintf_r+0x28>
 8006226:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006228:	b01d      	add	sp, #116	; 0x74
 800622a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622e:	ab03      	add	r3, sp, #12
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	462a      	mov	r2, r5
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <_svfiprintf_r+0x1f4>)
 8006236:	a904      	add	r1, sp, #16
 8006238:	4638      	mov	r0, r7
 800623a:	f7fe fde7 	bl	8004e0c <_printf_i>
 800623e:	e7eb      	b.n	8006218 <_svfiprintf_r+0x1c0>
 8006240:	080075dd 	.word	0x080075dd
 8006244:	080075e7 	.word	0x080075e7
 8006248:	080048c5 	.word	0x080048c5
 800624c:	08005fa5 	.word	0x08005fa5
 8006250:	080075e3 	.word	0x080075e3

08006254 <malloc>:
 8006254:	4b02      	ldr	r3, [pc, #8]	; (8006260 <malloc+0xc>)
 8006256:	4601      	mov	r1, r0
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	f000 b823 	b.w	80062a4 <_malloc_r>
 800625e:	bf00      	nop
 8006260:	20000064 	.word	0x20000064

08006264 <sbrk_aligned>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	4e0e      	ldr	r6, [pc, #56]	; (80062a0 <sbrk_aligned+0x3c>)
 8006268:	460c      	mov	r4, r1
 800626a:	6831      	ldr	r1, [r6, #0]
 800626c:	4605      	mov	r5, r0
 800626e:	b911      	cbnz	r1, 8006276 <sbrk_aligned+0x12>
 8006270:	f000 fd8e 	bl	8006d90 <_sbrk_r>
 8006274:	6030      	str	r0, [r6, #0]
 8006276:	4621      	mov	r1, r4
 8006278:	4628      	mov	r0, r5
 800627a:	f000 fd89 	bl	8006d90 <_sbrk_r>
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	d00a      	beq.n	8006298 <sbrk_aligned+0x34>
 8006282:	1cc4      	adds	r4, r0, #3
 8006284:	f024 0403 	bic.w	r4, r4, #3
 8006288:	42a0      	cmp	r0, r4
 800628a:	d007      	beq.n	800629c <sbrk_aligned+0x38>
 800628c:	1a21      	subs	r1, r4, r0
 800628e:	4628      	mov	r0, r5
 8006290:	f000 fd7e 	bl	8006d90 <_sbrk_r>
 8006294:	3001      	adds	r0, #1
 8006296:	d101      	bne.n	800629c <sbrk_aligned+0x38>
 8006298:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800629c:	4620      	mov	r0, r4
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	20000478 	.word	0x20000478

080062a4 <_malloc_r>:
 80062a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a8:	1ccd      	adds	r5, r1, #3
 80062aa:	f025 0503 	bic.w	r5, r5, #3
 80062ae:	3508      	adds	r5, #8
 80062b0:	2d0c      	cmp	r5, #12
 80062b2:	bf38      	it	cc
 80062b4:	250c      	movcc	r5, #12
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	4607      	mov	r7, r0
 80062ba:	db01      	blt.n	80062c0 <_malloc_r+0x1c>
 80062bc:	42a9      	cmp	r1, r5
 80062be:	d905      	bls.n	80062cc <_malloc_r+0x28>
 80062c0:	230c      	movs	r3, #12
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	2600      	movs	r6, #0
 80062c6:	4630      	mov	r0, r6
 80062c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063a0 <_malloc_r+0xfc>
 80062d0:	f000 f916 	bl	8006500 <__malloc_lock>
 80062d4:	f8d8 3000 	ldr.w	r3, [r8]
 80062d8:	461c      	mov	r4, r3
 80062da:	bb5c      	cbnz	r4, 8006334 <_malloc_r+0x90>
 80062dc:	4629      	mov	r1, r5
 80062de:	4638      	mov	r0, r7
 80062e0:	f7ff ffc0 	bl	8006264 <sbrk_aligned>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	4604      	mov	r4, r0
 80062e8:	d155      	bne.n	8006396 <_malloc_r+0xf2>
 80062ea:	f8d8 4000 	ldr.w	r4, [r8]
 80062ee:	4626      	mov	r6, r4
 80062f0:	2e00      	cmp	r6, #0
 80062f2:	d145      	bne.n	8006380 <_malloc_r+0xdc>
 80062f4:	2c00      	cmp	r4, #0
 80062f6:	d048      	beq.n	800638a <_malloc_r+0xe6>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	4631      	mov	r1, r6
 80062fc:	4638      	mov	r0, r7
 80062fe:	eb04 0903 	add.w	r9, r4, r3
 8006302:	f000 fd45 	bl	8006d90 <_sbrk_r>
 8006306:	4581      	cmp	r9, r0
 8006308:	d13f      	bne.n	800638a <_malloc_r+0xe6>
 800630a:	6821      	ldr	r1, [r4, #0]
 800630c:	1a6d      	subs	r5, r5, r1
 800630e:	4629      	mov	r1, r5
 8006310:	4638      	mov	r0, r7
 8006312:	f7ff ffa7 	bl	8006264 <sbrk_aligned>
 8006316:	3001      	adds	r0, #1
 8006318:	d037      	beq.n	800638a <_malloc_r+0xe6>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	442b      	add	r3, r5
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	f8d8 3000 	ldr.w	r3, [r8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d038      	beq.n	800639a <_malloc_r+0xf6>
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	42a2      	cmp	r2, r4
 800632c:	d12b      	bne.n	8006386 <_malloc_r+0xe2>
 800632e:	2200      	movs	r2, #0
 8006330:	605a      	str	r2, [r3, #4]
 8006332:	e00f      	b.n	8006354 <_malloc_r+0xb0>
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	1b52      	subs	r2, r2, r5
 8006338:	d41f      	bmi.n	800637a <_malloc_r+0xd6>
 800633a:	2a0b      	cmp	r2, #11
 800633c:	d917      	bls.n	800636e <_malloc_r+0xca>
 800633e:	1961      	adds	r1, r4, r5
 8006340:	42a3      	cmp	r3, r4
 8006342:	6025      	str	r5, [r4, #0]
 8006344:	bf18      	it	ne
 8006346:	6059      	strne	r1, [r3, #4]
 8006348:	6863      	ldr	r3, [r4, #4]
 800634a:	bf08      	it	eq
 800634c:	f8c8 1000 	streq.w	r1, [r8]
 8006350:	5162      	str	r2, [r4, r5]
 8006352:	604b      	str	r3, [r1, #4]
 8006354:	4638      	mov	r0, r7
 8006356:	f104 060b 	add.w	r6, r4, #11
 800635a:	f000 f8d7 	bl	800650c <__malloc_unlock>
 800635e:	f026 0607 	bic.w	r6, r6, #7
 8006362:	1d23      	adds	r3, r4, #4
 8006364:	1af2      	subs	r2, r6, r3
 8006366:	d0ae      	beq.n	80062c6 <_malloc_r+0x22>
 8006368:	1b9b      	subs	r3, r3, r6
 800636a:	50a3      	str	r3, [r4, r2]
 800636c:	e7ab      	b.n	80062c6 <_malloc_r+0x22>
 800636e:	42a3      	cmp	r3, r4
 8006370:	6862      	ldr	r2, [r4, #4]
 8006372:	d1dd      	bne.n	8006330 <_malloc_r+0x8c>
 8006374:	f8c8 2000 	str.w	r2, [r8]
 8006378:	e7ec      	b.n	8006354 <_malloc_r+0xb0>
 800637a:	4623      	mov	r3, r4
 800637c:	6864      	ldr	r4, [r4, #4]
 800637e:	e7ac      	b.n	80062da <_malloc_r+0x36>
 8006380:	4634      	mov	r4, r6
 8006382:	6876      	ldr	r6, [r6, #4]
 8006384:	e7b4      	b.n	80062f0 <_malloc_r+0x4c>
 8006386:	4613      	mov	r3, r2
 8006388:	e7cc      	b.n	8006324 <_malloc_r+0x80>
 800638a:	230c      	movs	r3, #12
 800638c:	603b      	str	r3, [r7, #0]
 800638e:	4638      	mov	r0, r7
 8006390:	f000 f8bc 	bl	800650c <__malloc_unlock>
 8006394:	e797      	b.n	80062c6 <_malloc_r+0x22>
 8006396:	6025      	str	r5, [r4, #0]
 8006398:	e7dc      	b.n	8006354 <_malloc_r+0xb0>
 800639a:	605b      	str	r3, [r3, #4]
 800639c:	deff      	udf	#255	; 0xff
 800639e:	bf00      	nop
 80063a0:	20000474 	.word	0x20000474

080063a4 <__sflush_r>:
 80063a4:	898a      	ldrh	r2, [r1, #12]
 80063a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063aa:	4605      	mov	r5, r0
 80063ac:	0710      	lsls	r0, r2, #28
 80063ae:	460c      	mov	r4, r1
 80063b0:	d458      	bmi.n	8006464 <__sflush_r+0xc0>
 80063b2:	684b      	ldr	r3, [r1, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	dc05      	bgt.n	80063c4 <__sflush_r+0x20>
 80063b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	dc02      	bgt.n	80063c4 <__sflush_r+0x20>
 80063be:	2000      	movs	r0, #0
 80063c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063c6:	2e00      	cmp	r6, #0
 80063c8:	d0f9      	beq.n	80063be <__sflush_r+0x1a>
 80063ca:	2300      	movs	r3, #0
 80063cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063d0:	682f      	ldr	r7, [r5, #0]
 80063d2:	6a21      	ldr	r1, [r4, #32]
 80063d4:	602b      	str	r3, [r5, #0]
 80063d6:	d032      	beq.n	800643e <__sflush_r+0x9a>
 80063d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	075a      	lsls	r2, r3, #29
 80063de:	d505      	bpl.n	80063ec <__sflush_r+0x48>
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	1ac0      	subs	r0, r0, r3
 80063e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063e6:	b10b      	cbz	r3, 80063ec <__sflush_r+0x48>
 80063e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063ea:	1ac0      	subs	r0, r0, r3
 80063ec:	2300      	movs	r3, #0
 80063ee:	4602      	mov	r2, r0
 80063f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063f2:	6a21      	ldr	r1, [r4, #32]
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b0      	blx	r6
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	d106      	bne.n	800640c <__sflush_r+0x68>
 80063fe:	6829      	ldr	r1, [r5, #0]
 8006400:	291d      	cmp	r1, #29
 8006402:	d82b      	bhi.n	800645c <__sflush_r+0xb8>
 8006404:	4a29      	ldr	r2, [pc, #164]	; (80064ac <__sflush_r+0x108>)
 8006406:	410a      	asrs	r2, r1
 8006408:	07d6      	lsls	r6, r2, #31
 800640a:	d427      	bmi.n	800645c <__sflush_r+0xb8>
 800640c:	2200      	movs	r2, #0
 800640e:	6062      	str	r2, [r4, #4]
 8006410:	04d9      	lsls	r1, r3, #19
 8006412:	6922      	ldr	r2, [r4, #16]
 8006414:	6022      	str	r2, [r4, #0]
 8006416:	d504      	bpl.n	8006422 <__sflush_r+0x7e>
 8006418:	1c42      	adds	r2, r0, #1
 800641a:	d101      	bne.n	8006420 <__sflush_r+0x7c>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	b903      	cbnz	r3, 8006422 <__sflush_r+0x7e>
 8006420:	6560      	str	r0, [r4, #84]	; 0x54
 8006422:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006424:	602f      	str	r7, [r5, #0]
 8006426:	2900      	cmp	r1, #0
 8006428:	d0c9      	beq.n	80063be <__sflush_r+0x1a>
 800642a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800642e:	4299      	cmp	r1, r3
 8006430:	d002      	beq.n	8006438 <__sflush_r+0x94>
 8006432:	4628      	mov	r0, r5
 8006434:	f000 fd10 	bl	8006e58 <_free_r>
 8006438:	2000      	movs	r0, #0
 800643a:	6360      	str	r0, [r4, #52]	; 0x34
 800643c:	e7c0      	b.n	80063c0 <__sflush_r+0x1c>
 800643e:	2301      	movs	r3, #1
 8006440:	4628      	mov	r0, r5
 8006442:	47b0      	blx	r6
 8006444:	1c41      	adds	r1, r0, #1
 8006446:	d1c8      	bne.n	80063da <__sflush_r+0x36>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0c5      	beq.n	80063da <__sflush_r+0x36>
 800644e:	2b1d      	cmp	r3, #29
 8006450:	d001      	beq.n	8006456 <__sflush_r+0xb2>
 8006452:	2b16      	cmp	r3, #22
 8006454:	d101      	bne.n	800645a <__sflush_r+0xb6>
 8006456:	602f      	str	r7, [r5, #0]
 8006458:	e7b1      	b.n	80063be <__sflush_r+0x1a>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006460:	81a3      	strh	r3, [r4, #12]
 8006462:	e7ad      	b.n	80063c0 <__sflush_r+0x1c>
 8006464:	690f      	ldr	r7, [r1, #16]
 8006466:	2f00      	cmp	r7, #0
 8006468:	d0a9      	beq.n	80063be <__sflush_r+0x1a>
 800646a:	0793      	lsls	r3, r2, #30
 800646c:	680e      	ldr	r6, [r1, #0]
 800646e:	bf08      	it	eq
 8006470:	694b      	ldreq	r3, [r1, #20]
 8006472:	600f      	str	r7, [r1, #0]
 8006474:	bf18      	it	ne
 8006476:	2300      	movne	r3, #0
 8006478:	eba6 0807 	sub.w	r8, r6, r7
 800647c:	608b      	str	r3, [r1, #8]
 800647e:	f1b8 0f00 	cmp.w	r8, #0
 8006482:	dd9c      	ble.n	80063be <__sflush_r+0x1a>
 8006484:	6a21      	ldr	r1, [r4, #32]
 8006486:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006488:	4643      	mov	r3, r8
 800648a:	463a      	mov	r2, r7
 800648c:	4628      	mov	r0, r5
 800648e:	47b0      	blx	r6
 8006490:	2800      	cmp	r0, #0
 8006492:	dc06      	bgt.n	80064a2 <__sflush_r+0xfe>
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800649a:	81a3      	strh	r3, [r4, #12]
 800649c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064a0:	e78e      	b.n	80063c0 <__sflush_r+0x1c>
 80064a2:	4407      	add	r7, r0
 80064a4:	eba8 0800 	sub.w	r8, r8, r0
 80064a8:	e7e9      	b.n	800647e <__sflush_r+0xda>
 80064aa:	bf00      	nop
 80064ac:	dfbffffe 	.word	0xdfbffffe

080064b0 <_fflush_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	690b      	ldr	r3, [r1, #16]
 80064b4:	4605      	mov	r5, r0
 80064b6:	460c      	mov	r4, r1
 80064b8:	b913      	cbnz	r3, 80064c0 <_fflush_r+0x10>
 80064ba:	2500      	movs	r5, #0
 80064bc:	4628      	mov	r0, r5
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	b118      	cbz	r0, 80064ca <_fflush_r+0x1a>
 80064c2:	6a03      	ldr	r3, [r0, #32]
 80064c4:	b90b      	cbnz	r3, 80064ca <_fflush_r+0x1a>
 80064c6:	f7fe fe83 	bl	80051d0 <__sinit>
 80064ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f3      	beq.n	80064ba <_fflush_r+0xa>
 80064d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064d4:	07d0      	lsls	r0, r2, #31
 80064d6:	d404      	bmi.n	80064e2 <_fflush_r+0x32>
 80064d8:	0599      	lsls	r1, r3, #22
 80064da:	d402      	bmi.n	80064e2 <_fflush_r+0x32>
 80064dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064de:	f7fe fee4 	bl	80052aa <__retarget_lock_acquire_recursive>
 80064e2:	4628      	mov	r0, r5
 80064e4:	4621      	mov	r1, r4
 80064e6:	f7ff ff5d 	bl	80063a4 <__sflush_r>
 80064ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064ec:	07da      	lsls	r2, r3, #31
 80064ee:	4605      	mov	r5, r0
 80064f0:	d4e4      	bmi.n	80064bc <_fflush_r+0xc>
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	059b      	lsls	r3, r3, #22
 80064f6:	d4e1      	bmi.n	80064bc <_fflush_r+0xc>
 80064f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064fa:	f7fe fed7 	bl	80052ac <__retarget_lock_release_recursive>
 80064fe:	e7dd      	b.n	80064bc <_fflush_r+0xc>

08006500 <__malloc_lock>:
 8006500:	4801      	ldr	r0, [pc, #4]	; (8006508 <__malloc_lock+0x8>)
 8006502:	f7fe bed2 	b.w	80052aa <__retarget_lock_acquire_recursive>
 8006506:	bf00      	nop
 8006508:	20000470 	.word	0x20000470

0800650c <__malloc_unlock>:
 800650c:	4801      	ldr	r0, [pc, #4]	; (8006514 <__malloc_unlock+0x8>)
 800650e:	f7fe becd 	b.w	80052ac <__retarget_lock_release_recursive>
 8006512:	bf00      	nop
 8006514:	20000470 	.word	0x20000470

08006518 <_Balloc>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	69c6      	ldr	r6, [r0, #28]
 800651c:	4604      	mov	r4, r0
 800651e:	460d      	mov	r5, r1
 8006520:	b976      	cbnz	r6, 8006540 <_Balloc+0x28>
 8006522:	2010      	movs	r0, #16
 8006524:	f7ff fe96 	bl	8006254 <malloc>
 8006528:	4602      	mov	r2, r0
 800652a:	61e0      	str	r0, [r4, #28]
 800652c:	b920      	cbnz	r0, 8006538 <_Balloc+0x20>
 800652e:	4b18      	ldr	r3, [pc, #96]	; (8006590 <_Balloc+0x78>)
 8006530:	4818      	ldr	r0, [pc, #96]	; (8006594 <_Balloc+0x7c>)
 8006532:	216b      	movs	r1, #107	; 0x6b
 8006534:	f000 fc5c 	bl	8006df0 <__assert_func>
 8006538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800653c:	6006      	str	r6, [r0, #0]
 800653e:	60c6      	str	r6, [r0, #12]
 8006540:	69e6      	ldr	r6, [r4, #28]
 8006542:	68f3      	ldr	r3, [r6, #12]
 8006544:	b183      	cbz	r3, 8006568 <_Balloc+0x50>
 8006546:	69e3      	ldr	r3, [r4, #28]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800654e:	b9b8      	cbnz	r0, 8006580 <_Balloc+0x68>
 8006550:	2101      	movs	r1, #1
 8006552:	fa01 f605 	lsl.w	r6, r1, r5
 8006556:	1d72      	adds	r2, r6, #5
 8006558:	0092      	lsls	r2, r2, #2
 800655a:	4620      	mov	r0, r4
 800655c:	f000 fc66 	bl	8006e2c <_calloc_r>
 8006560:	b160      	cbz	r0, 800657c <_Balloc+0x64>
 8006562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006566:	e00e      	b.n	8006586 <_Balloc+0x6e>
 8006568:	2221      	movs	r2, #33	; 0x21
 800656a:	2104      	movs	r1, #4
 800656c:	4620      	mov	r0, r4
 800656e:	f000 fc5d 	bl	8006e2c <_calloc_r>
 8006572:	69e3      	ldr	r3, [r4, #28]
 8006574:	60f0      	str	r0, [r6, #12]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e4      	bne.n	8006546 <_Balloc+0x2e>
 800657c:	2000      	movs	r0, #0
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	6802      	ldr	r2, [r0, #0]
 8006582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006586:	2300      	movs	r3, #0
 8006588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800658c:	e7f7      	b.n	800657e <_Balloc+0x66>
 800658e:	bf00      	nop
 8006590:	0800755d 	.word	0x0800755d
 8006594:	080075ee 	.word	0x080075ee

08006598 <_Bfree>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	69c6      	ldr	r6, [r0, #28]
 800659c:	4605      	mov	r5, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	b976      	cbnz	r6, 80065c0 <_Bfree+0x28>
 80065a2:	2010      	movs	r0, #16
 80065a4:	f7ff fe56 	bl	8006254 <malloc>
 80065a8:	4602      	mov	r2, r0
 80065aa:	61e8      	str	r0, [r5, #28]
 80065ac:	b920      	cbnz	r0, 80065b8 <_Bfree+0x20>
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <_Bfree+0x3c>)
 80065b0:	4809      	ldr	r0, [pc, #36]	; (80065d8 <_Bfree+0x40>)
 80065b2:	218f      	movs	r1, #143	; 0x8f
 80065b4:	f000 fc1c 	bl	8006df0 <__assert_func>
 80065b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065bc:	6006      	str	r6, [r0, #0]
 80065be:	60c6      	str	r6, [r0, #12]
 80065c0:	b13c      	cbz	r4, 80065d2 <_Bfree+0x3a>
 80065c2:	69eb      	ldr	r3, [r5, #28]
 80065c4:	6862      	ldr	r2, [r4, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065cc:	6021      	str	r1, [r4, #0]
 80065ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
 80065d4:	0800755d 	.word	0x0800755d
 80065d8:	080075ee 	.word	0x080075ee

080065dc <__multadd>:
 80065dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e0:	690d      	ldr	r5, [r1, #16]
 80065e2:	4607      	mov	r7, r0
 80065e4:	460c      	mov	r4, r1
 80065e6:	461e      	mov	r6, r3
 80065e8:	f101 0c14 	add.w	ip, r1, #20
 80065ec:	2000      	movs	r0, #0
 80065ee:	f8dc 3000 	ldr.w	r3, [ip]
 80065f2:	b299      	uxth	r1, r3
 80065f4:	fb02 6101 	mla	r1, r2, r1, r6
 80065f8:	0c1e      	lsrs	r6, r3, #16
 80065fa:	0c0b      	lsrs	r3, r1, #16
 80065fc:	fb02 3306 	mla	r3, r2, r6, r3
 8006600:	b289      	uxth	r1, r1
 8006602:	3001      	adds	r0, #1
 8006604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006608:	4285      	cmp	r5, r0
 800660a:	f84c 1b04 	str.w	r1, [ip], #4
 800660e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006612:	dcec      	bgt.n	80065ee <__multadd+0x12>
 8006614:	b30e      	cbz	r6, 800665a <__multadd+0x7e>
 8006616:	68a3      	ldr	r3, [r4, #8]
 8006618:	42ab      	cmp	r3, r5
 800661a:	dc19      	bgt.n	8006650 <__multadd+0x74>
 800661c:	6861      	ldr	r1, [r4, #4]
 800661e:	4638      	mov	r0, r7
 8006620:	3101      	adds	r1, #1
 8006622:	f7ff ff79 	bl	8006518 <_Balloc>
 8006626:	4680      	mov	r8, r0
 8006628:	b928      	cbnz	r0, 8006636 <__multadd+0x5a>
 800662a:	4602      	mov	r2, r0
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <__multadd+0x84>)
 800662e:	480d      	ldr	r0, [pc, #52]	; (8006664 <__multadd+0x88>)
 8006630:	21ba      	movs	r1, #186	; 0xba
 8006632:	f000 fbdd 	bl	8006df0 <__assert_func>
 8006636:	6922      	ldr	r2, [r4, #16]
 8006638:	3202      	adds	r2, #2
 800663a:	f104 010c 	add.w	r1, r4, #12
 800663e:	0092      	lsls	r2, r2, #2
 8006640:	300c      	adds	r0, #12
 8006642:	f000 fbc7 	bl	8006dd4 <memcpy>
 8006646:	4621      	mov	r1, r4
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ffa5 	bl	8006598 <_Bfree>
 800664e:	4644      	mov	r4, r8
 8006650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006654:	3501      	adds	r5, #1
 8006656:	615e      	str	r6, [r3, #20]
 8006658:	6125      	str	r5, [r4, #16]
 800665a:	4620      	mov	r0, r4
 800665c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006660:	080075cc 	.word	0x080075cc
 8006664:	080075ee 	.word	0x080075ee

08006668 <__hi0bits>:
 8006668:	0c03      	lsrs	r3, r0, #16
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	b9d3      	cbnz	r3, 80066a4 <__hi0bits+0x3c>
 800666e:	0400      	lsls	r0, r0, #16
 8006670:	2310      	movs	r3, #16
 8006672:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006676:	bf04      	itt	eq
 8006678:	0200      	lsleq	r0, r0, #8
 800667a:	3308      	addeq	r3, #8
 800667c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006680:	bf04      	itt	eq
 8006682:	0100      	lsleq	r0, r0, #4
 8006684:	3304      	addeq	r3, #4
 8006686:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800668a:	bf04      	itt	eq
 800668c:	0080      	lsleq	r0, r0, #2
 800668e:	3302      	addeq	r3, #2
 8006690:	2800      	cmp	r0, #0
 8006692:	db05      	blt.n	80066a0 <__hi0bits+0x38>
 8006694:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006698:	f103 0301 	add.w	r3, r3, #1
 800669c:	bf08      	it	eq
 800669e:	2320      	moveq	r3, #32
 80066a0:	4618      	mov	r0, r3
 80066a2:	4770      	bx	lr
 80066a4:	2300      	movs	r3, #0
 80066a6:	e7e4      	b.n	8006672 <__hi0bits+0xa>

080066a8 <__lo0bits>:
 80066a8:	6803      	ldr	r3, [r0, #0]
 80066aa:	f013 0207 	ands.w	r2, r3, #7
 80066ae:	d00c      	beq.n	80066ca <__lo0bits+0x22>
 80066b0:	07d9      	lsls	r1, r3, #31
 80066b2:	d422      	bmi.n	80066fa <__lo0bits+0x52>
 80066b4:	079a      	lsls	r2, r3, #30
 80066b6:	bf49      	itett	mi
 80066b8:	085b      	lsrmi	r3, r3, #1
 80066ba:	089b      	lsrpl	r3, r3, #2
 80066bc:	6003      	strmi	r3, [r0, #0]
 80066be:	2201      	movmi	r2, #1
 80066c0:	bf5c      	itt	pl
 80066c2:	6003      	strpl	r3, [r0, #0]
 80066c4:	2202      	movpl	r2, #2
 80066c6:	4610      	mov	r0, r2
 80066c8:	4770      	bx	lr
 80066ca:	b299      	uxth	r1, r3
 80066cc:	b909      	cbnz	r1, 80066d2 <__lo0bits+0x2a>
 80066ce:	0c1b      	lsrs	r3, r3, #16
 80066d0:	2210      	movs	r2, #16
 80066d2:	b2d9      	uxtb	r1, r3
 80066d4:	b909      	cbnz	r1, 80066da <__lo0bits+0x32>
 80066d6:	3208      	adds	r2, #8
 80066d8:	0a1b      	lsrs	r3, r3, #8
 80066da:	0719      	lsls	r1, r3, #28
 80066dc:	bf04      	itt	eq
 80066de:	091b      	lsreq	r3, r3, #4
 80066e0:	3204      	addeq	r2, #4
 80066e2:	0799      	lsls	r1, r3, #30
 80066e4:	bf04      	itt	eq
 80066e6:	089b      	lsreq	r3, r3, #2
 80066e8:	3202      	addeq	r2, #2
 80066ea:	07d9      	lsls	r1, r3, #31
 80066ec:	d403      	bmi.n	80066f6 <__lo0bits+0x4e>
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	f102 0201 	add.w	r2, r2, #1
 80066f4:	d003      	beq.n	80066fe <__lo0bits+0x56>
 80066f6:	6003      	str	r3, [r0, #0]
 80066f8:	e7e5      	b.n	80066c6 <__lo0bits+0x1e>
 80066fa:	2200      	movs	r2, #0
 80066fc:	e7e3      	b.n	80066c6 <__lo0bits+0x1e>
 80066fe:	2220      	movs	r2, #32
 8006700:	e7e1      	b.n	80066c6 <__lo0bits+0x1e>
	...

08006704 <__i2b>:
 8006704:	b510      	push	{r4, lr}
 8006706:	460c      	mov	r4, r1
 8006708:	2101      	movs	r1, #1
 800670a:	f7ff ff05 	bl	8006518 <_Balloc>
 800670e:	4602      	mov	r2, r0
 8006710:	b928      	cbnz	r0, 800671e <__i2b+0x1a>
 8006712:	4b05      	ldr	r3, [pc, #20]	; (8006728 <__i2b+0x24>)
 8006714:	4805      	ldr	r0, [pc, #20]	; (800672c <__i2b+0x28>)
 8006716:	f240 1145 	movw	r1, #325	; 0x145
 800671a:	f000 fb69 	bl	8006df0 <__assert_func>
 800671e:	2301      	movs	r3, #1
 8006720:	6144      	str	r4, [r0, #20]
 8006722:	6103      	str	r3, [r0, #16]
 8006724:	bd10      	pop	{r4, pc}
 8006726:	bf00      	nop
 8006728:	080075cc 	.word	0x080075cc
 800672c:	080075ee 	.word	0x080075ee

08006730 <__multiply>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	4691      	mov	r9, r2
 8006736:	690a      	ldr	r2, [r1, #16]
 8006738:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800673c:	429a      	cmp	r2, r3
 800673e:	bfb8      	it	lt
 8006740:	460b      	movlt	r3, r1
 8006742:	460c      	mov	r4, r1
 8006744:	bfbc      	itt	lt
 8006746:	464c      	movlt	r4, r9
 8006748:	4699      	movlt	r9, r3
 800674a:	6927      	ldr	r7, [r4, #16]
 800674c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006750:	68a3      	ldr	r3, [r4, #8]
 8006752:	6861      	ldr	r1, [r4, #4]
 8006754:	eb07 060a 	add.w	r6, r7, sl
 8006758:	42b3      	cmp	r3, r6
 800675a:	b085      	sub	sp, #20
 800675c:	bfb8      	it	lt
 800675e:	3101      	addlt	r1, #1
 8006760:	f7ff feda 	bl	8006518 <_Balloc>
 8006764:	b930      	cbnz	r0, 8006774 <__multiply+0x44>
 8006766:	4602      	mov	r2, r0
 8006768:	4b44      	ldr	r3, [pc, #272]	; (800687c <__multiply+0x14c>)
 800676a:	4845      	ldr	r0, [pc, #276]	; (8006880 <__multiply+0x150>)
 800676c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006770:	f000 fb3e 	bl	8006df0 <__assert_func>
 8006774:	f100 0514 	add.w	r5, r0, #20
 8006778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800677c:	462b      	mov	r3, r5
 800677e:	2200      	movs	r2, #0
 8006780:	4543      	cmp	r3, r8
 8006782:	d321      	bcc.n	80067c8 <__multiply+0x98>
 8006784:	f104 0314 	add.w	r3, r4, #20
 8006788:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800678c:	f109 0314 	add.w	r3, r9, #20
 8006790:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006794:	9202      	str	r2, [sp, #8]
 8006796:	1b3a      	subs	r2, r7, r4
 8006798:	3a15      	subs	r2, #21
 800679a:	f022 0203 	bic.w	r2, r2, #3
 800679e:	3204      	adds	r2, #4
 80067a0:	f104 0115 	add.w	r1, r4, #21
 80067a4:	428f      	cmp	r7, r1
 80067a6:	bf38      	it	cc
 80067a8:	2204      	movcc	r2, #4
 80067aa:	9201      	str	r2, [sp, #4]
 80067ac:	9a02      	ldr	r2, [sp, #8]
 80067ae:	9303      	str	r3, [sp, #12]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d80c      	bhi.n	80067ce <__multiply+0x9e>
 80067b4:	2e00      	cmp	r6, #0
 80067b6:	dd03      	ble.n	80067c0 <__multiply+0x90>
 80067b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d05b      	beq.n	8006878 <__multiply+0x148>
 80067c0:	6106      	str	r6, [r0, #16]
 80067c2:	b005      	add	sp, #20
 80067c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c8:	f843 2b04 	str.w	r2, [r3], #4
 80067cc:	e7d8      	b.n	8006780 <__multiply+0x50>
 80067ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80067d2:	f1ba 0f00 	cmp.w	sl, #0
 80067d6:	d024      	beq.n	8006822 <__multiply+0xf2>
 80067d8:	f104 0e14 	add.w	lr, r4, #20
 80067dc:	46a9      	mov	r9, r5
 80067de:	f04f 0c00 	mov.w	ip, #0
 80067e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80067e6:	f8d9 1000 	ldr.w	r1, [r9]
 80067ea:	fa1f fb82 	uxth.w	fp, r2
 80067ee:	b289      	uxth	r1, r1
 80067f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80067f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80067f8:	f8d9 2000 	ldr.w	r2, [r9]
 80067fc:	4461      	add	r1, ip
 80067fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006802:	fb0a c20b 	mla	r2, sl, fp, ip
 8006806:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800680a:	b289      	uxth	r1, r1
 800680c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006810:	4577      	cmp	r7, lr
 8006812:	f849 1b04 	str.w	r1, [r9], #4
 8006816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800681a:	d8e2      	bhi.n	80067e2 <__multiply+0xb2>
 800681c:	9a01      	ldr	r2, [sp, #4]
 800681e:	f845 c002 	str.w	ip, [r5, r2]
 8006822:	9a03      	ldr	r2, [sp, #12]
 8006824:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006828:	3304      	adds	r3, #4
 800682a:	f1b9 0f00 	cmp.w	r9, #0
 800682e:	d021      	beq.n	8006874 <__multiply+0x144>
 8006830:	6829      	ldr	r1, [r5, #0]
 8006832:	f104 0c14 	add.w	ip, r4, #20
 8006836:	46ae      	mov	lr, r5
 8006838:	f04f 0a00 	mov.w	sl, #0
 800683c:	f8bc b000 	ldrh.w	fp, [ip]
 8006840:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006844:	fb09 220b 	mla	r2, r9, fp, r2
 8006848:	4452      	add	r2, sl
 800684a:	b289      	uxth	r1, r1
 800684c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006850:	f84e 1b04 	str.w	r1, [lr], #4
 8006854:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006858:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800685c:	f8be 1000 	ldrh.w	r1, [lr]
 8006860:	fb09 110a 	mla	r1, r9, sl, r1
 8006864:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006868:	4567      	cmp	r7, ip
 800686a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800686e:	d8e5      	bhi.n	800683c <__multiply+0x10c>
 8006870:	9a01      	ldr	r2, [sp, #4]
 8006872:	50a9      	str	r1, [r5, r2]
 8006874:	3504      	adds	r5, #4
 8006876:	e799      	b.n	80067ac <__multiply+0x7c>
 8006878:	3e01      	subs	r6, #1
 800687a:	e79b      	b.n	80067b4 <__multiply+0x84>
 800687c:	080075cc 	.word	0x080075cc
 8006880:	080075ee 	.word	0x080075ee

08006884 <__pow5mult>:
 8006884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006888:	4615      	mov	r5, r2
 800688a:	f012 0203 	ands.w	r2, r2, #3
 800688e:	4606      	mov	r6, r0
 8006890:	460f      	mov	r7, r1
 8006892:	d007      	beq.n	80068a4 <__pow5mult+0x20>
 8006894:	4c25      	ldr	r4, [pc, #148]	; (800692c <__pow5mult+0xa8>)
 8006896:	3a01      	subs	r2, #1
 8006898:	2300      	movs	r3, #0
 800689a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800689e:	f7ff fe9d 	bl	80065dc <__multadd>
 80068a2:	4607      	mov	r7, r0
 80068a4:	10ad      	asrs	r5, r5, #2
 80068a6:	d03d      	beq.n	8006924 <__pow5mult+0xa0>
 80068a8:	69f4      	ldr	r4, [r6, #28]
 80068aa:	b97c      	cbnz	r4, 80068cc <__pow5mult+0x48>
 80068ac:	2010      	movs	r0, #16
 80068ae:	f7ff fcd1 	bl	8006254 <malloc>
 80068b2:	4602      	mov	r2, r0
 80068b4:	61f0      	str	r0, [r6, #28]
 80068b6:	b928      	cbnz	r0, 80068c4 <__pow5mult+0x40>
 80068b8:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <__pow5mult+0xac>)
 80068ba:	481e      	ldr	r0, [pc, #120]	; (8006934 <__pow5mult+0xb0>)
 80068bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80068c0:	f000 fa96 	bl	8006df0 <__assert_func>
 80068c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068c8:	6004      	str	r4, [r0, #0]
 80068ca:	60c4      	str	r4, [r0, #12]
 80068cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80068d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068d4:	b94c      	cbnz	r4, 80068ea <__pow5mult+0x66>
 80068d6:	f240 2171 	movw	r1, #625	; 0x271
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff ff12 	bl	8006704 <__i2b>
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80068e6:	4604      	mov	r4, r0
 80068e8:	6003      	str	r3, [r0, #0]
 80068ea:	f04f 0900 	mov.w	r9, #0
 80068ee:	07eb      	lsls	r3, r5, #31
 80068f0:	d50a      	bpl.n	8006908 <__pow5mult+0x84>
 80068f2:	4639      	mov	r1, r7
 80068f4:	4622      	mov	r2, r4
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7ff ff1a 	bl	8006730 <__multiply>
 80068fc:	4639      	mov	r1, r7
 80068fe:	4680      	mov	r8, r0
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff fe49 	bl	8006598 <_Bfree>
 8006906:	4647      	mov	r7, r8
 8006908:	106d      	asrs	r5, r5, #1
 800690a:	d00b      	beq.n	8006924 <__pow5mult+0xa0>
 800690c:	6820      	ldr	r0, [r4, #0]
 800690e:	b938      	cbnz	r0, 8006920 <__pow5mult+0x9c>
 8006910:	4622      	mov	r2, r4
 8006912:	4621      	mov	r1, r4
 8006914:	4630      	mov	r0, r6
 8006916:	f7ff ff0b 	bl	8006730 <__multiply>
 800691a:	6020      	str	r0, [r4, #0]
 800691c:	f8c0 9000 	str.w	r9, [r0]
 8006920:	4604      	mov	r4, r0
 8006922:	e7e4      	b.n	80068ee <__pow5mult+0x6a>
 8006924:	4638      	mov	r0, r7
 8006926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800692a:	bf00      	nop
 800692c:	08007738 	.word	0x08007738
 8006930:	0800755d 	.word	0x0800755d
 8006934:	080075ee 	.word	0x080075ee

08006938 <__lshift>:
 8006938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693c:	460c      	mov	r4, r1
 800693e:	6849      	ldr	r1, [r1, #4]
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006946:	68a3      	ldr	r3, [r4, #8]
 8006948:	4607      	mov	r7, r0
 800694a:	4691      	mov	r9, r2
 800694c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006950:	f108 0601 	add.w	r6, r8, #1
 8006954:	42b3      	cmp	r3, r6
 8006956:	db0b      	blt.n	8006970 <__lshift+0x38>
 8006958:	4638      	mov	r0, r7
 800695a:	f7ff fddd 	bl	8006518 <_Balloc>
 800695e:	4605      	mov	r5, r0
 8006960:	b948      	cbnz	r0, 8006976 <__lshift+0x3e>
 8006962:	4602      	mov	r2, r0
 8006964:	4b28      	ldr	r3, [pc, #160]	; (8006a08 <__lshift+0xd0>)
 8006966:	4829      	ldr	r0, [pc, #164]	; (8006a0c <__lshift+0xd4>)
 8006968:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800696c:	f000 fa40 	bl	8006df0 <__assert_func>
 8006970:	3101      	adds	r1, #1
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	e7ee      	b.n	8006954 <__lshift+0x1c>
 8006976:	2300      	movs	r3, #0
 8006978:	f100 0114 	add.w	r1, r0, #20
 800697c:	f100 0210 	add.w	r2, r0, #16
 8006980:	4618      	mov	r0, r3
 8006982:	4553      	cmp	r3, sl
 8006984:	db33      	blt.n	80069ee <__lshift+0xb6>
 8006986:	6920      	ldr	r0, [r4, #16]
 8006988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800698c:	f104 0314 	add.w	r3, r4, #20
 8006990:	f019 091f 	ands.w	r9, r9, #31
 8006994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800699c:	d02b      	beq.n	80069f6 <__lshift+0xbe>
 800699e:	f1c9 0e20 	rsb	lr, r9, #32
 80069a2:	468a      	mov	sl, r1
 80069a4:	2200      	movs	r2, #0
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	fa00 f009 	lsl.w	r0, r0, r9
 80069ac:	4310      	orrs	r0, r2
 80069ae:	f84a 0b04 	str.w	r0, [sl], #4
 80069b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b6:	459c      	cmp	ip, r3
 80069b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80069bc:	d8f3      	bhi.n	80069a6 <__lshift+0x6e>
 80069be:	ebac 0304 	sub.w	r3, ip, r4
 80069c2:	3b15      	subs	r3, #21
 80069c4:	f023 0303 	bic.w	r3, r3, #3
 80069c8:	3304      	adds	r3, #4
 80069ca:	f104 0015 	add.w	r0, r4, #21
 80069ce:	4584      	cmp	ip, r0
 80069d0:	bf38      	it	cc
 80069d2:	2304      	movcc	r3, #4
 80069d4:	50ca      	str	r2, [r1, r3]
 80069d6:	b10a      	cbz	r2, 80069dc <__lshift+0xa4>
 80069d8:	f108 0602 	add.w	r6, r8, #2
 80069dc:	3e01      	subs	r6, #1
 80069de:	4638      	mov	r0, r7
 80069e0:	612e      	str	r6, [r5, #16]
 80069e2:	4621      	mov	r1, r4
 80069e4:	f7ff fdd8 	bl	8006598 <_Bfree>
 80069e8:	4628      	mov	r0, r5
 80069ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80069f2:	3301      	adds	r3, #1
 80069f4:	e7c5      	b.n	8006982 <__lshift+0x4a>
 80069f6:	3904      	subs	r1, #4
 80069f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a00:	459c      	cmp	ip, r3
 8006a02:	d8f9      	bhi.n	80069f8 <__lshift+0xc0>
 8006a04:	e7ea      	b.n	80069dc <__lshift+0xa4>
 8006a06:	bf00      	nop
 8006a08:	080075cc 	.word	0x080075cc
 8006a0c:	080075ee 	.word	0x080075ee

08006a10 <__mcmp>:
 8006a10:	b530      	push	{r4, r5, lr}
 8006a12:	6902      	ldr	r2, [r0, #16]
 8006a14:	690c      	ldr	r4, [r1, #16]
 8006a16:	1b12      	subs	r2, r2, r4
 8006a18:	d10e      	bne.n	8006a38 <__mcmp+0x28>
 8006a1a:	f100 0314 	add.w	r3, r0, #20
 8006a1e:	3114      	adds	r1, #20
 8006a20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a30:	42a5      	cmp	r5, r4
 8006a32:	d003      	beq.n	8006a3c <__mcmp+0x2c>
 8006a34:	d305      	bcc.n	8006a42 <__mcmp+0x32>
 8006a36:	2201      	movs	r2, #1
 8006a38:	4610      	mov	r0, r2
 8006a3a:	bd30      	pop	{r4, r5, pc}
 8006a3c:	4283      	cmp	r3, r0
 8006a3e:	d3f3      	bcc.n	8006a28 <__mcmp+0x18>
 8006a40:	e7fa      	b.n	8006a38 <__mcmp+0x28>
 8006a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a46:	e7f7      	b.n	8006a38 <__mcmp+0x28>

08006a48 <__mdiff>:
 8006a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	4606      	mov	r6, r0
 8006a50:	4611      	mov	r1, r2
 8006a52:	4620      	mov	r0, r4
 8006a54:	4690      	mov	r8, r2
 8006a56:	f7ff ffdb 	bl	8006a10 <__mcmp>
 8006a5a:	1e05      	subs	r5, r0, #0
 8006a5c:	d110      	bne.n	8006a80 <__mdiff+0x38>
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4630      	mov	r0, r6
 8006a62:	f7ff fd59 	bl	8006518 <_Balloc>
 8006a66:	b930      	cbnz	r0, 8006a76 <__mdiff+0x2e>
 8006a68:	4b3a      	ldr	r3, [pc, #232]	; (8006b54 <__mdiff+0x10c>)
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	f240 2137 	movw	r1, #567	; 0x237
 8006a70:	4839      	ldr	r0, [pc, #228]	; (8006b58 <__mdiff+0x110>)
 8006a72:	f000 f9bd 	bl	8006df0 <__assert_func>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a80:	bfa4      	itt	ge
 8006a82:	4643      	movge	r3, r8
 8006a84:	46a0      	movge	r8, r4
 8006a86:	4630      	mov	r0, r6
 8006a88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a8c:	bfa6      	itte	ge
 8006a8e:	461c      	movge	r4, r3
 8006a90:	2500      	movge	r5, #0
 8006a92:	2501      	movlt	r5, #1
 8006a94:	f7ff fd40 	bl	8006518 <_Balloc>
 8006a98:	b920      	cbnz	r0, 8006aa4 <__mdiff+0x5c>
 8006a9a:	4b2e      	ldr	r3, [pc, #184]	; (8006b54 <__mdiff+0x10c>)
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	f240 2145 	movw	r1, #581	; 0x245
 8006aa2:	e7e5      	b.n	8006a70 <__mdiff+0x28>
 8006aa4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006aa8:	6926      	ldr	r6, [r4, #16]
 8006aaa:	60c5      	str	r5, [r0, #12]
 8006aac:	f104 0914 	add.w	r9, r4, #20
 8006ab0:	f108 0514 	add.w	r5, r8, #20
 8006ab4:	f100 0e14 	add.w	lr, r0, #20
 8006ab8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006abc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ac0:	f108 0210 	add.w	r2, r8, #16
 8006ac4:	46f2      	mov	sl, lr
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006acc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ad0:	fa11 f88b 	uxtah	r8, r1, fp
 8006ad4:	b299      	uxth	r1, r3
 8006ad6:	0c1b      	lsrs	r3, r3, #16
 8006ad8:	eba8 0801 	sub.w	r8, r8, r1
 8006adc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ae0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ae4:	fa1f f888 	uxth.w	r8, r8
 8006ae8:	1419      	asrs	r1, r3, #16
 8006aea:	454e      	cmp	r6, r9
 8006aec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006af0:	f84a 3b04 	str.w	r3, [sl], #4
 8006af4:	d8e8      	bhi.n	8006ac8 <__mdiff+0x80>
 8006af6:	1b33      	subs	r3, r6, r4
 8006af8:	3b15      	subs	r3, #21
 8006afa:	f023 0303 	bic.w	r3, r3, #3
 8006afe:	3304      	adds	r3, #4
 8006b00:	3415      	adds	r4, #21
 8006b02:	42a6      	cmp	r6, r4
 8006b04:	bf38      	it	cc
 8006b06:	2304      	movcc	r3, #4
 8006b08:	441d      	add	r5, r3
 8006b0a:	4473      	add	r3, lr
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	462e      	mov	r6, r5
 8006b10:	4566      	cmp	r6, ip
 8006b12:	d30e      	bcc.n	8006b32 <__mdiff+0xea>
 8006b14:	f10c 0203 	add.w	r2, ip, #3
 8006b18:	1b52      	subs	r2, r2, r5
 8006b1a:	f022 0203 	bic.w	r2, r2, #3
 8006b1e:	3d03      	subs	r5, #3
 8006b20:	45ac      	cmp	ip, r5
 8006b22:	bf38      	it	cc
 8006b24:	2200      	movcc	r2, #0
 8006b26:	4413      	add	r3, r2
 8006b28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006b2c:	b17a      	cbz	r2, 8006b4e <__mdiff+0x106>
 8006b2e:	6107      	str	r7, [r0, #16]
 8006b30:	e7a4      	b.n	8006a7c <__mdiff+0x34>
 8006b32:	f856 8b04 	ldr.w	r8, [r6], #4
 8006b36:	fa11 f288 	uxtah	r2, r1, r8
 8006b3a:	1414      	asrs	r4, r2, #16
 8006b3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b40:	b292      	uxth	r2, r2
 8006b42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b46:	f84e 2b04 	str.w	r2, [lr], #4
 8006b4a:	1421      	asrs	r1, r4, #16
 8006b4c:	e7e0      	b.n	8006b10 <__mdiff+0xc8>
 8006b4e:	3f01      	subs	r7, #1
 8006b50:	e7ea      	b.n	8006b28 <__mdiff+0xe0>
 8006b52:	bf00      	nop
 8006b54:	080075cc 	.word	0x080075cc
 8006b58:	080075ee 	.word	0x080075ee

08006b5c <__d2b>:
 8006b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b60:	460f      	mov	r7, r1
 8006b62:	2101      	movs	r1, #1
 8006b64:	ec59 8b10 	vmov	r8, r9, d0
 8006b68:	4616      	mov	r6, r2
 8006b6a:	f7ff fcd5 	bl	8006518 <_Balloc>
 8006b6e:	4604      	mov	r4, r0
 8006b70:	b930      	cbnz	r0, 8006b80 <__d2b+0x24>
 8006b72:	4602      	mov	r2, r0
 8006b74:	4b24      	ldr	r3, [pc, #144]	; (8006c08 <__d2b+0xac>)
 8006b76:	4825      	ldr	r0, [pc, #148]	; (8006c0c <__d2b+0xb0>)
 8006b78:	f240 310f 	movw	r1, #783	; 0x30f
 8006b7c:	f000 f938 	bl	8006df0 <__assert_func>
 8006b80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b88:	bb2d      	cbnz	r5, 8006bd6 <__d2b+0x7a>
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	f1b8 0300 	subs.w	r3, r8, #0
 8006b90:	d026      	beq.n	8006be0 <__d2b+0x84>
 8006b92:	4668      	mov	r0, sp
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	f7ff fd87 	bl	80066a8 <__lo0bits>
 8006b9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b9e:	b1e8      	cbz	r0, 8006bdc <__d2b+0x80>
 8006ba0:	f1c0 0320 	rsb	r3, r0, #32
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	40c2      	lsrs	r2, r0
 8006bac:	6163      	str	r3, [r4, #20]
 8006bae:	9201      	str	r2, [sp, #4]
 8006bb0:	9b01      	ldr	r3, [sp, #4]
 8006bb2:	61a3      	str	r3, [r4, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	bf14      	ite	ne
 8006bb8:	2202      	movne	r2, #2
 8006bba:	2201      	moveq	r2, #1
 8006bbc:	6122      	str	r2, [r4, #16]
 8006bbe:	b1bd      	cbz	r5, 8006bf0 <__d2b+0x94>
 8006bc0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006bc4:	4405      	add	r5, r0
 8006bc6:	603d      	str	r5, [r7, #0]
 8006bc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006bcc:	6030      	str	r0, [r6, #0]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	b003      	add	sp, #12
 8006bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bda:	e7d6      	b.n	8006b8a <__d2b+0x2e>
 8006bdc:	6161      	str	r1, [r4, #20]
 8006bde:	e7e7      	b.n	8006bb0 <__d2b+0x54>
 8006be0:	a801      	add	r0, sp, #4
 8006be2:	f7ff fd61 	bl	80066a8 <__lo0bits>
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	6163      	str	r3, [r4, #20]
 8006bea:	3020      	adds	r0, #32
 8006bec:	2201      	movs	r2, #1
 8006bee:	e7e5      	b.n	8006bbc <__d2b+0x60>
 8006bf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006bf8:	6038      	str	r0, [r7, #0]
 8006bfa:	6918      	ldr	r0, [r3, #16]
 8006bfc:	f7ff fd34 	bl	8006668 <__hi0bits>
 8006c00:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c04:	e7e2      	b.n	8006bcc <__d2b+0x70>
 8006c06:	bf00      	nop
 8006c08:	080075cc 	.word	0x080075cc
 8006c0c:	080075ee 	.word	0x080075ee

08006c10 <__sread>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	460c      	mov	r4, r1
 8006c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c18:	f000 f8a8 	bl	8006d6c <_read_r>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	bfab      	itete	ge
 8006c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c22:	89a3      	ldrhlt	r3, [r4, #12]
 8006c24:	181b      	addge	r3, r3, r0
 8006c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c2a:	bfac      	ite	ge
 8006c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c2e:	81a3      	strhlt	r3, [r4, #12]
 8006c30:	bd10      	pop	{r4, pc}

08006c32 <__swrite>:
 8006c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c36:	461f      	mov	r7, r3
 8006c38:	898b      	ldrh	r3, [r1, #12]
 8006c3a:	05db      	lsls	r3, r3, #23
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	4616      	mov	r6, r2
 8006c42:	d505      	bpl.n	8006c50 <__swrite+0x1e>
 8006c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c48:	2302      	movs	r3, #2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f000 f87c 	bl	8006d48 <_lseek_r>
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	463b      	mov	r3, r7
 8006c60:	4628      	mov	r0, r5
 8006c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c66:	f000 b8a3 	b.w	8006db0 <_write_r>

08006c6a <__sseek>:
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c72:	f000 f869 	bl	8006d48 <_lseek_r>
 8006c76:	1c43      	adds	r3, r0, #1
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	bf15      	itete	ne
 8006c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c86:	81a3      	strheq	r3, [r4, #12]
 8006c88:	bf18      	it	ne
 8006c8a:	81a3      	strhne	r3, [r4, #12]
 8006c8c:	bd10      	pop	{r4, pc}

08006c8e <__sclose>:
 8006c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c92:	f000 b849 	b.w	8006d28 <_close_r>

08006c96 <_realloc_r>:
 8006c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9a:	4680      	mov	r8, r0
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	460e      	mov	r6, r1
 8006ca0:	b921      	cbnz	r1, 8006cac <_realloc_r+0x16>
 8006ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	f7ff bafc 	b.w	80062a4 <_malloc_r>
 8006cac:	b92a      	cbnz	r2, 8006cba <_realloc_r+0x24>
 8006cae:	f000 f8d3 	bl	8006e58 <_free_r>
 8006cb2:	4625      	mov	r5, r4
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cba:	f000 f92b 	bl	8006f14 <_malloc_usable_size_r>
 8006cbe:	4284      	cmp	r4, r0
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	d802      	bhi.n	8006cca <_realloc_r+0x34>
 8006cc4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006cc8:	d812      	bhi.n	8006cf0 <_realloc_r+0x5a>
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4640      	mov	r0, r8
 8006cce:	f7ff fae9 	bl	80062a4 <_malloc_r>
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d0ed      	beq.n	8006cb4 <_realloc_r+0x1e>
 8006cd8:	42bc      	cmp	r4, r7
 8006cda:	4622      	mov	r2, r4
 8006cdc:	4631      	mov	r1, r6
 8006cde:	bf28      	it	cs
 8006ce0:	463a      	movcs	r2, r7
 8006ce2:	f000 f877 	bl	8006dd4 <memcpy>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4640      	mov	r0, r8
 8006cea:	f000 f8b5 	bl	8006e58 <_free_r>
 8006cee:	e7e1      	b.n	8006cb4 <_realloc_r+0x1e>
 8006cf0:	4635      	mov	r5, r6
 8006cf2:	e7df      	b.n	8006cb4 <_realloc_r+0x1e>

08006cf4 <memmove>:
 8006cf4:	4288      	cmp	r0, r1
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	eb01 0402 	add.w	r4, r1, r2
 8006cfc:	d902      	bls.n	8006d04 <memmove+0x10>
 8006cfe:	4284      	cmp	r4, r0
 8006d00:	4623      	mov	r3, r4
 8006d02:	d807      	bhi.n	8006d14 <memmove+0x20>
 8006d04:	1e43      	subs	r3, r0, #1
 8006d06:	42a1      	cmp	r1, r4
 8006d08:	d008      	beq.n	8006d1c <memmove+0x28>
 8006d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d12:	e7f8      	b.n	8006d06 <memmove+0x12>
 8006d14:	4402      	add	r2, r0
 8006d16:	4601      	mov	r1, r0
 8006d18:	428a      	cmp	r2, r1
 8006d1a:	d100      	bne.n	8006d1e <memmove+0x2a>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d26:	e7f7      	b.n	8006d18 <memmove+0x24>

08006d28 <_close_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d06      	ldr	r5, [pc, #24]	; (8006d44 <_close_r+0x1c>)
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	602b      	str	r3, [r5, #0]
 8006d34:	f7fa fd8d 	bl	8001852 <_close>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d102      	bne.n	8006d42 <_close_r+0x1a>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	b103      	cbz	r3, 8006d42 <_close_r+0x1a>
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	2000047c 	.word	0x2000047c

08006d48 <_lseek_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d07      	ldr	r5, [pc, #28]	; (8006d68 <_lseek_r+0x20>)
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	4608      	mov	r0, r1
 8006d50:	4611      	mov	r1, r2
 8006d52:	2200      	movs	r2, #0
 8006d54:	602a      	str	r2, [r5, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	f7fa fda2 	bl	80018a0 <_lseek>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_lseek_r+0x1e>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_lseek_r+0x1e>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	2000047c 	.word	0x2000047c

08006d6c <_read_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d07      	ldr	r5, [pc, #28]	; (8006d8c <_read_r+0x20>)
 8006d70:	4604      	mov	r4, r0
 8006d72:	4608      	mov	r0, r1
 8006d74:	4611      	mov	r1, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	602a      	str	r2, [r5, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f7fa fd30 	bl	80017e0 <_read>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_read_r+0x1e>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_read_r+0x1e>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	2000047c 	.word	0x2000047c

08006d90 <_sbrk_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4d06      	ldr	r5, [pc, #24]	; (8006dac <_sbrk_r+0x1c>)
 8006d94:	2300      	movs	r3, #0
 8006d96:	4604      	mov	r4, r0
 8006d98:	4608      	mov	r0, r1
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	f7fa fd8e 	bl	80018bc <_sbrk>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_sbrk_r+0x1a>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_sbrk_r+0x1a>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	2000047c 	.word	0x2000047c

08006db0 <_write_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4d07      	ldr	r5, [pc, #28]	; (8006dd0 <_write_r+0x20>)
 8006db4:	4604      	mov	r4, r0
 8006db6:	4608      	mov	r0, r1
 8006db8:	4611      	mov	r1, r2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	602a      	str	r2, [r5, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f7fa fd2b 	bl	800181a <_write>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d102      	bne.n	8006dce <_write_r+0x1e>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b103      	cbz	r3, 8006dce <_write_r+0x1e>
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	2000047c 	.word	0x2000047c

08006dd4 <memcpy>:
 8006dd4:	440a      	add	r2, r1
 8006dd6:	4291      	cmp	r1, r2
 8006dd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ddc:	d100      	bne.n	8006de0 <memcpy+0xc>
 8006dde:	4770      	bx	lr
 8006de0:	b510      	push	{r4, lr}
 8006de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006de6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dea:	4291      	cmp	r1, r2
 8006dec:	d1f9      	bne.n	8006de2 <memcpy+0xe>
 8006dee:	bd10      	pop	{r4, pc}

08006df0 <__assert_func>:
 8006df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006df2:	4614      	mov	r4, r2
 8006df4:	461a      	mov	r2, r3
 8006df6:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <__assert_func+0x2c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	68d8      	ldr	r0, [r3, #12]
 8006dfe:	b14c      	cbz	r4, 8006e14 <__assert_func+0x24>
 8006e00:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <__assert_func+0x30>)
 8006e02:	9100      	str	r1, [sp, #0]
 8006e04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e08:	4906      	ldr	r1, [pc, #24]	; (8006e24 <__assert_func+0x34>)
 8006e0a:	462b      	mov	r3, r5
 8006e0c:	f000 f88a 	bl	8006f24 <fiprintf>
 8006e10:	f000 f8a7 	bl	8006f62 <abort>
 8006e14:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <__assert_func+0x38>)
 8006e16:	461c      	mov	r4, r3
 8006e18:	e7f3      	b.n	8006e02 <__assert_func+0x12>
 8006e1a:	bf00      	nop
 8006e1c:	20000064 	.word	0x20000064
 8006e20:	0800784f 	.word	0x0800784f
 8006e24:	0800785c 	.word	0x0800785c
 8006e28:	0800788a 	.word	0x0800788a

08006e2c <_calloc_r>:
 8006e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e2e:	fba1 2402 	umull	r2, r4, r1, r2
 8006e32:	b94c      	cbnz	r4, 8006e48 <_calloc_r+0x1c>
 8006e34:	4611      	mov	r1, r2
 8006e36:	9201      	str	r2, [sp, #4]
 8006e38:	f7ff fa34 	bl	80062a4 <_malloc_r>
 8006e3c:	9a01      	ldr	r2, [sp, #4]
 8006e3e:	4605      	mov	r5, r0
 8006e40:	b930      	cbnz	r0, 8006e50 <_calloc_r+0x24>
 8006e42:	4628      	mov	r0, r5
 8006e44:	b003      	add	sp, #12
 8006e46:	bd30      	pop	{r4, r5, pc}
 8006e48:	220c      	movs	r2, #12
 8006e4a:	6002      	str	r2, [r0, #0]
 8006e4c:	2500      	movs	r5, #0
 8006e4e:	e7f8      	b.n	8006e42 <_calloc_r+0x16>
 8006e50:	4621      	mov	r1, r4
 8006e52:	f7fe f9f3 	bl	800523c <memset>
 8006e56:	e7f4      	b.n	8006e42 <_calloc_r+0x16>

08006e58 <_free_r>:
 8006e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e5a:	2900      	cmp	r1, #0
 8006e5c:	d044      	beq.n	8006ee8 <_free_r+0x90>
 8006e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e62:	9001      	str	r0, [sp, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f1a1 0404 	sub.w	r4, r1, #4
 8006e6a:	bfb8      	it	lt
 8006e6c:	18e4      	addlt	r4, r4, r3
 8006e6e:	f7ff fb47 	bl	8006500 <__malloc_lock>
 8006e72:	4a1e      	ldr	r2, [pc, #120]	; (8006eec <_free_r+0x94>)
 8006e74:	9801      	ldr	r0, [sp, #4]
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	b933      	cbnz	r3, 8006e88 <_free_r+0x30>
 8006e7a:	6063      	str	r3, [r4, #4]
 8006e7c:	6014      	str	r4, [r2, #0]
 8006e7e:	b003      	add	sp, #12
 8006e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e84:	f7ff bb42 	b.w	800650c <__malloc_unlock>
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	d908      	bls.n	8006e9e <_free_r+0x46>
 8006e8c:	6825      	ldr	r5, [r4, #0]
 8006e8e:	1961      	adds	r1, r4, r5
 8006e90:	428b      	cmp	r3, r1
 8006e92:	bf01      	itttt	eq
 8006e94:	6819      	ldreq	r1, [r3, #0]
 8006e96:	685b      	ldreq	r3, [r3, #4]
 8006e98:	1949      	addeq	r1, r1, r5
 8006e9a:	6021      	streq	r1, [r4, #0]
 8006e9c:	e7ed      	b.n	8006e7a <_free_r+0x22>
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	b10b      	cbz	r3, 8006ea8 <_free_r+0x50>
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	d9fa      	bls.n	8006e9e <_free_r+0x46>
 8006ea8:	6811      	ldr	r1, [r2, #0]
 8006eaa:	1855      	adds	r5, r2, r1
 8006eac:	42a5      	cmp	r5, r4
 8006eae:	d10b      	bne.n	8006ec8 <_free_r+0x70>
 8006eb0:	6824      	ldr	r4, [r4, #0]
 8006eb2:	4421      	add	r1, r4
 8006eb4:	1854      	adds	r4, r2, r1
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	6011      	str	r1, [r2, #0]
 8006eba:	d1e0      	bne.n	8006e7e <_free_r+0x26>
 8006ebc:	681c      	ldr	r4, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	6053      	str	r3, [r2, #4]
 8006ec2:	440c      	add	r4, r1
 8006ec4:	6014      	str	r4, [r2, #0]
 8006ec6:	e7da      	b.n	8006e7e <_free_r+0x26>
 8006ec8:	d902      	bls.n	8006ed0 <_free_r+0x78>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	6003      	str	r3, [r0, #0]
 8006ece:	e7d6      	b.n	8006e7e <_free_r+0x26>
 8006ed0:	6825      	ldr	r5, [r4, #0]
 8006ed2:	1961      	adds	r1, r4, r5
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	bf04      	itt	eq
 8006ed8:	6819      	ldreq	r1, [r3, #0]
 8006eda:	685b      	ldreq	r3, [r3, #4]
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	bf04      	itt	eq
 8006ee0:	1949      	addeq	r1, r1, r5
 8006ee2:	6021      	streq	r1, [r4, #0]
 8006ee4:	6054      	str	r4, [r2, #4]
 8006ee6:	e7ca      	b.n	8006e7e <_free_r+0x26>
 8006ee8:	b003      	add	sp, #12
 8006eea:	bd30      	pop	{r4, r5, pc}
 8006eec:	20000474 	.word	0x20000474

08006ef0 <__ascii_mbtowc>:
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	b901      	cbnz	r1, 8006ef6 <__ascii_mbtowc+0x6>
 8006ef4:	a901      	add	r1, sp, #4
 8006ef6:	b142      	cbz	r2, 8006f0a <__ascii_mbtowc+0x1a>
 8006ef8:	b14b      	cbz	r3, 8006f0e <__ascii_mbtowc+0x1e>
 8006efa:	7813      	ldrb	r3, [r2, #0]
 8006efc:	600b      	str	r3, [r1, #0]
 8006efe:	7812      	ldrb	r2, [r2, #0]
 8006f00:	1e10      	subs	r0, r2, #0
 8006f02:	bf18      	it	ne
 8006f04:	2001      	movne	r0, #1
 8006f06:	b002      	add	sp, #8
 8006f08:	4770      	bx	lr
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	e7fb      	b.n	8006f06 <__ascii_mbtowc+0x16>
 8006f0e:	f06f 0001 	mvn.w	r0, #1
 8006f12:	e7f8      	b.n	8006f06 <__ascii_mbtowc+0x16>

08006f14 <_malloc_usable_size_r>:
 8006f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f18:	1f18      	subs	r0, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bfbc      	itt	lt
 8006f1e:	580b      	ldrlt	r3, [r1, r0]
 8006f20:	18c0      	addlt	r0, r0, r3
 8006f22:	4770      	bx	lr

08006f24 <fiprintf>:
 8006f24:	b40e      	push	{r1, r2, r3}
 8006f26:	b503      	push	{r0, r1, lr}
 8006f28:	4601      	mov	r1, r0
 8006f2a:	ab03      	add	r3, sp, #12
 8006f2c:	4805      	ldr	r0, [pc, #20]	; (8006f44 <fiprintf+0x20>)
 8006f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f32:	6800      	ldr	r0, [r0, #0]
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	f000 f845 	bl	8006fc4 <_vfiprintf_r>
 8006f3a:	b002      	add	sp, #8
 8006f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f40:	b003      	add	sp, #12
 8006f42:	4770      	bx	lr
 8006f44:	20000064 	.word	0x20000064

08006f48 <__ascii_wctomb>:
 8006f48:	b149      	cbz	r1, 8006f5e <__ascii_wctomb+0x16>
 8006f4a:	2aff      	cmp	r2, #255	; 0xff
 8006f4c:	bf85      	ittet	hi
 8006f4e:	238a      	movhi	r3, #138	; 0x8a
 8006f50:	6003      	strhi	r3, [r0, #0]
 8006f52:	700a      	strbls	r2, [r1, #0]
 8006f54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006f58:	bf98      	it	ls
 8006f5a:	2001      	movls	r0, #1
 8006f5c:	4770      	bx	lr
 8006f5e:	4608      	mov	r0, r1
 8006f60:	4770      	bx	lr

08006f62 <abort>:
 8006f62:	b508      	push	{r3, lr}
 8006f64:	2006      	movs	r0, #6
 8006f66:	f000 fa89 	bl	800747c <raise>
 8006f6a:	2001      	movs	r0, #1
 8006f6c:	f7fa fc2e 	bl	80017cc <_exit>

08006f70 <__sfputc_r>:
 8006f70:	6893      	ldr	r3, [r2, #8]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	b410      	push	{r4}
 8006f78:	6093      	str	r3, [r2, #8]
 8006f7a:	da08      	bge.n	8006f8e <__sfputc_r+0x1e>
 8006f7c:	6994      	ldr	r4, [r2, #24]
 8006f7e:	42a3      	cmp	r3, r4
 8006f80:	db01      	blt.n	8006f86 <__sfputc_r+0x16>
 8006f82:	290a      	cmp	r1, #10
 8006f84:	d103      	bne.n	8006f8e <__sfputc_r+0x1e>
 8006f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f8a:	f000 b935 	b.w	80071f8 <__swbuf_r>
 8006f8e:	6813      	ldr	r3, [r2, #0]
 8006f90:	1c58      	adds	r0, r3, #1
 8006f92:	6010      	str	r0, [r2, #0]
 8006f94:	7019      	strb	r1, [r3, #0]
 8006f96:	4608      	mov	r0, r1
 8006f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <__sfputs_r>:
 8006f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	460f      	mov	r7, r1
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	18d5      	adds	r5, r2, r3
 8006fa8:	42ac      	cmp	r4, r5
 8006faa:	d101      	bne.n	8006fb0 <__sfputs_r+0x12>
 8006fac:	2000      	movs	r0, #0
 8006fae:	e007      	b.n	8006fc0 <__sfputs_r+0x22>
 8006fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb4:	463a      	mov	r2, r7
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7ff ffda 	bl	8006f70 <__sfputc_r>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d1f3      	bne.n	8006fa8 <__sfputs_r+0xa>
 8006fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fc4 <_vfiprintf_r>:
 8006fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	460d      	mov	r5, r1
 8006fca:	b09d      	sub	sp, #116	; 0x74
 8006fcc:	4614      	mov	r4, r2
 8006fce:	4698      	mov	r8, r3
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	b118      	cbz	r0, 8006fdc <_vfiprintf_r+0x18>
 8006fd4:	6a03      	ldr	r3, [r0, #32]
 8006fd6:	b90b      	cbnz	r3, 8006fdc <_vfiprintf_r+0x18>
 8006fd8:	f7fe f8fa 	bl	80051d0 <__sinit>
 8006fdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fde:	07d9      	lsls	r1, r3, #31
 8006fe0:	d405      	bmi.n	8006fee <_vfiprintf_r+0x2a>
 8006fe2:	89ab      	ldrh	r3, [r5, #12]
 8006fe4:	059a      	lsls	r2, r3, #22
 8006fe6:	d402      	bmi.n	8006fee <_vfiprintf_r+0x2a>
 8006fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fea:	f7fe f95e 	bl	80052aa <__retarget_lock_acquire_recursive>
 8006fee:	89ab      	ldrh	r3, [r5, #12]
 8006ff0:	071b      	lsls	r3, r3, #28
 8006ff2:	d501      	bpl.n	8006ff8 <_vfiprintf_r+0x34>
 8006ff4:	692b      	ldr	r3, [r5, #16]
 8006ff6:	b99b      	cbnz	r3, 8007020 <_vfiprintf_r+0x5c>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f000 f93a 	bl	8007274 <__swsetup_r>
 8007000:	b170      	cbz	r0, 8007020 <_vfiprintf_r+0x5c>
 8007002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007004:	07dc      	lsls	r4, r3, #31
 8007006:	d504      	bpl.n	8007012 <_vfiprintf_r+0x4e>
 8007008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800700c:	b01d      	add	sp, #116	; 0x74
 800700e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	0598      	lsls	r0, r3, #22
 8007016:	d4f7      	bmi.n	8007008 <_vfiprintf_r+0x44>
 8007018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800701a:	f7fe f947 	bl	80052ac <__retarget_lock_release_recursive>
 800701e:	e7f3      	b.n	8007008 <_vfiprintf_r+0x44>
 8007020:	2300      	movs	r3, #0
 8007022:	9309      	str	r3, [sp, #36]	; 0x24
 8007024:	2320      	movs	r3, #32
 8007026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702a:	f8cd 800c 	str.w	r8, [sp, #12]
 800702e:	2330      	movs	r3, #48	; 0x30
 8007030:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80071e4 <_vfiprintf_r+0x220>
 8007034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007038:	f04f 0901 	mov.w	r9, #1
 800703c:	4623      	mov	r3, r4
 800703e:	469a      	mov	sl, r3
 8007040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007044:	b10a      	cbz	r2, 800704a <_vfiprintf_r+0x86>
 8007046:	2a25      	cmp	r2, #37	; 0x25
 8007048:	d1f9      	bne.n	800703e <_vfiprintf_r+0x7a>
 800704a:	ebba 0b04 	subs.w	fp, sl, r4
 800704e:	d00b      	beq.n	8007068 <_vfiprintf_r+0xa4>
 8007050:	465b      	mov	r3, fp
 8007052:	4622      	mov	r2, r4
 8007054:	4629      	mov	r1, r5
 8007056:	4630      	mov	r0, r6
 8007058:	f7ff ffa1 	bl	8006f9e <__sfputs_r>
 800705c:	3001      	adds	r0, #1
 800705e:	f000 80a9 	beq.w	80071b4 <_vfiprintf_r+0x1f0>
 8007062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007064:	445a      	add	r2, fp
 8007066:	9209      	str	r2, [sp, #36]	; 0x24
 8007068:	f89a 3000 	ldrb.w	r3, [sl]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80a1 	beq.w	80071b4 <_vfiprintf_r+0x1f0>
 8007072:	2300      	movs	r3, #0
 8007074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800707c:	f10a 0a01 	add.w	sl, sl, #1
 8007080:	9304      	str	r3, [sp, #16]
 8007082:	9307      	str	r3, [sp, #28]
 8007084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007088:	931a      	str	r3, [sp, #104]	; 0x68
 800708a:	4654      	mov	r4, sl
 800708c:	2205      	movs	r2, #5
 800708e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007092:	4854      	ldr	r0, [pc, #336]	; (80071e4 <_vfiprintf_r+0x220>)
 8007094:	f7f9 f8a4 	bl	80001e0 <memchr>
 8007098:	9a04      	ldr	r2, [sp, #16]
 800709a:	b9d8      	cbnz	r0, 80070d4 <_vfiprintf_r+0x110>
 800709c:	06d1      	lsls	r1, r2, #27
 800709e:	bf44      	itt	mi
 80070a0:	2320      	movmi	r3, #32
 80070a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a6:	0713      	lsls	r3, r2, #28
 80070a8:	bf44      	itt	mi
 80070aa:	232b      	movmi	r3, #43	; 0x2b
 80070ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b0:	f89a 3000 	ldrb.w	r3, [sl]
 80070b4:	2b2a      	cmp	r3, #42	; 0x2a
 80070b6:	d015      	beq.n	80070e4 <_vfiprintf_r+0x120>
 80070b8:	9a07      	ldr	r2, [sp, #28]
 80070ba:	4654      	mov	r4, sl
 80070bc:	2000      	movs	r0, #0
 80070be:	f04f 0c0a 	mov.w	ip, #10
 80070c2:	4621      	mov	r1, r4
 80070c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c8:	3b30      	subs	r3, #48	; 0x30
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	d94d      	bls.n	800716a <_vfiprintf_r+0x1a6>
 80070ce:	b1b0      	cbz	r0, 80070fe <_vfiprintf_r+0x13a>
 80070d0:	9207      	str	r2, [sp, #28]
 80070d2:	e014      	b.n	80070fe <_vfiprintf_r+0x13a>
 80070d4:	eba0 0308 	sub.w	r3, r0, r8
 80070d8:	fa09 f303 	lsl.w	r3, r9, r3
 80070dc:	4313      	orrs	r3, r2
 80070de:	9304      	str	r3, [sp, #16]
 80070e0:	46a2      	mov	sl, r4
 80070e2:	e7d2      	b.n	800708a <_vfiprintf_r+0xc6>
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	1d19      	adds	r1, r3, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	9103      	str	r1, [sp, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	bfbb      	ittet	lt
 80070f0:	425b      	neglt	r3, r3
 80070f2:	f042 0202 	orrlt.w	r2, r2, #2
 80070f6:	9307      	strge	r3, [sp, #28]
 80070f8:	9307      	strlt	r3, [sp, #28]
 80070fa:	bfb8      	it	lt
 80070fc:	9204      	strlt	r2, [sp, #16]
 80070fe:	7823      	ldrb	r3, [r4, #0]
 8007100:	2b2e      	cmp	r3, #46	; 0x2e
 8007102:	d10c      	bne.n	800711e <_vfiprintf_r+0x15a>
 8007104:	7863      	ldrb	r3, [r4, #1]
 8007106:	2b2a      	cmp	r3, #42	; 0x2a
 8007108:	d134      	bne.n	8007174 <_vfiprintf_r+0x1b0>
 800710a:	9b03      	ldr	r3, [sp, #12]
 800710c:	1d1a      	adds	r2, r3, #4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	9203      	str	r2, [sp, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfb8      	it	lt
 8007116:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800711a:	3402      	adds	r4, #2
 800711c:	9305      	str	r3, [sp, #20]
 800711e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80071f4 <_vfiprintf_r+0x230>
 8007122:	7821      	ldrb	r1, [r4, #0]
 8007124:	2203      	movs	r2, #3
 8007126:	4650      	mov	r0, sl
 8007128:	f7f9 f85a 	bl	80001e0 <memchr>
 800712c:	b138      	cbz	r0, 800713e <_vfiprintf_r+0x17a>
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	eba0 000a 	sub.w	r0, r0, sl
 8007134:	2240      	movs	r2, #64	; 0x40
 8007136:	4082      	lsls	r2, r0
 8007138:	4313      	orrs	r3, r2
 800713a:	3401      	adds	r4, #1
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007142:	4829      	ldr	r0, [pc, #164]	; (80071e8 <_vfiprintf_r+0x224>)
 8007144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007148:	2206      	movs	r2, #6
 800714a:	f7f9 f849 	bl	80001e0 <memchr>
 800714e:	2800      	cmp	r0, #0
 8007150:	d03f      	beq.n	80071d2 <_vfiprintf_r+0x20e>
 8007152:	4b26      	ldr	r3, [pc, #152]	; (80071ec <_vfiprintf_r+0x228>)
 8007154:	bb1b      	cbnz	r3, 800719e <_vfiprintf_r+0x1da>
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	3307      	adds	r3, #7
 800715a:	f023 0307 	bic.w	r3, r3, #7
 800715e:	3308      	adds	r3, #8
 8007160:	9303      	str	r3, [sp, #12]
 8007162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007164:	443b      	add	r3, r7
 8007166:	9309      	str	r3, [sp, #36]	; 0x24
 8007168:	e768      	b.n	800703c <_vfiprintf_r+0x78>
 800716a:	fb0c 3202 	mla	r2, ip, r2, r3
 800716e:	460c      	mov	r4, r1
 8007170:	2001      	movs	r0, #1
 8007172:	e7a6      	b.n	80070c2 <_vfiprintf_r+0xfe>
 8007174:	2300      	movs	r3, #0
 8007176:	3401      	adds	r4, #1
 8007178:	9305      	str	r3, [sp, #20]
 800717a:	4619      	mov	r1, r3
 800717c:	f04f 0c0a 	mov.w	ip, #10
 8007180:	4620      	mov	r0, r4
 8007182:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007186:	3a30      	subs	r2, #48	; 0x30
 8007188:	2a09      	cmp	r2, #9
 800718a:	d903      	bls.n	8007194 <_vfiprintf_r+0x1d0>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0c6      	beq.n	800711e <_vfiprintf_r+0x15a>
 8007190:	9105      	str	r1, [sp, #20]
 8007192:	e7c4      	b.n	800711e <_vfiprintf_r+0x15a>
 8007194:	fb0c 2101 	mla	r1, ip, r1, r2
 8007198:	4604      	mov	r4, r0
 800719a:	2301      	movs	r3, #1
 800719c:	e7f0      	b.n	8007180 <_vfiprintf_r+0x1bc>
 800719e:	ab03      	add	r3, sp, #12
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	462a      	mov	r2, r5
 80071a4:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <_vfiprintf_r+0x22c>)
 80071a6:	a904      	add	r1, sp, #16
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7fd fb8b 	bl	80048c4 <_printf_float>
 80071ae:	4607      	mov	r7, r0
 80071b0:	1c78      	adds	r0, r7, #1
 80071b2:	d1d6      	bne.n	8007162 <_vfiprintf_r+0x19e>
 80071b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071b6:	07d9      	lsls	r1, r3, #31
 80071b8:	d405      	bmi.n	80071c6 <_vfiprintf_r+0x202>
 80071ba:	89ab      	ldrh	r3, [r5, #12]
 80071bc:	059a      	lsls	r2, r3, #22
 80071be:	d402      	bmi.n	80071c6 <_vfiprintf_r+0x202>
 80071c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071c2:	f7fe f873 	bl	80052ac <__retarget_lock_release_recursive>
 80071c6:	89ab      	ldrh	r3, [r5, #12]
 80071c8:	065b      	lsls	r3, r3, #25
 80071ca:	f53f af1d 	bmi.w	8007008 <_vfiprintf_r+0x44>
 80071ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d0:	e71c      	b.n	800700c <_vfiprintf_r+0x48>
 80071d2:	ab03      	add	r3, sp, #12
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	462a      	mov	r2, r5
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <_vfiprintf_r+0x22c>)
 80071da:	a904      	add	r1, sp, #16
 80071dc:	4630      	mov	r0, r6
 80071de:	f7fd fe15 	bl	8004e0c <_printf_i>
 80071e2:	e7e4      	b.n	80071ae <_vfiprintf_r+0x1ea>
 80071e4:	080075dd 	.word	0x080075dd
 80071e8:	080075e7 	.word	0x080075e7
 80071ec:	080048c5 	.word	0x080048c5
 80071f0:	08006f9f 	.word	0x08006f9f
 80071f4:	080075e3 	.word	0x080075e3

080071f8 <__swbuf_r>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	460e      	mov	r6, r1
 80071fc:	4614      	mov	r4, r2
 80071fe:	4605      	mov	r5, r0
 8007200:	b118      	cbz	r0, 800720a <__swbuf_r+0x12>
 8007202:	6a03      	ldr	r3, [r0, #32]
 8007204:	b90b      	cbnz	r3, 800720a <__swbuf_r+0x12>
 8007206:	f7fd ffe3 	bl	80051d0 <__sinit>
 800720a:	69a3      	ldr	r3, [r4, #24]
 800720c:	60a3      	str	r3, [r4, #8]
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	071a      	lsls	r2, r3, #28
 8007212:	d525      	bpl.n	8007260 <__swbuf_r+0x68>
 8007214:	6923      	ldr	r3, [r4, #16]
 8007216:	b31b      	cbz	r3, 8007260 <__swbuf_r+0x68>
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	6922      	ldr	r2, [r4, #16]
 800721c:	1a98      	subs	r0, r3, r2
 800721e:	6963      	ldr	r3, [r4, #20]
 8007220:	b2f6      	uxtb	r6, r6
 8007222:	4283      	cmp	r3, r0
 8007224:	4637      	mov	r7, r6
 8007226:	dc04      	bgt.n	8007232 <__swbuf_r+0x3a>
 8007228:	4621      	mov	r1, r4
 800722a:	4628      	mov	r0, r5
 800722c:	f7ff f940 	bl	80064b0 <_fflush_r>
 8007230:	b9e0      	cbnz	r0, 800726c <__swbuf_r+0x74>
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	3b01      	subs	r3, #1
 8007236:	60a3      	str	r3, [r4, #8]
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	6022      	str	r2, [r4, #0]
 800723e:	701e      	strb	r6, [r3, #0]
 8007240:	6962      	ldr	r2, [r4, #20]
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	429a      	cmp	r2, r3
 8007246:	d004      	beq.n	8007252 <__swbuf_r+0x5a>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	07db      	lsls	r3, r3, #31
 800724c:	d506      	bpl.n	800725c <__swbuf_r+0x64>
 800724e:	2e0a      	cmp	r6, #10
 8007250:	d104      	bne.n	800725c <__swbuf_r+0x64>
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f7ff f92b 	bl	80064b0 <_fflush_r>
 800725a:	b938      	cbnz	r0, 800726c <__swbuf_r+0x74>
 800725c:	4638      	mov	r0, r7
 800725e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007260:	4621      	mov	r1, r4
 8007262:	4628      	mov	r0, r5
 8007264:	f000 f806 	bl	8007274 <__swsetup_r>
 8007268:	2800      	cmp	r0, #0
 800726a:	d0d5      	beq.n	8007218 <__swbuf_r+0x20>
 800726c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007270:	e7f4      	b.n	800725c <__swbuf_r+0x64>
	...

08007274 <__swsetup_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4b2a      	ldr	r3, [pc, #168]	; (8007320 <__swsetup_r+0xac>)
 8007278:	4605      	mov	r5, r0
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	460c      	mov	r4, r1
 800727e:	b118      	cbz	r0, 8007288 <__swsetup_r+0x14>
 8007280:	6a03      	ldr	r3, [r0, #32]
 8007282:	b90b      	cbnz	r3, 8007288 <__swsetup_r+0x14>
 8007284:	f7fd ffa4 	bl	80051d0 <__sinit>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800728e:	0718      	lsls	r0, r3, #28
 8007290:	d422      	bmi.n	80072d8 <__swsetup_r+0x64>
 8007292:	06d9      	lsls	r1, r3, #27
 8007294:	d407      	bmi.n	80072a6 <__swsetup_r+0x32>
 8007296:	2309      	movs	r3, #9
 8007298:	602b      	str	r3, [r5, #0]
 800729a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800729e:	81a3      	strh	r3, [r4, #12]
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072a4:	e034      	b.n	8007310 <__swsetup_r+0x9c>
 80072a6:	0758      	lsls	r0, r3, #29
 80072a8:	d512      	bpl.n	80072d0 <__swsetup_r+0x5c>
 80072aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ac:	b141      	cbz	r1, 80072c0 <__swsetup_r+0x4c>
 80072ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072b2:	4299      	cmp	r1, r3
 80072b4:	d002      	beq.n	80072bc <__swsetup_r+0x48>
 80072b6:	4628      	mov	r0, r5
 80072b8:	f7ff fdce 	bl	8006e58 <_free_r>
 80072bc:	2300      	movs	r3, #0
 80072be:	6363      	str	r3, [r4, #52]	; 0x34
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	2300      	movs	r3, #0
 80072ca:	6063      	str	r3, [r4, #4]
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	6023      	str	r3, [r4, #0]
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	f043 0308 	orr.w	r3, r3, #8
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	b94b      	cbnz	r3, 80072f0 <__swsetup_r+0x7c>
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e6:	d003      	beq.n	80072f0 <__swsetup_r+0x7c>
 80072e8:	4621      	mov	r1, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	f000 f840 	bl	8007370 <__smakebuf_r>
 80072f0:	89a0      	ldrh	r0, [r4, #12]
 80072f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072f6:	f010 0301 	ands.w	r3, r0, #1
 80072fa:	d00a      	beq.n	8007312 <__swsetup_r+0x9e>
 80072fc:	2300      	movs	r3, #0
 80072fe:	60a3      	str	r3, [r4, #8]
 8007300:	6963      	ldr	r3, [r4, #20]
 8007302:	425b      	negs	r3, r3
 8007304:	61a3      	str	r3, [r4, #24]
 8007306:	6923      	ldr	r3, [r4, #16]
 8007308:	b943      	cbnz	r3, 800731c <__swsetup_r+0xa8>
 800730a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800730e:	d1c4      	bne.n	800729a <__swsetup_r+0x26>
 8007310:	bd38      	pop	{r3, r4, r5, pc}
 8007312:	0781      	lsls	r1, r0, #30
 8007314:	bf58      	it	pl
 8007316:	6963      	ldrpl	r3, [r4, #20]
 8007318:	60a3      	str	r3, [r4, #8]
 800731a:	e7f4      	b.n	8007306 <__swsetup_r+0x92>
 800731c:	2000      	movs	r0, #0
 800731e:	e7f7      	b.n	8007310 <__swsetup_r+0x9c>
 8007320:	20000064 	.word	0x20000064

08007324 <__swhatbuf_r>:
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	460c      	mov	r4, r1
 8007328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732c:	2900      	cmp	r1, #0
 800732e:	b096      	sub	sp, #88	; 0x58
 8007330:	4615      	mov	r5, r2
 8007332:	461e      	mov	r6, r3
 8007334:	da0d      	bge.n	8007352 <__swhatbuf_r+0x2e>
 8007336:	89a3      	ldrh	r3, [r4, #12]
 8007338:	f013 0f80 	tst.w	r3, #128	; 0x80
 800733c:	f04f 0100 	mov.w	r1, #0
 8007340:	bf0c      	ite	eq
 8007342:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007346:	2340      	movne	r3, #64	; 0x40
 8007348:	2000      	movs	r0, #0
 800734a:	6031      	str	r1, [r6, #0]
 800734c:	602b      	str	r3, [r5, #0]
 800734e:	b016      	add	sp, #88	; 0x58
 8007350:	bd70      	pop	{r4, r5, r6, pc}
 8007352:	466a      	mov	r2, sp
 8007354:	f000 f848 	bl	80073e8 <_fstat_r>
 8007358:	2800      	cmp	r0, #0
 800735a:	dbec      	blt.n	8007336 <__swhatbuf_r+0x12>
 800735c:	9901      	ldr	r1, [sp, #4]
 800735e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007362:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007366:	4259      	negs	r1, r3
 8007368:	4159      	adcs	r1, r3
 800736a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800736e:	e7eb      	b.n	8007348 <__swhatbuf_r+0x24>

08007370 <__smakebuf_r>:
 8007370:	898b      	ldrh	r3, [r1, #12]
 8007372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007374:	079d      	lsls	r5, r3, #30
 8007376:	4606      	mov	r6, r0
 8007378:	460c      	mov	r4, r1
 800737a:	d507      	bpl.n	800738c <__smakebuf_r+0x1c>
 800737c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	6123      	str	r3, [r4, #16]
 8007384:	2301      	movs	r3, #1
 8007386:	6163      	str	r3, [r4, #20]
 8007388:	b002      	add	sp, #8
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	ab01      	add	r3, sp, #4
 800738e:	466a      	mov	r2, sp
 8007390:	f7ff ffc8 	bl	8007324 <__swhatbuf_r>
 8007394:	9900      	ldr	r1, [sp, #0]
 8007396:	4605      	mov	r5, r0
 8007398:	4630      	mov	r0, r6
 800739a:	f7fe ff83 	bl	80062a4 <_malloc_r>
 800739e:	b948      	cbnz	r0, 80073b4 <__smakebuf_r+0x44>
 80073a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a4:	059a      	lsls	r2, r3, #22
 80073a6:	d4ef      	bmi.n	8007388 <__smakebuf_r+0x18>
 80073a8:	f023 0303 	bic.w	r3, r3, #3
 80073ac:	f043 0302 	orr.w	r3, r3, #2
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	e7e3      	b.n	800737c <__smakebuf_r+0xc>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	6020      	str	r0, [r4, #0]
 80073b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	9b00      	ldr	r3, [sp, #0]
 80073c0:	6163      	str	r3, [r4, #20]
 80073c2:	9b01      	ldr	r3, [sp, #4]
 80073c4:	6120      	str	r0, [r4, #16]
 80073c6:	b15b      	cbz	r3, 80073e0 <__smakebuf_r+0x70>
 80073c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073cc:	4630      	mov	r0, r6
 80073ce:	f000 f81d 	bl	800740c <_isatty_r>
 80073d2:	b128      	cbz	r0, 80073e0 <__smakebuf_r+0x70>
 80073d4:	89a3      	ldrh	r3, [r4, #12]
 80073d6:	f023 0303 	bic.w	r3, r3, #3
 80073da:	f043 0301 	orr.w	r3, r3, #1
 80073de:	81a3      	strh	r3, [r4, #12]
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	431d      	orrs	r5, r3
 80073e4:	81a5      	strh	r5, [r4, #12]
 80073e6:	e7cf      	b.n	8007388 <__smakebuf_r+0x18>

080073e8 <_fstat_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4d07      	ldr	r5, [pc, #28]	; (8007408 <_fstat_r+0x20>)
 80073ec:	2300      	movs	r3, #0
 80073ee:	4604      	mov	r4, r0
 80073f0:	4608      	mov	r0, r1
 80073f2:	4611      	mov	r1, r2
 80073f4:	602b      	str	r3, [r5, #0]
 80073f6:	f7fa fa38 	bl	800186a <_fstat>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	d102      	bne.n	8007404 <_fstat_r+0x1c>
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	b103      	cbz	r3, 8007404 <_fstat_r+0x1c>
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	bd38      	pop	{r3, r4, r5, pc}
 8007406:	bf00      	nop
 8007408:	2000047c 	.word	0x2000047c

0800740c <_isatty_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d06      	ldr	r5, [pc, #24]	; (8007428 <_isatty_r+0x1c>)
 8007410:	2300      	movs	r3, #0
 8007412:	4604      	mov	r4, r0
 8007414:	4608      	mov	r0, r1
 8007416:	602b      	str	r3, [r5, #0]
 8007418:	f7fa fa37 	bl	800188a <_isatty>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_isatty_r+0x1a>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_isatty_r+0x1a>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	2000047c 	.word	0x2000047c

0800742c <_raise_r>:
 800742c:	291f      	cmp	r1, #31
 800742e:	b538      	push	{r3, r4, r5, lr}
 8007430:	4604      	mov	r4, r0
 8007432:	460d      	mov	r5, r1
 8007434:	d904      	bls.n	8007440 <_raise_r+0x14>
 8007436:	2316      	movs	r3, #22
 8007438:	6003      	str	r3, [r0, #0]
 800743a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007442:	b112      	cbz	r2, 800744a <_raise_r+0x1e>
 8007444:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007448:	b94b      	cbnz	r3, 800745e <_raise_r+0x32>
 800744a:	4620      	mov	r0, r4
 800744c:	f000 f830 	bl	80074b0 <_getpid_r>
 8007450:	462a      	mov	r2, r5
 8007452:	4601      	mov	r1, r0
 8007454:	4620      	mov	r0, r4
 8007456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800745a:	f000 b817 	b.w	800748c <_kill_r>
 800745e:	2b01      	cmp	r3, #1
 8007460:	d00a      	beq.n	8007478 <_raise_r+0x4c>
 8007462:	1c59      	adds	r1, r3, #1
 8007464:	d103      	bne.n	800746e <_raise_r+0x42>
 8007466:	2316      	movs	r3, #22
 8007468:	6003      	str	r3, [r0, #0]
 800746a:	2001      	movs	r0, #1
 800746c:	e7e7      	b.n	800743e <_raise_r+0x12>
 800746e:	2400      	movs	r4, #0
 8007470:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007474:	4628      	mov	r0, r5
 8007476:	4798      	blx	r3
 8007478:	2000      	movs	r0, #0
 800747a:	e7e0      	b.n	800743e <_raise_r+0x12>

0800747c <raise>:
 800747c:	4b02      	ldr	r3, [pc, #8]	; (8007488 <raise+0xc>)
 800747e:	4601      	mov	r1, r0
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	f7ff bfd3 	b.w	800742c <_raise_r>
 8007486:	bf00      	nop
 8007488:	20000064 	.word	0x20000064

0800748c <_kill_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d07      	ldr	r5, [pc, #28]	; (80074ac <_kill_r+0x20>)
 8007490:	2300      	movs	r3, #0
 8007492:	4604      	mov	r4, r0
 8007494:	4608      	mov	r0, r1
 8007496:	4611      	mov	r1, r2
 8007498:	602b      	str	r3, [r5, #0]
 800749a:	f7fa f987 	bl	80017ac <_kill>
 800749e:	1c43      	adds	r3, r0, #1
 80074a0:	d102      	bne.n	80074a8 <_kill_r+0x1c>
 80074a2:	682b      	ldr	r3, [r5, #0]
 80074a4:	b103      	cbz	r3, 80074a8 <_kill_r+0x1c>
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	bd38      	pop	{r3, r4, r5, pc}
 80074aa:	bf00      	nop
 80074ac:	2000047c 	.word	0x2000047c

080074b0 <_getpid_r>:
 80074b0:	f7fa b974 	b.w	800179c <_getpid>

080074b4 <_init>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	bf00      	nop
 80074b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ba:	bc08      	pop	{r3}
 80074bc:	469e      	mov	lr, r3
 80074be:	4770      	bx	lr

080074c0 <_fini>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	bf00      	nop
 80074c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c6:	bc08      	pop	{r3}
 80074c8:	469e      	mov	lr, r3
 80074ca:	4770      	bx	lr

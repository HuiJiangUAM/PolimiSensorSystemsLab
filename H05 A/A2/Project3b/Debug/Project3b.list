
Project3b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08008478  08008478  00018478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008860  08008860  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008868  08008868  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800886c  0800886c  0001886c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008870  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001244  200001e8  08008a58  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  08008a58  0002142c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f11a  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022b3  00000000  00000000  0002f375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00031628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b44  00000000  00000000  00032490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187ac  00000000  00000000  00032fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010915  00000000  00000000  0004b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b5bf  00000000  00000000  0005c095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000512c  00000000  00000000  000f7654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fc780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008460 	.word	0x08008460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08008460 	.word	0x08008460

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b09c      	sub	sp, #112	; 0x70
 8000f5c:	af04      	add	r7, sp, #16
 8000f5e:	6078      	str	r0, [r7, #4]
	float voltage_ADC;
	for(int i = 0; i < 1000; i++){
 8000f60:	2300      	movs	r3, #0
 8000f62:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f64:	e010      	b.n	8000f88 <HAL_ADC_ConvHalfCpltCallback+0x30>
		voltage_ADC += LDR_values[i];
 8000f66:	4a58      	ldr	r2, [pc, #352]	; (80010c8 <HAL_ADC_ConvHalfCpltCallback+0x170>)
 8000f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f76:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	for(int i = 0; i < 1000; i++){
 8000f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f84:	3301      	adds	r3, #1
 8000f86:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f8e:	dbea      	blt.n	8000f66 <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
	voltage_ADC = voltage_ADC/1000.0;//calculate the average
 8000f90:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f94:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80010cc <HAL_ADC_ConvHalfCpltCallback+0x174>
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	voltage_ADC = voltage_ADC/4095.0*3.3;//transform to the Voltage
 8000fa0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000fa2:	f7ff fad9 	bl	8000558 <__aeabi_f2d>
 8000fa6:	a340      	add	r3, pc, #256	; (adr r3, 80010a8 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fc56 	bl	800085c <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	a33d      	add	r3, pc, #244	; (adr r3, 80010b0 <HAL_ADC_ConvHalfCpltCallback+0x158>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fb23 	bl	8000608 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fdf5 	bl	8000bb8 <__aeabi_d2f>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
	float LDR = (voltage_ADC*100000.0)/(3.3-voltage_ADC);
 8000fd2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000fd4:	f7ff fac0 	bl	8000558 <__aeabi_f2d>
 8000fd8:	a337      	add	r3, pc, #220	; (adr r3, 80010b8 <HAL_ADC_ConvHalfCpltCallback+0x160>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fb13 	bl	8000608 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4614      	mov	r4, r2
 8000fe8:	461d      	mov	r5, r3
 8000fea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000fec:	f7ff fab4 	bl	8000558 <__aeabi_f2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	a12e      	add	r1, pc, #184	; (adr r1, 80010b0 <HAL_ADC_ConvHalfCpltCallback+0x158>)
 8000ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ffa:	f7ff f94d 	bl	8000298 <__aeabi_dsub>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4620      	mov	r0, r4
 8001004:	4629      	mov	r1, r5
 8001006:	f7ff fc29 	bl	800085c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fdd1 	bl	8000bb8 <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	657b      	str	r3, [r7, #84]	; 0x54
	float LUX = 10.0*pow(100000.0/LDR,1.25);
 800101a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800101c:	f7ff fa9c 	bl	8000558 <__aeabi_f2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	a124      	add	r1, pc, #144	; (adr r1, 80010b8 <HAL_ADC_ConvHalfCpltCallback+0x160>)
 8001026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800102a:	f7ff fc17 	bl	800085c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	ec43 2b17 	vmov	d7, r2, r3
 8001036:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80010c0 <HAL_ADC_ConvHalfCpltCallback+0x168>
 800103a:	eeb0 0a47 	vmov.f32	s0, s14
 800103e:	eef0 0a67 	vmov.f32	s1, s15
 8001042:	f006 fad3 	bl	80075ec <pow>
 8001046:	ec51 0b10 	vmov	r0, r1, d0
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 8001050:	f7ff fada 	bl	8000608 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fdac 	bl	8000bb8 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	653b      	str	r3, [r7, #80]	; 0x50
	char string[64];
	int length = snprintf(string,sizeof(string),"Resistance:%.2f\r\nLUX:%.2f\r\n\r\n",LDR,LUX);
 8001064:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001066:	f7ff fa77 	bl	8000558 <__aeabi_f2d>
 800106a:	4604      	mov	r4, r0
 800106c:	460d      	mov	r5, r1
 800106e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001070:	f7ff fa72 	bl	8000558 <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	f107 000c 	add.w	r0, r7, #12
 800107c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001080:	e9cd 4500 	strd	r4, r5, [sp]
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <HAL_ADC_ConvHalfCpltCallback+0x17c>)
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	f004 f87e 	bl	8005188 <sniprintf>
 800108c:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2,(uint8_t*) string,length,100);
 800108e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001090:	b29a      	uxth	r2, r3
 8001092:	f107 010c 	add.w	r1, r7, #12
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <HAL_ADC_ConvHalfCpltCallback+0x180>)
 800109a:	f003 f89a 	bl	80041d2 <HAL_UART_Transmit>
}
 800109e:	bf00      	nop
 80010a0:	3760      	adds	r7, #96	; 0x60
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bdb0      	pop	{r4, r5, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40affe00 	.word	0x40affe00
 80010b0:	66666666 	.word	0x66666666
 80010b4:	400a6666 	.word	0x400a6666
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40f86a00 	.word	0x40f86a00
 80010c0:	00000000 	.word	0x00000000
 80010c4:	3ff40000 	.word	0x3ff40000
 80010c8:	20000338 	.word	0x20000338
 80010cc:	447a0000 	.word	0x447a0000
 80010d0:	40240000 	.word	0x40240000
 80010d4:	08008478 	.word	0x08008478
 80010d8:	200002f4 	.word	0x200002f4
 80010dc:	00000000 	.word	0x00000000

080010e0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b09c      	sub	sp, #112	; 0x70
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	6078      	str	r0, [r7, #4]
	    float voltage_ADC;
		for(int i = 1000; i<2000; i++){
 80010e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80010ee:	e010      	b.n	8001112 <HAL_ADC_ConvCpltCallback+0x32>
			voltage_ADC += LDR_values[i];
 80010f0:	4a57      	ldr	r2, [pc, #348]	; (8001250 <HAL_ADC_ConvCpltCallback+0x170>)
 80010f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001100:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001108:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		for(int i = 1000; i<2000; i++){
 800110c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800110e:	3301      	adds	r3, #1
 8001110:	65bb      	str	r3, [r7, #88]	; 0x58
 8001112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001114:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001118:	dbea      	blt.n	80010f0 <HAL_ADC_ConvCpltCallback+0x10>
		}
		voltage_ADC = voltage_ADC/1000.0;//calculate the average
 800111a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800111e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001254 <HAL_ADC_ConvCpltCallback+0x174>
 8001122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001126:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		voltage_ADC = voltage_ADC/4095.0*3.3;//transform to the Voltage
 800112a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800112c:	f7ff fa14 	bl	8000558 <__aeabi_f2d>
 8001130:	a33f      	add	r3, pc, #252	; (adr r3, 8001230 <HAL_ADC_ConvCpltCallback+0x150>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fb91 	bl	800085c <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	a33d      	add	r3, pc, #244	; (adr r3, 8001238 <HAL_ADC_ConvCpltCallback+0x158>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa5e 	bl	8000608 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fd30 	bl	8000bb8 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	65fb      	str	r3, [r7, #92]	; 0x5c
		float LDR = (voltage_ADC*100000.0)/(3.3-voltage_ADC);
 800115c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800115e:	f7ff f9fb 	bl	8000558 <__aeabi_f2d>
 8001162:	a337      	add	r3, pc, #220	; (adr r3, 8001240 <HAL_ADC_ConvCpltCallback+0x160>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fa4e 	bl	8000608 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4614      	mov	r4, r2
 8001172:	461d      	mov	r5, r3
 8001174:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001176:	f7ff f9ef 	bl	8000558 <__aeabi_f2d>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	a12e      	add	r1, pc, #184	; (adr r1, 8001238 <HAL_ADC_ConvCpltCallback+0x158>)
 8001180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001184:	f7ff f888 	bl	8000298 <__aeabi_dsub>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4620      	mov	r0, r4
 800118e:	4629      	mov	r1, r5
 8001190:	f7ff fb64 	bl	800085c <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fd0c 	bl	8000bb8 <__aeabi_d2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	657b      	str	r3, [r7, #84]	; 0x54
		float LUX = 10.0*pow(100000.0/LDR,1.25);
 80011a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011a6:	f7ff f9d7 	bl	8000558 <__aeabi_f2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	a124      	add	r1, pc, #144	; (adr r1, 8001240 <HAL_ADC_ConvCpltCallback+0x160>)
 80011b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b4:	f7ff fb52 	bl	800085c <__aeabi_ddiv>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	ec43 2b17 	vmov	d7, r2, r3
 80011c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001248 <HAL_ADC_ConvCpltCallback+0x168>
 80011c4:	eeb0 0a47 	vmov.f32	s0, s14
 80011c8:	eef0 0a67 	vmov.f32	s1, s15
 80011cc:	f006 fa0e 	bl	80075ec <pow>
 80011d0:	ec51 0b10 	vmov	r0, r1, d0
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_ADC_ConvCpltCallback+0x178>)
 80011da:	f7ff fa15 	bl	8000608 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fce7 	bl	8000bb8 <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	653b      	str	r3, [r7, #80]	; 0x50
		char string[64];
		int length = snprintf(string,sizeof(string),"Resistance:%.2f\r\nLUX:%.2f\r\n\r\n",LDR,LUX);
 80011ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011f0:	f7ff f9b2 	bl	8000558 <__aeabi_f2d>
 80011f4:	4604      	mov	r4, r0
 80011f6:	460d      	mov	r5, r1
 80011f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80011fa:	f7ff f9ad 	bl	8000558 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	f107 000c 	add.w	r0, r7, #12
 8001206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800120a:	e9cd 4500 	strd	r4, r5, [sp]
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001210:	2140      	movs	r1, #64	; 0x40
 8001212:	f003 ffb9 	bl	8005188 <sniprintf>
 8001216:	64f8      	str	r0, [r7, #76]	; 0x4c
		HAL_UART_Transmit(&huart2,(uint8_t*) string,length,100);
 8001218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800121a:	b29a      	uxth	r2, r3
 800121c:	f107 010c 	add.w	r1, r7, #12
 8001220:	2364      	movs	r3, #100	; 0x64
 8001222:	480f      	ldr	r0, [pc, #60]	; (8001260 <HAL_ADC_ConvCpltCallback+0x180>)
 8001224:	f002 ffd5 	bl	80041d2 <HAL_UART_Transmit>
}
 8001228:	bf00      	nop
 800122a:	3760      	adds	r7, #96	; 0x60
 800122c:	46bd      	mov	sp, r7
 800122e:	bdb0      	pop	{r4, r5, r7, pc}
 8001230:	00000000 	.word	0x00000000
 8001234:	40affe00 	.word	0x40affe00
 8001238:	66666666 	.word	0x66666666
 800123c:	400a6666 	.word	0x400a6666
 8001240:	00000000 	.word	0x00000000
 8001244:	40f86a00 	.word	0x40f86a00
 8001248:	00000000 	.word	0x00000000
 800124c:	3ff40000 	.word	0x3ff40000
 8001250:	20000338 	.word	0x20000338
 8001254:	447a0000 	.word	0x447a0000
 8001258:	40240000 	.word	0x40240000
 800125c:	08008478 	.word	0x08008478
 8001260:	200002f4 	.word	0x200002f4

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001268:	f000 fc40 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126c:	f000 f824 	bl	80012b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001270:	f000 f978 	bl	8001564 <MX_GPIO_Init>
  MX_DMA_Init();
 8001274:	f000 f956 	bl	8001524 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001278:	f000 f92a 	bl	80014d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800127c:	f000 f888 	bl	8001390 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001280:	f000 f8d8 	bl	8001434 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK){
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <main+0x48>)
 8001286:	f002 fcad 	bl	8003be4 <HAL_TIM_Base_Start>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <main+0x30>
  	  Error_Handler();
 8001290:	f000 f9d6 	bl	8001640 <Error_Handler>
    }
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)LDR_values,DMA_SIZE) != HAL_OK){
 8001294:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001298:	4905      	ldr	r1, [pc, #20]	; (80012b0 <main+0x4c>)
 800129a:	4806      	ldr	r0, [pc, #24]	; (80012b4 <main+0x50>)
 800129c:	f000 fdec 	bl	8001e78 <HAL_ADC_Start_DMA>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <main+0x46>
	  Error_Handler();
 80012a6:	f000 f9cb 	bl	8001640 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <main+0x46>
 80012ac:	200002ac 	.word	0x200002ac
 80012b0:	20000338 	.word	0x20000338
 80012b4:	20000204 	.word	0x20000204

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b094      	sub	sp, #80	; 0x50
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	2230      	movs	r2, #48	; 0x30
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f004 f854 	bl	8005374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	4b29      	ldr	r3, [pc, #164]	; (8001388 <SystemClock_Config+0xd0>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	4a28      	ldr	r2, [pc, #160]	; (8001388 <SystemClock_Config+0xd0>)
 80012e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ea:	6413      	str	r3, [r2, #64]	; 0x40
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <SystemClock_Config+0xd0>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <SystemClock_Config+0xd4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <SystemClock_Config+0xd4>)
 8001306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <SystemClock_Config+0xd4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131c:	2301      	movs	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001320:	2310      	movs	r3, #16
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001328:	2300      	movs	r3, #0
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800132c:	2310      	movs	r3, #16
 800132e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001330:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001334:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001336:	2304      	movs	r3, #4
 8001338:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800133a:	2307      	movs	r3, #7
 800133c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	4618      	mov	r0, r3
 8001344:	f001 ff66 	bl	8003214 <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800134e:	f000 f977 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2302      	movs	r3, #2
 8001358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f002 f9c8 	bl	8003704 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800137a:	f000 f961 	bl	8001640 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	; 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_ADC1_Init+0x9c>)
 80013a4:	4a22      	ldr	r2, [pc, #136]	; (8001430 <MX_ADC1_Init+0xa0>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_ADC1_Init+0x9c>)
 80013aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_ADC1_Init+0x9c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_ADC1_Init+0x9c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_ADC1_Init+0x9c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_ADC1_Init+0x9c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_ADC1_Init+0x9c>)
 80013cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_ADC1_Init+0x9c>)
 80013d4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_ADC1_Init+0x9c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_ADC1_Init+0x9c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_ADC1_Init+0x9c>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_ADC1_Init+0x9c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_ADC1_Init+0x9c>)
 80013f6:	f000 fbeb 	bl	8001bd0 <HAL_ADC_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001400:	f000 f91e 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800140c:	2307      	movs	r3, #7
 800140e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_ADC1_Init+0x9c>)
 8001416:	f000 fe33 	bl	8002080 <HAL_ADC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001420:	f000 f90e 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000204 	.word	0x20000204
 8001430:	40012000 	.word	0x40012000

08001434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001456:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_TIM2_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83999;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001466:	4a19      	ldr	r2, [pc, #100]	; (80014cc <MX_TIM2_Init+0x98>)
 8001468:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MX_TIM2_Init+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001476:	4814      	ldr	r0, [pc, #80]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001478:	f002 fb64 	bl	8003b44 <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001482:	f000 f8dd 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4619      	mov	r1, r3
 8001492:	480d      	ldr	r0, [pc, #52]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001494:	f002 fc00 	bl	8003c98 <HAL_TIM_ConfigClockSource>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800149e:	f000 f8cf 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014a2:	2320      	movs	r3, #32
 80014a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_TIM2_Init+0x94>)
 80014b0:	f002 fdd4 	bl	800405c <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80014ba:	f000 f8c1 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200002ac 	.word	0x200002ac
 80014cc:	0001481f 	.word	0x0001481f

080014d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_USART2_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART2_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART2_UART_Init+0x4c>)
 8001508:	f002 fe16 	bl	8004138 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 f895 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002f4 	.word	0x200002f4
 8001520:	40004400 	.word	0x40004400

08001524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_DMA_Init+0x3c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <MX_DMA_Init+0x3c>)
 8001534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_DMA_Init+0x3c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	2038      	movs	r0, #56	; 0x38
 800154c:	f001 f91d 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001550:	2038      	movs	r0, #56	; 0x38
 8001552:	f001 f936 	bl	80027c2 <HAL_NVIC_EnableIRQ>

}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <MX_GPIO_Init+0xd0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a2c      	ldr	r2, [pc, #176]	; (8001634 <MX_GPIO_Init+0xd0>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <MX_GPIO_Init+0xd0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <MX_GPIO_Init+0xd0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a25      	ldr	r2, [pc, #148]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_GPIO_Init+0xd0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2120      	movs	r1, #32
 80015ee:	4812      	ldr	r0, [pc, #72]	; (8001638 <MX_GPIO_Init+0xd4>)
 80015f0:	f001 fdf6 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	480c      	ldr	r0, [pc, #48]	; (800163c <MX_GPIO_Init+0xd8>)
 800160c:	f001 fc64 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001610:	2320      	movs	r3, #32
 8001612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4804      	ldr	r0, [pc, #16]	; (8001638 <MX_GPIO_Init+0xd4>)
 8001628:	f001 fc56 	bl	8002ed8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	; 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020800 	.word	0x40020800

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_MspInit+0x4c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_MspInit+0x4c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800168a:	2007      	movs	r0, #7
 800168c:	f001 f872 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a33      	ldr	r2, [pc, #204]	; (8001788 <HAL_ADC_MspInit+0xec>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d15f      	bne.n	800177e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b32      	ldr	r3, [pc, #200]	; (800178c <HAL_ADC_MspInit+0xf0>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a31      	ldr	r2, [pc, #196]	; (800178c <HAL_ADC_MspInit+0xf0>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_ADC_MspInit+0xf0>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_ADC_MspInit+0xf0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a2a      	ldr	r2, [pc, #168]	; (800178c <HAL_ADC_MspInit+0xf0>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_ADC_MspInit+0xf0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f6:	2301      	movs	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fa:	2303      	movs	r3, #3
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4821      	ldr	r0, [pc, #132]	; (8001790 <HAL_ADC_MspInit+0xf4>)
 800170a:	f001 fbe5 	bl	8002ed8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 8001710:	4a21      	ldr	r2, [pc, #132]	; (8001798 <HAL_ADC_MspInit+0xfc>)
 8001712:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 8001728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 8001730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001734:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 8001738:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 8001740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001744:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001752:	4810      	ldr	r0, [pc, #64]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 8001754:	f001 f850 	bl	80027f8 <HAL_DMA_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800175e:	f7ff ff6f 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_ADC_MspInit+0xf8>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2012      	movs	r0, #18
 8001774:	f001 f809 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001778:	2012      	movs	r0, #18
 800177a:	f001 f822 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40012000 	.word	0x40012000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000
 8001794:	2000024c 	.word	0x2000024c
 8001798:	40026410 	.word	0x40026410

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ac:	d10d      	bne.n	80017ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_TIM_Base_MspInit+0x3c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_TIM_Base_MspInit+0x3c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_TIM_Base_MspInit+0x3c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_UART_MspInit+0x84>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12b      	bne.n	8001856 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_UART_MspInit+0x88>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001836:	230c      	movs	r3, #12
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001846:	2307      	movs	r3, #7
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_UART_MspInit+0x8c>)
 8001852:	f001 fb41 	bl	8002ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40004400 	.word	0x40004400
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f96a 	bl	8001b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <ADC_IRQHandler+0x10>)
 80018c6:	f000 f9c6 	bl	8001c56 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000204 	.word	0x20000204

080018d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA2_Stream0_IRQHandler+0x10>)
 80018da:	f001 f893 	bl	8002a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000024c 	.word	0x2000024c

080018e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_kill>:

int _kill(int pid, int sig)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001902:	f003 fd43 	bl	800538c <__errno>
 8001906:	4603      	mov	r3, r0
 8001908:	2216      	movs	r2, #22
 800190a:	601a      	str	r2, [r3, #0]
  return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_exit>:

void _exit (int status)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffe7 	bl	80018f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800192a:	e7fe      	b.n	800192a <_exit+0x12>

0800192c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e00a      	b.n	8001954 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800193e:	f3af 8000 	nop.w
 8001942:	4601      	mov	r1, r0
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf0      	blt.n	800193e <_read+0x12>
  }

  return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e009      	b.n	800198c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf1      	blt.n	8001978 <_write+0x12>
  }
  return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_close>:

int _close(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c6:	605a      	str	r2, [r3, #4]
  return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_isatty>:

int _isatty(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f003 fca8 	bl	800538c <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20018000 	.word	0x20018000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	200012d8 	.word	0x200012d8
 8001a70:	20001430 	.word	0x20001430

08001a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9e:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab4:	4c0b      	ldr	r4, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ac2:	f7ff ffd7 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f003 fc67 	bl	8005398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aca:	f7ff fbcb 	bl	8001264 <main>
  bx  lr    
 8001ace:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ad0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001adc:	08008870 	.word	0x08008870
  ldr r2, =_sbss
 8001ae0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ae4:	2000142c 	.word	0x2000142c

08001ae8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <DMA1_Stream0_IRQHandler>
	...

08001aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_Init+0x40>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_Init+0x40>)
 8001b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_Init+0x40>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 fe2d 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 f808 	bl	8001b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b20:	f7ff fd94 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_InitTick+0x54>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_InitTick+0x58>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fe45 	bl	80027de <HAL_SYSTICK_Config>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00e      	b.n	8001b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	d80a      	bhi.n	8001b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b64:	2200      	movs	r2, #0
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b6c:	f000 fe0d 	bl	800278a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b70:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <HAL_InitTick+0x5c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x20>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x24>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_IncTick+0x24>)
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	200012dc 	.word	0x200012dc

08001bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_GetTick+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200012dc 	.word	0x200012dc

08001bd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e033      	b.n	8001c4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fd54 	bl	800169c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d118      	bne.n	8001c40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c16:	f023 0302 	bic.w	r3, r3, #2
 8001c1a:	f043 0202 	orr.w	r2, r3, #2
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fb4e 	bl	80022c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f023 0303 	bic.w	r3, r3, #3
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c3e:	e001      	b.n	8001c44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d049      	beq.n	8001d20 <HAL_ADC_IRQHandler+0xca>
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d046      	beq.n	8001d20 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d105      	bne.n	8001caa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d12b      	bne.n	8001d10 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d127      	bne.n	8001d10 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d119      	bne.n	8001d10 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0220 	bic.w	r2, r2, #32
 8001cea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff f9e5 	bl	80010e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f06f 0212 	mvn.w	r2, #18
 8001d1e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d057      	beq.n	8001de6 <HAL_ADC_IRQHandler+0x190>
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d054      	beq.n	8001de6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d139      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d12b      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d124      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d11d      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d119      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fbf2 	bl	80025c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 020c 	mvn.w	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d017      	beq.n	8001e2c <HAL_ADC_IRQHandler+0x1d6>
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d014      	beq.n	8001e2c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10d      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f91b 	bl	8002058 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f06f 0201 	mvn.w	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e3a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d015      	beq.n	8001e6e <HAL_ADC_IRQHandler+0x218>
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d012      	beq.n	8001e6e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	f043 0202 	orr.w	r2, r3, #2
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0220 	mvn.w	r2, #32
 8001e5c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f904 	bl	800206c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0220 	mvn.w	r2, #32
 8001e6c:	601a      	str	r2, [r3, #0]
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Start_DMA+0x1e>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e0ce      	b.n	8002034 <HAL_ADC_Start_DMA+0x1bc>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d018      	beq.n	8001ede <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ebc:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_ADC_Start_DMA+0x1c4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5f      	ldr	r2, [pc, #380]	; (8002040 <HAL_ADC_Start_DMA+0x1c8>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0c9a      	lsrs	r2, r3, #18
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eec:	d107      	bne.n	8001efe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001efc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	f040 8086 	bne.w	800201a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4c:	d106      	bne.n	8001f5c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f023 0206 	bic.w	r2, r3, #6
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
 8001f5a:	e002      	b.n	8001f62 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6a:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_ADC_Start_DMA+0x1cc>)
 8001f6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	4a35      	ldr	r2, [pc, #212]	; (8002048 <HAL_ADC_Start_DMA+0x1d0>)
 8001f74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	4a34      	ldr	r2, [pc, #208]	; (800204c <HAL_ADC_Start_DMA+0x1d4>)
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	4a33      	ldr	r2, [pc, #204]	; (8002050 <HAL_ADC_Start_DMA+0x1d8>)
 8001f84:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	334c      	adds	r3, #76	; 0x4c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f000 fcc8 	bl	8002954 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10f      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d129      	bne.n	8002032 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	e020      	b.n	8002032 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <HAL_ADC_Start_DMA+0x1dc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d11b      	bne.n	8002032 <HAL_ADC_Start_DMA+0x1ba>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d114      	bne.n	8002032 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	e00b      	b.n	8002032 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f043 0210 	orr.w	r2, r3, #16
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000000 	.word	0x20000000
 8002040:	431bde83 	.word	0x431bde83
 8002044:	40012300 	.word	0x40012300
 8002048:	080024bd 	.word	0x080024bd
 800204c:	08002577 	.word	0x08002577
 8002050:	08002593 	.word	0x08002593
 8002054:	40012000 	.word	0x40012000

08002058 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1c>
 8002098:	2302      	movs	r3, #2
 800209a:	e105      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x228>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	d925      	bls.n	80020f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	3b1e      	subs	r3, #30
 80020c2:	2207      	movs	r2, #7
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43da      	mvns	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	400a      	ands	r2, r1
 80020d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68d9      	ldr	r1, [r3, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	4603      	mov	r3, r0
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4403      	add	r3, r0
 80020ea:	3b1e      	subs	r3, #30
 80020ec:	409a      	lsls	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	e022      	b.n	800213e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	2207      	movs	r2, #7
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	400a      	ands	r2, r1
 800211a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6919      	ldr	r1, [r3, #16]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	4603      	mov	r3, r0
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4403      	add	r3, r0
 8002134:	409a      	lsls	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b06      	cmp	r3, #6
 8002144:	d824      	bhi.n	8002190 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b05      	subs	r3, #5
 8002158:	221f      	movs	r2, #31
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	400a      	ands	r2, r1
 8002166:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	4618      	mov	r0, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b05      	subs	r3, #5
 8002182:	fa00 f203 	lsl.w	r2, r0, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	635a      	str	r2, [r3, #52]	; 0x34
 800218e:	e04c      	b.n	800222a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d824      	bhi.n	80021e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3b23      	subs	r3, #35	; 0x23
 80021aa:	221f      	movs	r2, #31
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43da      	mvns	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	400a      	ands	r2, r1
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	3b23      	subs	r3, #35	; 0x23
 80021d4:	fa00 f203 	lsl.w	r2, r0, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
 80021e0:	e023      	b.n	800222a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b41      	subs	r3, #65	; 0x41
 80021f4:	221f      	movs	r2, #31
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	400a      	ands	r2, r1
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	3b41      	subs	r3, #65	; 0x41
 800221e:	fa00 f203 	lsl.w	r2, r0, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_ADC_ConfigChannel+0x234>)
 800222c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <HAL_ADC_ConfigChannel+0x238>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d109      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1cc>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b12      	cmp	r3, #18
 800223e:	d105      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_ADC_ConfigChannel+0x238>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d123      	bne.n	800229e <HAL_ADC_ConfigChannel+0x21e>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b10      	cmp	r3, #16
 800225c:	d003      	beq.n	8002266 <HAL_ADC_ConfigChannel+0x1e6>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b11      	cmp	r3, #17
 8002264:	d11b      	bne.n	800229e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b10      	cmp	r3, #16
 8002278:	d111      	bne.n	800229e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_ADC_ConfigChannel+0x23c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_ADC_ConfigChannel+0x240>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	0c9a      	lsrs	r2, r3, #18
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002290:	e002      	b.n	8002298 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3b01      	subs	r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f9      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40012300 	.word	0x40012300
 80022b8:	40012000 	.word	0x40012000
 80022bc:	20000000 	.word	0x20000000
 80022c0:	431bde83 	.word	0x431bde83

080022c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022cc:	4b79      	ldr	r3, [pc, #484]	; (80024b4 <ADC_Init+0x1f0>)
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	021a      	lsls	r2, r3, #8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800231c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6899      	ldr	r1, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	4a58      	ldr	r2, [pc, #352]	; (80024b8 <ADC_Init+0x1f4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800236a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800238c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	e00f      	b.n	80023c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0202 	bic.w	r2, r2, #2
 80023d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
 80023dc:	005a      	lsls	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01b      	beq.n	8002428 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800240e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	3b01      	subs	r3, #1
 800241c:	035a      	lsls	r2, r3, #13
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	e007      	b.n	8002438 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002436:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	3b01      	subs	r3, #1
 8002454:	051a      	lsls	r2, r3, #20
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800246c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6899      	ldr	r1, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800247a:	025a      	lsls	r2, r3, #9
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	029a      	lsls	r2, r3, #10
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40012300 	.word	0x40012300
 80024b8:	0f000001 	.word	0x0f000001

080024bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d13c      	bne.n	8002550 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d12b      	bne.n	8002548 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d127      	bne.n	8002548 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002510:	2b00      	cmp	r3, #0
 8002512:	d119      	bne.n	8002548 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0220 	bic.w	r2, r2, #32
 8002522:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7fe fdc9 	bl	80010e0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800254e:	e00e      	b.n	800256e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f7ff fd85 	bl	800206c <HAL_ADC_ErrorCallback>
}
 8002562:	e004      	b.n	800256e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7fe fce7 	bl	8000f58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f7ff fd5a 	bl	800206c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db0b      	blt.n	8002662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4907      	ldr	r1, [pc, #28]	; (8002670 <__NVIC_EnableIRQ+0x38>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db0a      	blt.n	800269e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	490c      	ldr	r1, [pc, #48]	; (80026c0 <__NVIC_SetPriority+0x4c>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	440b      	add	r3, r1
 8002698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800269c:	e00a      	b.n	80026b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <__NVIC_SetPriority+0x50>)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3b04      	subs	r3, #4
 80026ac:	0112      	lsls	r2, r2, #4
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	440b      	add	r3, r1
 80026b2:	761a      	strb	r2, [r3, #24]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f1c3 0307 	rsb	r3, r3, #7
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	bf28      	it	cs
 80026e6:	2304      	movcs	r3, #4
 80026e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d902      	bls.n	80026f8 <NVIC_EncodePriority+0x30>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3b03      	subs	r3, #3
 80026f6:	e000      	b.n	80026fa <NVIC_EncodePriority+0x32>
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	401a      	ands	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	43d9      	mvns	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	4313      	orrs	r3, r2
         );
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002754:	f7ff ff8e 	bl	8002674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff29 	bl	80025d4 <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff3e 	bl	800261c <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff8e 	bl	80026c8 <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5d 	bl	8002674 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff31 	bl	8002638 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff f9d8 	bl	8001bb8 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e099      	b.n	8002948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002834:	e00f      	b.n	8002856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002836:	f7ff f9bf 	bl	8001bb8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b05      	cmp	r3, #5
 8002842:	d908      	bls.n	8002856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2203      	movs	r2, #3
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e078      	b.n	8002948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e8      	bne.n	8002836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <HAL_DMA_Init+0x158>)
 8002870:	4013      	ands	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	4313      	orrs	r3, r2
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0307 	bic.w	r3, r3, #7
 80028d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d117      	bne.n	800291a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00e      	beq.n	800291a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fa6f 	bl	8002de0 <DMA_CheckFifoParam>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002916:	2301      	movs	r3, #1
 8002918:	e016      	b.n	8002948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fa26 	bl	8002d74 <DMA_CalcBaseAndBitshift>
 8002928:	4603      	mov	r3, r0
 800292a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	223f      	movs	r2, #63	; 0x3f
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	f010803f 	.word	0xf010803f

08002954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_DMA_Start_IT+0x26>
 8002976:	2302      	movs	r3, #2
 8002978:	e040      	b.n	80029fc <HAL_DMA_Start_IT+0xa8>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d12f      	bne.n	80029ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2202      	movs	r2, #2
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f9b8 	bl	8002d18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	223f      	movs	r2, #63	; 0x3f
 80029ae:	409a      	lsls	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0216 	orr.w	r2, r2, #22
 80029c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0208 	orr.w	r2, r2, #8
 80029da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e005      	b.n	80029fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029f6:	2302      	movs	r3, #2
 80029f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a10:	4b8e      	ldr	r3, [pc, #568]	; (8002c4c <HAL_DMA_IRQHandler+0x248>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a8e      	ldr	r2, [pc, #568]	; (8002c50 <HAL_DMA_IRQHandler+0x24c>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0a9b      	lsrs	r3, r3, #10
 8002a1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	2208      	movs	r2, #8
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01a      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0204 	bic.w	r2, r2, #4
 8002a56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	2201      	movs	r2, #1
 8002a94:	409a      	lsls	r2, r3
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f043 0202 	orr.w	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2204      	movs	r2, #4
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d012      	beq.n	8002adc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00b      	beq.n	8002adc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	2204      	movs	r2, #4
 8002aca:	409a      	lsls	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	f043 0204 	orr.w	r2, r3, #4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d043      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d03c      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	2210      	movs	r2, #16
 8002b00:	409a      	lsls	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d018      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d024      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
 8002b32:	e01f      	b.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01b      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
 8002b44:	e016      	b.n	8002b74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0208 	bic.w	r2, r2, #8
 8002b62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	2220      	movs	r2, #32
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 808f 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8087 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d136      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0216 	bic.w	r2, r2, #22
 8002bbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_DMA_IRQHandler+0x1da>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0208 	bic.w	r2, r2, #8
 8002bec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	223f      	movs	r2, #63	; 0x3f
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d07e      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
        }
        return;
 8002c1a:	e079      	b.n	8002d10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01d      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10d      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d031      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
 8002c48:	e02c      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
 8002c4a:	bf00      	nop
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
 8002c64:	e01e      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10f      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0210 	bic.w	r2, r2, #16
 8002c82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d032      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d022      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2205      	movs	r2, #5
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d307      	bcc.n	8002cec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f2      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x2cc>
 8002cea:	e000      	b.n	8002cee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
 8002d0e:	e000      	b.n	8002d12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d10:	bf00      	nop
    }
  }
}
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	d108      	bne.n	8002d58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d56:	e007      	b.n	8002d68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3b10      	subs	r3, #16
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d8e:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <DMA_CalcBaseAndBitshift+0x68>)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d909      	bls.n	8002db6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	1d1a      	adds	r2, r3, #4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	659a      	str	r2, [r3, #88]	; 0x58
 8002db4:	e007      	b.n	8002dc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	aaaaaaab 	.word	0xaaaaaaab
 8002ddc:	080084b0 	.word	0x080084b0

08002de0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11f      	bne.n	8002e3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d856      	bhi.n	8002eae <DMA_CheckFifoParam+0xce>
 8002e00:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <DMA_CheckFifoParam+0x28>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e2b 	.word	0x08002e2b
 8002e10:	08002e19 	.word	0x08002e19
 8002e14:	08002eaf 	.word	0x08002eaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d046      	beq.n	8002eb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e28:	e043      	b.n	8002eb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e32:	d140      	bne.n	8002eb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e38:	e03d      	b.n	8002eb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e42:	d121      	bne.n	8002e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d837      	bhi.n	8002eba <DMA_CheckFifoParam+0xda>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <DMA_CheckFifoParam+0x70>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e61 	.word	0x08002e61
 8002e54:	08002e67 	.word	0x08002e67
 8002e58:	08002e61 	.word	0x08002e61
 8002e5c:	08002e79 	.word	0x08002e79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	e030      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d025      	beq.n	8002ebe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e76:	e022      	b.n	8002ebe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e80:	d11f      	bne.n	8002ec2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e86:	e01c      	b.n	8002ec2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d903      	bls.n	8002e96 <DMA_CheckFifoParam+0xb6>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d003      	beq.n	8002e9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e94:	e018      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9a:	e015      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002eac:	e00b      	b.n	8002ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e00a      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e008      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e006      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e004      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e002      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e159      	b.n	80031a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	f040 8148 	bne.w	80031a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d005      	beq.n	8002f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d130      	bne.n	8002f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 0201 	and.w	r2, r3, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d017      	beq.n	8002fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d123      	bne.n	800301c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	08da      	lsrs	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3208      	adds	r2, #8
 8002fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	220f      	movs	r2, #15
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	08da      	lsrs	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3208      	adds	r2, #8
 8003016:	69b9      	ldr	r1, [r7, #24]
 8003018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a2 	beq.w	80031a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b57      	ldr	r3, [pc, #348]	; (80031c0 <HAL_GPIO_Init+0x2e8>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	4a56      	ldr	r2, [pc, #344]	; (80031c0 <HAL_GPIO_Init+0x2e8>)
 8003068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306c:	6453      	str	r3, [r2, #68]	; 0x44
 800306e:	4b54      	ldr	r3, [pc, #336]	; (80031c0 <HAL_GPIO_Init+0x2e8>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307a:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_GPIO_Init+0x2ec>)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a49      	ldr	r2, [pc, #292]	; (80031c8 <HAL_GPIO_Init+0x2f0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0x202>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a48      	ldr	r2, [pc, #288]	; (80031cc <HAL_GPIO_Init+0x2f4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x1fe>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a47      	ldr	r2, [pc, #284]	; (80031d0 <HAL_GPIO_Init+0x2f8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x1fa>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a46      	ldr	r2, [pc, #280]	; (80031d4 <HAL_GPIO_Init+0x2fc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x1f6>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a45      	ldr	r2, [pc, #276]	; (80031d8 <HAL_GPIO_Init+0x300>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x1f2>
 80030c6:	2304      	movs	r3, #4
 80030c8:	e008      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030ca:	2307      	movs	r3, #7
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030ce:	2303      	movs	r3, #3
 80030d0:	e004      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e002      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_Init+0x204>
 80030da:	2300      	movs	r3, #0
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f002 0203 	and.w	r2, r2, #3
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	4093      	lsls	r3, r2
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ec:	4935      	ldr	r1, [pc, #212]	; (80031c4 <HAL_GPIO_Init+0x2ec>)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fa:	4b38      	ldr	r3, [pc, #224]	; (80031dc <HAL_GPIO_Init+0x304>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800311e:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <HAL_GPIO_Init+0x304>)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_GPIO_Init+0x304>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003148:	4a24      	ldr	r2, [pc, #144]	; (80031dc <HAL_GPIO_Init+0x304>)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800314e:	4b23      	ldr	r3, [pc, #140]	; (80031dc <HAL_GPIO_Init+0x304>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_GPIO_Init+0x304>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <HAL_GPIO_Init+0x304>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319c:	4a0f      	ldr	r2, [pc, #60]	; (80031dc <HAL_GPIO_Init+0x304>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3301      	adds	r3, #1
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	f67f aea2 	bls.w	8002ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3724      	adds	r7, #36	; 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40020400 	.word	0x40020400
 80031d0:	40020800 	.word	0x40020800
 80031d4:	40020c00 	.word	0x40020c00
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
 80031ec:	4613      	mov	r3, r2
 80031ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f0:	787b      	ldrb	r3, [r7, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031fc:	e003      	b.n	8003206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	041a      	lsls	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	619a      	str	r2, [r3, #24]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e267      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d075      	beq.n	800331e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003232:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b04      	cmp	r3, #4
 800323c:	d00c      	beq.n	8003258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323e:	4b85      	ldr	r3, [pc, #532]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003246:	2b08      	cmp	r3, #8
 8003248:	d112      	bne.n	8003270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324a:	4b82      	ldr	r3, [pc, #520]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003256:	d10b      	bne.n	8003270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	4b7e      	ldr	r3, [pc, #504]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d05b      	beq.n	800331c <HAL_RCC_OscConfig+0x108>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d157      	bne.n	800331c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e242      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d106      	bne.n	8003288 <HAL_RCC_OscConfig+0x74>
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a75      	ldr	r2, [pc, #468]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e01d      	b.n	80032c4 <HAL_RCC_OscConfig+0xb0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x98>
 8003292:	4b70      	ldr	r3, [pc, #448]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6f      	ldr	r2, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b6d      	ldr	r3, [pc, #436]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6c      	ldr	r2, [pc, #432]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e00b      	b.n	80032c4 <HAL_RCC_OscConfig+0xb0>
 80032ac:	4b69      	ldr	r3, [pc, #420]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a68      	ldr	r2, [pc, #416]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b66      	ldr	r3, [pc, #408]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a65      	ldr	r2, [pc, #404]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fe fc74 	bl	8001bb8 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe fc70 	bl	8001bb8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e207      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b5b      	ldr	r3, [pc, #364]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0xc0>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fc60 	bl	8001bb8 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fe fc5c 	bl	8001bb8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e1f3      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0xe8>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d063      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332a:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003336:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333e:	2b08      	cmp	r3, #8
 8003340:	d11c      	bne.n	800337c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003342:	4b44      	ldr	r3, [pc, #272]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d116      	bne.n	800337c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_RCC_OscConfig+0x152>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e1c7      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4937      	ldr	r1, [pc, #220]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337a:	e03a      	b.n	80033f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <HAL_RCC_OscConfig+0x244>)
 8003386:	2201      	movs	r2, #1
 8003388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fe fc15 	bl	8001bb8 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003392:	f7fe fc11 	bl	8001bb8 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e1a8      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4925      	ldr	r1, [pc, #148]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]
 80033c4:	e015      	b.n	80033f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCC_OscConfig+0x244>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fbf4 	bl	8001bb8 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d4:	f7fe fbf0 	bl	8001bb8 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e187      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d036      	beq.n	800346c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <HAL_RCC_OscConfig+0x248>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fe fbd4 	bl	8001bb8 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003414:	f7fe fbd0 	bl	8001bb8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e167      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x200>
 8003432:	e01b      	b.n	800346c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCC_OscConfig+0x248>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343a:	f7fe fbbd 	bl	8001bb8 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003440:	e00e      	b.n	8003460 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003442:	f7fe fbb9 	bl	8001bb8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d907      	bls.n	8003460 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e150      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
 8003454:	40023800 	.word	0x40023800
 8003458:	42470000 	.word	0x42470000
 800345c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	4b88      	ldr	r3, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ea      	bne.n	8003442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8097 	beq.w	80035a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b81      	ldr	r3, [pc, #516]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	4b7d      	ldr	r3, [pc, #500]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a7c      	ldr	r2, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b7a      	ldr	r3, [pc, #488]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034aa:	4b77      	ldr	r3, [pc, #476]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d118      	bne.n	80034e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b6:	4b74      	ldr	r3, [pc, #464]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a73      	ldr	r2, [pc, #460]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7fe fb79 	bl	8001bb8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7fe fb75 	bl	8001bb8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e10c      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x2ea>
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4a63      	ldr	r2, [pc, #396]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6713      	str	r3, [r2, #112]	; 0x70
 80034fc:	e01c      	b.n	8003538 <HAL_RCC_OscConfig+0x324>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b05      	cmp	r3, #5
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x30c>
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a5e      	ldr	r2, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	4b5c      	ldr	r3, [pc, #368]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a5b      	ldr	r2, [pc, #364]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0x324>
 8003520:	4b58      	ldr	r3, [pc, #352]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a57      	ldr	r2, [pc, #348]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	4b55      	ldr	r3, [pc, #340]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a54      	ldr	r2, [pc, #336]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003532:	f023 0304 	bic.w	r3, r3, #4
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d015      	beq.n	800356c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fe fb3a 	bl	8001bb8 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003548:	f7fe fb36 	bl	8001bb8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0cb      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	4b49      	ldr	r3, [pc, #292]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ee      	beq.n	8003548 <HAL_RCC_OscConfig+0x334>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356c:	f7fe fb24 	bl	8001bb8 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7fe fb20 	bl	8001bb8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0b5      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ee      	bne.n	8003574 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359c:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	4a38      	ldr	r2, [pc, #224]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80035a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a1 	beq.w	80036f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035b2:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d05c      	beq.n	8003678 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d141      	bne.n	800364a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	4b31      	ldr	r3, [pc, #196]	; (800368c <HAL_RCC_OscConfig+0x478>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe faf4 	bl	8001bb8 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fe faf0 	bl	8001bb8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e087      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	3b01      	subs	r3, #1
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	061b      	lsls	r3, r3, #24
 8003616:	491b      	ldr	r1, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x478>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fe fac9 	bl	8001bb8 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362a:	f7fe fac5 	bl	8001bb8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e05c      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x416>
 8003648:	e054      	b.n	80036f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_RCC_OscConfig+0x478>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe fab2 	bl	8001bb8 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe faae 	bl	8001bb8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e045      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x444>
 8003676:	e03d      	b.n	80036f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e038      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
 8003684:	40023800 	.word	0x40023800
 8003688:	40007000 	.word	0x40007000
 800368c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x4ec>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d028      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d121      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d11a      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d111      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	3b01      	subs	r3, #1
 80036da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800

08003704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0cc      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003718:	4b68      	ldr	r3, [pc, #416]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d90c      	bls.n	8003740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b65      	ldr	r3, [pc, #404]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800377a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d044      	beq.n	8003824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d119      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d003      	beq.n	80037c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e06f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e067      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4934      	ldr	r1, [pc, #208]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f4:	f7fe f9e0 	bl	8001bb8 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fe f9dc 	bl	8001bb8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e04f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 020c 	and.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d1eb      	bne.n	80037fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d20c      	bcs.n	800384c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe f940 	bl	8001b30 <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023c00 	.word	0x40023c00
 80038c0:	40023800 	.word	0x40023800
 80038c4:	08008498 	.word	0x08008498
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b094      	sub	sp, #80	; 0x50
 80038d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	647b      	str	r3, [r7, #68]	; 0x44
 80038dc:	2300      	movs	r3, #0
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e0:	2300      	movs	r3, #0
 80038e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e8:	4b79      	ldr	r3, [pc, #484]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d00d      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x40>
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	f200 80e1 	bhi.w	8003abc <HAL_RCC_GetSysClockFreq+0x1ec>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x34>
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d003      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x3a>
 8003902:	e0db      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b73      	ldr	r3, [pc, #460]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003906:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003908:	e0db      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800390a:	4b73      	ldr	r3, [pc, #460]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x208>)
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800390e:	e0d8      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003910:	4b6f      	ldr	r3, [pc, #444]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800391a:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d063      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003926:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	099b      	lsrs	r3, r3, #6
 800392c:	2200      	movs	r2, #0
 800392e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003930:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
 800393a:	2300      	movs	r3, #0
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
 800393e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003942:	4622      	mov	r2, r4
 8003944:	462b      	mov	r3, r5
 8003946:	f04f 0000 	mov.w	r0, #0
 800394a:	f04f 0100 	mov.w	r1, #0
 800394e:	0159      	lsls	r1, r3, #5
 8003950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003954:	0150      	lsls	r0, r2, #5
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4621      	mov	r1, r4
 800395c:	1a51      	subs	r1, r2, r1
 800395e:	6139      	str	r1, [r7, #16]
 8003960:	4629      	mov	r1, r5
 8003962:	eb63 0301 	sbc.w	r3, r3, r1
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003974:	4659      	mov	r1, fp
 8003976:	018b      	lsls	r3, r1, #6
 8003978:	4651      	mov	r1, sl
 800397a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800397e:	4651      	mov	r1, sl
 8003980:	018a      	lsls	r2, r1, #6
 8003982:	4651      	mov	r1, sl
 8003984:	ebb2 0801 	subs.w	r8, r2, r1
 8003988:	4659      	mov	r1, fp
 800398a:	eb63 0901 	sbc.w	r9, r3, r1
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800399a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800399e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039a2:	4690      	mov	r8, r2
 80039a4:	4699      	mov	r9, r3
 80039a6:	4623      	mov	r3, r4
 80039a8:	eb18 0303 	adds.w	r3, r8, r3
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	462b      	mov	r3, r5
 80039b0:	eb49 0303 	adc.w	r3, r9, r3
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039c2:	4629      	mov	r1, r5
 80039c4:	024b      	lsls	r3, r1, #9
 80039c6:	4621      	mov	r1, r4
 80039c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039cc:	4621      	mov	r1, r4
 80039ce:	024a      	lsls	r2, r1, #9
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d6:	2200      	movs	r2, #0
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039e0:	f7fd f93a 	bl	8000c58 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ec:	e058      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ee:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	099b      	lsrs	r3, r3, #6
 80039f4:	2200      	movs	r2, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	4611      	mov	r1, r2
 80039fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039fe:	623b      	str	r3, [r7, #32]
 8003a00:	2300      	movs	r3, #0
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
 8003a04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	f04f 0000 	mov.w	r0, #0
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	0159      	lsls	r1, r3, #5
 8003a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a1a:	0150      	lsls	r0, r2, #5
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4641      	mov	r1, r8
 8003a22:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a26:	4649      	mov	r1, r9
 8003a28:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a40:	ebb2 040a 	subs.w	r4, r2, sl
 8003a44:	eb63 050b 	sbc.w	r5, r3, fp
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	00eb      	lsls	r3, r5, #3
 8003a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a56:	00e2      	lsls	r2, r4, #3
 8003a58:	4614      	mov	r4, r2
 8003a5a:	461d      	mov	r5, r3
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	18e3      	adds	r3, r4, r3
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	464b      	mov	r3, r9
 8003a64:	eb45 0303 	adc.w	r3, r5, r3
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a76:	4629      	mov	r1, r5
 8003a78:	028b      	lsls	r3, r1, #10
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a80:	4621      	mov	r1, r4
 8003a82:	028a      	lsls	r2, r1, #10
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	61fa      	str	r2, [r7, #28]
 8003a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a94:	f7fd f8e0 	bl	8000c58 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003abe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3750      	adds	r7, #80	; 0x50
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	00f42400 	.word	0x00f42400
 8003ad8:	007a1200 	.word	0x007a1200

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000000 	.word	0x20000000

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af8:	f7ff fff0 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	0a9b      	lsrs	r3, r3, #10
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4903      	ldr	r1, [pc, #12]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	080084a8 	.word	0x080084a8

08003b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b20:	f7ff ffdc 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0b5b      	lsrs	r3, r3, #13
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	080084a8 	.word	0x080084a8

08003b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e041      	b.n	8003bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fe16 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f000 f950 	bl	8003e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d001      	beq.n	8003bfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e03c      	b.n	8003c76 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <HAL_TIM_Base_Start+0xa0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <HAL_TIM_Base_Start+0x5c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c16:	d013      	beq.n	8003c40 <HAL_TIM_Base_Start+0x5c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1a      	ldr	r2, [pc, #104]	; (8003c88 <HAL_TIM_Base_Start+0xa4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_TIM_Base_Start+0x5c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <HAL_TIM_Base_Start+0xa8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_TIM_Base_Start+0x5c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <HAL_TIM_Base_Start+0xac>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_TIM_Base_Start+0x5c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <HAL_TIM_Base_Start+0xb0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d111      	bne.n	8003c64 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d010      	beq.n	8003c74 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c62:	e007      	b.n	8003c74 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40014000 	.word	0x40014000

08003c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e0b4      	b.n	8003e1e <HAL_TIM_ConfigClockSource+0x186>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cec:	d03e      	beq.n	8003d6c <HAL_TIM_ConfigClockSource+0xd4>
 8003cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf2:	f200 8087 	bhi.w	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfa:	f000 8086 	beq.w	8003e0a <HAL_TIM_ConfigClockSource+0x172>
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d02:	d87f      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b70      	cmp	r3, #112	; 0x70
 8003d06:	d01a      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0xa6>
 8003d08:	2b70      	cmp	r3, #112	; 0x70
 8003d0a:	d87b      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b60      	cmp	r3, #96	; 0x60
 8003d0e:	d050      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d10:	2b60      	cmp	r3, #96	; 0x60
 8003d12:	d877      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b50      	cmp	r3, #80	; 0x50
 8003d16:	d03c      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0xfa>
 8003d18:	2b50      	cmp	r3, #80	; 0x50
 8003d1a:	d873      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d058      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d86f      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b30      	cmp	r3, #48	; 0x30
 8003d26:	d064      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d28:	2b30      	cmp	r3, #48	; 0x30
 8003d2a:	d86b      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d060      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d867      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05c      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d05a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d3c:	e062      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6899      	ldr	r1, [r3, #8]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f000 f965 	bl	800401c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	609a      	str	r2, [r3, #8]
      break;
 8003d6a:	e04f      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6899      	ldr	r1, [r3, #8]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f000 f94e 	bl	800401c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d8e:	609a      	str	r2, [r3, #8]
      break;
 8003d90:	e03c      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6859      	ldr	r1, [r3, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f000 f8c2 	bl	8003f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2150      	movs	r1, #80	; 0x50
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f91b 	bl	8003fe6 <TIM_ITRx_SetConfig>
      break;
 8003db0:	e02c      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f000 f8e1 	bl	8003f86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2160      	movs	r1, #96	; 0x60
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f90b 	bl	8003fe6 <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e01c      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6859      	ldr	r1, [r3, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f000 f8a2 	bl	8003f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2140      	movs	r1, #64	; 0x40
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f8fb 	bl	8003fe6 <TIM_ITRx_SetConfig>
      break;
 8003df0:	e00c      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f000 f8f2 	bl	8003fe6 <TIM_ITRx_SetConfig>
      break;
 8003e02:	e003      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      break;
 8003e08:	e000      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a34      	ldr	r2, [pc, #208]	; (8003f0c <TIM_Base_SetConfig+0xe4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00f      	beq.n	8003e60 <TIM_Base_SetConfig+0x38>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e46:	d00b      	beq.n	8003e60 <TIM_Base_SetConfig+0x38>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a31      	ldr	r2, [pc, #196]	; (8003f10 <TIM_Base_SetConfig+0xe8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_Base_SetConfig+0x38>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <TIM_Base_SetConfig+0xec>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_Base_SetConfig+0x38>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a2f      	ldr	r2, [pc, #188]	; (8003f18 <TIM_Base_SetConfig+0xf0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d108      	bne.n	8003e72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <TIM_Base_SetConfig+0xe4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01b      	beq.n	8003eb2 <TIM_Base_SetConfig+0x8a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e80:	d017      	beq.n	8003eb2 <TIM_Base_SetConfig+0x8a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a22      	ldr	r2, [pc, #136]	; (8003f10 <TIM_Base_SetConfig+0xe8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <TIM_Base_SetConfig+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <TIM_Base_SetConfig+0xec>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00f      	beq.n	8003eb2 <TIM_Base_SetConfig+0x8a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a20      	ldr	r2, [pc, #128]	; (8003f18 <TIM_Base_SetConfig+0xf0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00b      	beq.n	8003eb2 <TIM_Base_SetConfig+0x8a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <TIM_Base_SetConfig+0xf4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d007      	beq.n	8003eb2 <TIM_Base_SetConfig+0x8a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <TIM_Base_SetConfig+0xf8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d003      	beq.n	8003eb2 <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <TIM_Base_SetConfig+0xfc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d108      	bne.n	8003ec4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <TIM_Base_SetConfig+0xe4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d103      	bne.n	8003ef8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	615a      	str	r2, [r3, #20]
}
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800
 8003f18:	40000c00 	.word	0x40000c00
 8003f1c:	40014000 	.word	0x40014000
 8003f20:	40014400 	.word	0x40014400
 8003f24:	40014800 	.word	0x40014800

08003f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f023 0201 	bic.w	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f023 030a 	bic.w	r3, r3, #10
 8003f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b087      	sub	sp, #28
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f023 0210 	bic.w	r2, r3, #16
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	031b      	lsls	r3, r3, #12
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b085      	sub	sp, #20
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	f043 0307 	orr.w	r3, r3, #7
 8004008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	609a      	str	r2, [r3, #8]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	021a      	lsls	r2, r3, #8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	431a      	orrs	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4313      	orrs	r3, r2
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	bf00      	nop
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004070:	2302      	movs	r3, #2
 8004072:	e050      	b.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d018      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c0:	d013      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a16      	ldr	r2, [pc, #88]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a15      	ldr	r2, [pc, #84]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a13      	ldr	r2, [pc, #76]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10c      	bne.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40014000 	.word	0x40014000

08004138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e03f      	b.n	80041ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fd fb3c 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2224      	movs	r2, #36	; 0x24
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800417a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f929 	bl	80043d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b08a      	sub	sp, #40	; 0x28
 80041d6:	af02      	add	r7, sp, #8
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d17c      	bne.n	80042ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_UART_Transmit+0x2c>
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e075      	b.n	80042ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_UART_Transmit+0x3e>
 800420c:	2302      	movs	r3, #2
 800420e:	e06e      	b.n	80042ee <HAL_UART_Transmit+0x11c>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2221      	movs	r2, #33	; 0x21
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004226:	f7fd fcc7 	bl	8001bb8 <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	88fa      	ldrh	r2, [r7, #6]
 8004236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004240:	d108      	bne.n	8004254 <HAL_UART_Transmit+0x82>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	e003      	b.n	800425c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004264:	e02a      	b.n	80042bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	2180      	movs	r1, #128	; 0x80
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f840 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e036      	b.n	80042ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	3302      	adds	r3, #2
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	e007      	b.n	80042ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3301      	adds	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1cf      	bne.n	8004266 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2200      	movs	r2, #0
 80042ce:	2140      	movs	r1, #64	; 0x40
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f810 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e006      	b.n	80042ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e000      	b.n	80042ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042ec:	2302      	movs	r3, #2
  }
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b090      	sub	sp, #64	; 0x40
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004306:	e050      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800430e:	d04c      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0x30>
 8004316:	f7fd fc4f 	bl	8001bb8 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004322:	429a      	cmp	r2, r3
 8004324:	d241      	bcs.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004346:	637a      	str	r2, [r7, #52]	; 0x34
 8004348:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800434c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	613b      	str	r3, [r7, #16]
   return(result);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	63bb      	str	r3, [r7, #56]	; 0x38
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800437a:	623a      	str	r2, [r7, #32]
 800437c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	69f9      	ldr	r1, [r7, #28]
 8004380:	6a3a      	ldr	r2, [r7, #32]
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	61bb      	str	r3, [r7, #24]
   return(result);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e00f      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4013      	ands	r3, r2
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d09f      	beq.n	8004308 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3740      	adds	r7, #64	; 0x40
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d8:	b0c0      	sub	sp, #256	; 0x100
 80043da:	af00      	add	r7, sp, #0
 80043dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	68d9      	ldr	r1, [r3, #12]
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	ea40 0301 	orr.w	r3, r0, r1
 80043fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	431a      	orrs	r2, r3
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	431a      	orrs	r2, r3
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800442c:	f021 010c 	bic.w	r1, r1, #12
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800443a:	430b      	orrs	r3, r1
 800443c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444e:	6999      	ldr	r1, [r3, #24]
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	ea40 0301 	orr.w	r3, r0, r1
 800445a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b8f      	ldr	r3, [pc, #572]	; (80046a0 <UART_SetConfig+0x2cc>)
 8004464:	429a      	cmp	r2, r3
 8004466:	d005      	beq.n	8004474 <UART_SetConfig+0xa0>
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b8d      	ldr	r3, [pc, #564]	; (80046a4 <UART_SetConfig+0x2d0>)
 8004470:	429a      	cmp	r2, r3
 8004472:	d104      	bne.n	800447e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004474:	f7ff fb52 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8004478:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800447c:	e003      	b.n	8004486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800447e:	f7ff fb39 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 8004482:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004490:	f040 810c 	bne.w	80046ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800449e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	1891      	adds	r1, r2, r2
 80044ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80044ae:	415b      	adcs	r3, r3
 80044b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044b6:	4621      	mov	r1, r4
 80044b8:	eb12 0801 	adds.w	r8, r2, r1
 80044bc:	4629      	mov	r1, r5
 80044be:	eb43 0901 	adc.w	r9, r3, r1
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044d6:	4690      	mov	r8, r2
 80044d8:	4699      	mov	r9, r3
 80044da:	4623      	mov	r3, r4
 80044dc:	eb18 0303 	adds.w	r3, r8, r3
 80044e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044e4:	462b      	mov	r3, r5
 80044e6:	eb49 0303 	adc.w	r3, r9, r3
 80044ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004502:	460b      	mov	r3, r1
 8004504:	18db      	adds	r3, r3, r3
 8004506:	653b      	str	r3, [r7, #80]	; 0x50
 8004508:	4613      	mov	r3, r2
 800450a:	eb42 0303 	adc.w	r3, r2, r3
 800450e:	657b      	str	r3, [r7, #84]	; 0x54
 8004510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004518:	f7fc fb9e 	bl	8000c58 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4b61      	ldr	r3, [pc, #388]	; (80046a8 <UART_SetConfig+0x2d4>)
 8004522:	fba3 2302 	umull	r2, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	011c      	lsls	r4, r3, #4
 800452a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004534:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800453c:	4642      	mov	r2, r8
 800453e:	464b      	mov	r3, r9
 8004540:	1891      	adds	r1, r2, r2
 8004542:	64b9      	str	r1, [r7, #72]	; 0x48
 8004544:	415b      	adcs	r3, r3
 8004546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800454c:	4641      	mov	r1, r8
 800454e:	eb12 0a01 	adds.w	sl, r2, r1
 8004552:	4649      	mov	r1, r9
 8004554:	eb43 0b01 	adc.w	fp, r3, r1
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800456c:	4692      	mov	sl, r2
 800456e:	469b      	mov	fp, r3
 8004570:	4643      	mov	r3, r8
 8004572:	eb1a 0303 	adds.w	r3, sl, r3
 8004576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800457a:	464b      	mov	r3, r9
 800457c:	eb4b 0303 	adc.w	r3, fp, r3
 8004580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004590:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004598:	460b      	mov	r3, r1
 800459a:	18db      	adds	r3, r3, r3
 800459c:	643b      	str	r3, [r7, #64]	; 0x40
 800459e:	4613      	mov	r3, r2
 80045a0:	eb42 0303 	adc.w	r3, r2, r3
 80045a4:	647b      	str	r3, [r7, #68]	; 0x44
 80045a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045ae:	f7fc fb53 	bl	8000c58 <__aeabi_uldivmod>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <UART_SetConfig+0x2d4>)
 80045ba:	fba3 2301 	umull	r2, r3, r3, r1
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2264      	movs	r2, #100	; 0x64
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	1acb      	subs	r3, r1, r3
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045ce:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <UART_SetConfig+0x2d4>)
 80045d0:	fba3 2302 	umull	r2, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045dc:	441c      	add	r4, r3
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045f8:	415b      	adcs	r3, r3
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004600:	4641      	mov	r1, r8
 8004602:	1851      	adds	r1, r2, r1
 8004604:	6339      	str	r1, [r7, #48]	; 0x30
 8004606:	4649      	mov	r1, r9
 8004608:	414b      	adcs	r3, r1
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004618:	4659      	mov	r1, fp
 800461a:	00cb      	lsls	r3, r1, #3
 800461c:	4651      	mov	r1, sl
 800461e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004622:	4651      	mov	r1, sl
 8004624:	00ca      	lsls	r2, r1, #3
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	4603      	mov	r3, r0
 800462c:	4642      	mov	r2, r8
 800462e:	189b      	adds	r3, r3, r2
 8004630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004634:	464b      	mov	r3, r9
 8004636:	460a      	mov	r2, r1
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800464c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004654:	460b      	mov	r3, r1
 8004656:	18db      	adds	r3, r3, r3
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
 800465a:	4613      	mov	r3, r2
 800465c:	eb42 0303 	adc.w	r3, r2, r3
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800466a:	f7fc faf5 	bl	8000c58 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <UART_SetConfig+0x2d4>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <UART_SetConfig+0x2d4>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 0207 	and.w	r2, r3, #7
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4422      	add	r2, r4
 800469a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800469c:	e106      	b.n	80048ac <UART_SetConfig+0x4d8>
 800469e:	bf00      	nop
 80046a0:	40011000 	.word	0x40011000
 80046a4:	40011400 	.word	0x40011400
 80046a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046be:	4642      	mov	r2, r8
 80046c0:	464b      	mov	r3, r9
 80046c2:	1891      	adds	r1, r2, r2
 80046c4:	6239      	str	r1, [r7, #32]
 80046c6:	415b      	adcs	r3, r3
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ce:	4641      	mov	r1, r8
 80046d0:	1854      	adds	r4, r2, r1
 80046d2:	4649      	mov	r1, r9
 80046d4:	eb43 0501 	adc.w	r5, r3, r1
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	00eb      	lsls	r3, r5, #3
 80046e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e6:	00e2      	lsls	r2, r4, #3
 80046e8:	4614      	mov	r4, r2
 80046ea:	461d      	mov	r5, r3
 80046ec:	4643      	mov	r3, r8
 80046ee:	18e3      	adds	r3, r4, r3
 80046f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046f4:	464b      	mov	r3, r9
 80046f6:	eb45 0303 	adc.w	r3, r5, r3
 80046fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800470a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800471a:	4629      	mov	r1, r5
 800471c:	008b      	lsls	r3, r1, #2
 800471e:	4621      	mov	r1, r4
 8004720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004724:	4621      	mov	r1, r4
 8004726:	008a      	lsls	r2, r1, #2
 8004728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800472c:	f7fc fa94 	bl	8000c58 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4b60      	ldr	r3, [pc, #384]	; (80048b8 <UART_SetConfig+0x4e4>)
 8004736:	fba3 2302 	umull	r2, r3, r3, r2
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	011c      	lsls	r4, r3, #4
 800473e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004742:	2200      	movs	r2, #0
 8004744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800474c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	1891      	adds	r1, r2, r2
 8004756:	61b9      	str	r1, [r7, #24]
 8004758:	415b      	adcs	r3, r3
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004760:	4641      	mov	r1, r8
 8004762:	1851      	adds	r1, r2, r1
 8004764:	6139      	str	r1, [r7, #16]
 8004766:	4649      	mov	r1, r9
 8004768:	414b      	adcs	r3, r1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004778:	4659      	mov	r1, fp
 800477a:	00cb      	lsls	r3, r1, #3
 800477c:	4651      	mov	r1, sl
 800477e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004782:	4651      	mov	r1, sl
 8004784:	00ca      	lsls	r2, r1, #3
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	4603      	mov	r3, r0
 800478c:	4642      	mov	r2, r8
 800478e:	189b      	adds	r3, r3, r2
 8004790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004794:	464b      	mov	r3, r9
 8004796:	460a      	mov	r2, r1
 8004798:	eb42 0303 	adc.w	r3, r2, r3
 800479c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047b8:	4649      	mov	r1, r9
 80047ba:	008b      	lsls	r3, r1, #2
 80047bc:	4641      	mov	r1, r8
 80047be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c2:	4641      	mov	r1, r8
 80047c4:	008a      	lsls	r2, r1, #2
 80047c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ca:	f7fc fa45 	bl	8000c58 <__aeabi_uldivmod>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	4b38      	ldr	r3, [pc, #224]	; (80048b8 <UART_SetConfig+0x4e4>)
 80047d6:	fba3 2301 	umull	r2, r3, r3, r1
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	2264      	movs	r2, #100	; 0x64
 80047de:	fb02 f303 	mul.w	r3, r2, r3
 80047e2:	1acb      	subs	r3, r1, r3
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	3332      	adds	r3, #50	; 0x32
 80047e8:	4a33      	ldr	r2, [pc, #204]	; (80048b8 <UART_SetConfig+0x4e4>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f4:	441c      	add	r4, r3
 80047f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fa:	2200      	movs	r2, #0
 80047fc:	673b      	str	r3, [r7, #112]	; 0x70
 80047fe:	677a      	str	r2, [r7, #116]	; 0x74
 8004800:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004804:	4642      	mov	r2, r8
 8004806:	464b      	mov	r3, r9
 8004808:	1891      	adds	r1, r2, r2
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	415b      	adcs	r3, r3
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004814:	4641      	mov	r1, r8
 8004816:	1851      	adds	r1, r2, r1
 8004818:	6039      	str	r1, [r7, #0]
 800481a:	4649      	mov	r1, r9
 800481c:	414b      	adcs	r3, r1
 800481e:	607b      	str	r3, [r7, #4]
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800482c:	4659      	mov	r1, fp
 800482e:	00cb      	lsls	r3, r1, #3
 8004830:	4651      	mov	r1, sl
 8004832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004836:	4651      	mov	r1, sl
 8004838:	00ca      	lsls	r2, r1, #3
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	4603      	mov	r3, r0
 8004840:	4642      	mov	r2, r8
 8004842:	189b      	adds	r3, r3, r2
 8004844:	66bb      	str	r3, [r7, #104]	; 0x68
 8004846:	464b      	mov	r3, r9
 8004848:	460a      	mov	r2, r1
 800484a:	eb42 0303 	adc.w	r3, r2, r3
 800484e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	663b      	str	r3, [r7, #96]	; 0x60
 800485a:	667a      	str	r2, [r7, #100]	; 0x64
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004868:	4649      	mov	r1, r9
 800486a:	008b      	lsls	r3, r1, #2
 800486c:	4641      	mov	r1, r8
 800486e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004872:	4641      	mov	r1, r8
 8004874:	008a      	lsls	r2, r1, #2
 8004876:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800487a:	f7fc f9ed 	bl	8000c58 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <UART_SetConfig+0x4e4>)
 8004884:	fba3 1302 	umull	r1, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	2164      	movs	r1, #100	; 0x64
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	3332      	adds	r3, #50	; 0x32
 8004896:	4a08      	ldr	r2, [pc, #32]	; (80048b8 <UART_SetConfig+0x4e4>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 020f 	and.w	r2, r3, #15
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4422      	add	r2, r4
 80048aa:	609a      	str	r2, [r3, #8]
}
 80048ac:	bf00      	nop
 80048ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048b2:	46bd      	mov	sp, r7
 80048b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b8:	51eb851f 	.word	0x51eb851f

080048bc <__cvt>:
 80048bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	ec55 4b10 	vmov	r4, r5, d0
 80048c4:	2d00      	cmp	r5, #0
 80048c6:	460e      	mov	r6, r1
 80048c8:	4619      	mov	r1, r3
 80048ca:	462b      	mov	r3, r5
 80048cc:	bfbb      	ittet	lt
 80048ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048d2:	461d      	movlt	r5, r3
 80048d4:	2300      	movge	r3, #0
 80048d6:	232d      	movlt	r3, #45	; 0x2d
 80048d8:	700b      	strb	r3, [r1, #0]
 80048da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048e0:	4691      	mov	r9, r2
 80048e2:	f023 0820 	bic.w	r8, r3, #32
 80048e6:	bfbc      	itt	lt
 80048e8:	4622      	movlt	r2, r4
 80048ea:	4614      	movlt	r4, r2
 80048ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048f0:	d005      	beq.n	80048fe <__cvt+0x42>
 80048f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048f6:	d100      	bne.n	80048fa <__cvt+0x3e>
 80048f8:	3601      	adds	r6, #1
 80048fa:	2102      	movs	r1, #2
 80048fc:	e000      	b.n	8004900 <__cvt+0x44>
 80048fe:	2103      	movs	r1, #3
 8004900:	ab03      	add	r3, sp, #12
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	ab02      	add	r3, sp, #8
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	ec45 4b10 	vmov	d0, r4, r5
 800490c:	4653      	mov	r3, sl
 800490e:	4632      	mov	r2, r6
 8004910:	f000 fdf2 	bl	80054f8 <_dtoa_r>
 8004914:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004918:	4607      	mov	r7, r0
 800491a:	d102      	bne.n	8004922 <__cvt+0x66>
 800491c:	f019 0f01 	tst.w	r9, #1
 8004920:	d022      	beq.n	8004968 <__cvt+0xac>
 8004922:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004926:	eb07 0906 	add.w	r9, r7, r6
 800492a:	d110      	bne.n	800494e <__cvt+0x92>
 800492c:	783b      	ldrb	r3, [r7, #0]
 800492e:	2b30      	cmp	r3, #48	; 0x30
 8004930:	d10a      	bne.n	8004948 <__cvt+0x8c>
 8004932:	2200      	movs	r2, #0
 8004934:	2300      	movs	r3, #0
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	f7fc f8cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800493e:	b918      	cbnz	r0, 8004948 <__cvt+0x8c>
 8004940:	f1c6 0601 	rsb	r6, r6, #1
 8004944:	f8ca 6000 	str.w	r6, [sl]
 8004948:	f8da 3000 	ldr.w	r3, [sl]
 800494c:	4499      	add	r9, r3
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fc f8bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800495a:	b108      	cbz	r0, 8004960 <__cvt+0xa4>
 800495c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004960:	2230      	movs	r2, #48	; 0x30
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	454b      	cmp	r3, r9
 8004966:	d307      	bcc.n	8004978 <__cvt+0xbc>
 8004968:	9b03      	ldr	r3, [sp, #12]
 800496a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800496c:	1bdb      	subs	r3, r3, r7
 800496e:	4638      	mov	r0, r7
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	b004      	add	sp, #16
 8004974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	9103      	str	r1, [sp, #12]
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e7f0      	b.n	8004962 <__cvt+0xa6>

08004980 <__exponent>:
 8004980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004982:	4603      	mov	r3, r0
 8004984:	2900      	cmp	r1, #0
 8004986:	bfb8      	it	lt
 8004988:	4249      	neglt	r1, r1
 800498a:	f803 2b02 	strb.w	r2, [r3], #2
 800498e:	bfb4      	ite	lt
 8004990:	222d      	movlt	r2, #45	; 0x2d
 8004992:	222b      	movge	r2, #43	; 0x2b
 8004994:	2909      	cmp	r1, #9
 8004996:	7042      	strb	r2, [r0, #1]
 8004998:	dd2a      	ble.n	80049f0 <__exponent+0x70>
 800499a:	f10d 0207 	add.w	r2, sp, #7
 800499e:	4617      	mov	r7, r2
 80049a0:	260a      	movs	r6, #10
 80049a2:	4694      	mov	ip, r2
 80049a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80049a8:	fb06 1415 	mls	r4, r6, r5, r1
 80049ac:	3430      	adds	r4, #48	; 0x30
 80049ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80049b2:	460c      	mov	r4, r1
 80049b4:	2c63      	cmp	r4, #99	; 0x63
 80049b6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80049ba:	4629      	mov	r1, r5
 80049bc:	dcf1      	bgt.n	80049a2 <__exponent+0x22>
 80049be:	3130      	adds	r1, #48	; 0x30
 80049c0:	f1ac 0402 	sub.w	r4, ip, #2
 80049c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049c8:	1c41      	adds	r1, r0, #1
 80049ca:	4622      	mov	r2, r4
 80049cc:	42ba      	cmp	r2, r7
 80049ce:	d30a      	bcc.n	80049e6 <__exponent+0x66>
 80049d0:	f10d 0209 	add.w	r2, sp, #9
 80049d4:	eba2 020c 	sub.w	r2, r2, ip
 80049d8:	42bc      	cmp	r4, r7
 80049da:	bf88      	it	hi
 80049dc:	2200      	movhi	r2, #0
 80049de:	4413      	add	r3, r2
 80049e0:	1a18      	subs	r0, r3, r0
 80049e2:	b003      	add	sp, #12
 80049e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80049ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80049ee:	e7ed      	b.n	80049cc <__exponent+0x4c>
 80049f0:	2330      	movs	r3, #48	; 0x30
 80049f2:	3130      	adds	r1, #48	; 0x30
 80049f4:	7083      	strb	r3, [r0, #2]
 80049f6:	70c1      	strb	r1, [r0, #3]
 80049f8:	1d03      	adds	r3, r0, #4
 80049fa:	e7f1      	b.n	80049e0 <__exponent+0x60>

080049fc <_printf_float>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	ed2d 8b02 	vpush	{d8}
 8004a04:	b08d      	sub	sp, #52	; 0x34
 8004a06:	460c      	mov	r4, r1
 8004a08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a0c:	4616      	mov	r6, r2
 8004a0e:	461f      	mov	r7, r3
 8004a10:	4605      	mov	r5, r0
 8004a12:	f000 fcb7 	bl	8005384 <_localeconv_r>
 8004a16:	f8d0 a000 	ldr.w	sl, [r0]
 8004a1a:	4650      	mov	r0, sl
 8004a1c:	f7fb fc30 	bl	8000280 <strlen>
 8004a20:	2300      	movs	r3, #0
 8004a22:	930a      	str	r3, [sp, #40]	; 0x28
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	f8d8 3000 	ldr.w	r3, [r8]
 8004a2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a30:	3307      	adds	r3, #7
 8004a32:	f023 0307 	bic.w	r3, r3, #7
 8004a36:	f103 0208 	add.w	r2, r3, #8
 8004a3a:	f8c8 2000 	str.w	r2, [r8]
 8004a3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a46:	9307      	str	r3, [sp, #28]
 8004a48:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a4c:	ee08 0a10 	vmov	s16, r0
 8004a50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a58:	4b9e      	ldr	r3, [pc, #632]	; (8004cd4 <_printf_float+0x2d8>)
 8004a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a5e:	f7fc f86d 	bl	8000b3c <__aeabi_dcmpun>
 8004a62:	bb88      	cbnz	r0, 8004ac8 <_printf_float+0xcc>
 8004a64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a68:	4b9a      	ldr	r3, [pc, #616]	; (8004cd4 <_printf_float+0x2d8>)
 8004a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a6e:	f7fc f847 	bl	8000b00 <__aeabi_dcmple>
 8004a72:	bb48      	cbnz	r0, 8004ac8 <_printf_float+0xcc>
 8004a74:	2200      	movs	r2, #0
 8004a76:	2300      	movs	r3, #0
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fc f836 	bl	8000aec <__aeabi_dcmplt>
 8004a80:	b110      	cbz	r0, 8004a88 <_printf_float+0x8c>
 8004a82:	232d      	movs	r3, #45	; 0x2d
 8004a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a88:	4a93      	ldr	r2, [pc, #588]	; (8004cd8 <_printf_float+0x2dc>)
 8004a8a:	4b94      	ldr	r3, [pc, #592]	; (8004cdc <_printf_float+0x2e0>)
 8004a8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a90:	bf94      	ite	ls
 8004a92:	4690      	movls	r8, r2
 8004a94:	4698      	movhi	r8, r3
 8004a96:	2303      	movs	r3, #3
 8004a98:	6123      	str	r3, [r4, #16]
 8004a9a:	9b05      	ldr	r3, [sp, #20]
 8004a9c:	f023 0304 	bic.w	r3, r3, #4
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	f04f 0900 	mov.w	r9, #0
 8004aa6:	9700      	str	r7, [sp, #0]
 8004aa8:	4633      	mov	r3, r6
 8004aaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f9da 	bl	8004e68 <_printf_common>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	f040 8090 	bne.w	8004bda <_printf_float+0x1de>
 8004aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004abe:	b00d      	add	sp, #52	; 0x34
 8004ac0:	ecbd 8b02 	vpop	{d8}
 8004ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	4640      	mov	r0, r8
 8004ace:	4649      	mov	r1, r9
 8004ad0:	f7fc f834 	bl	8000b3c <__aeabi_dcmpun>
 8004ad4:	b140      	cbz	r0, 8004ae8 <_printf_float+0xec>
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bfbc      	itt	lt
 8004adc:	232d      	movlt	r3, #45	; 0x2d
 8004ade:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ae2:	4a7f      	ldr	r2, [pc, #508]	; (8004ce0 <_printf_float+0x2e4>)
 8004ae4:	4b7f      	ldr	r3, [pc, #508]	; (8004ce4 <_printf_float+0x2e8>)
 8004ae6:	e7d1      	b.n	8004a8c <_printf_float+0x90>
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004aee:	9206      	str	r2, [sp, #24]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	d13f      	bne.n	8004b74 <_printf_float+0x178>
 8004af4:	2306      	movs	r3, #6
 8004af6:	6063      	str	r3, [r4, #4]
 8004af8:	9b05      	ldr	r3, [sp, #20]
 8004afa:	6861      	ldr	r1, [r4, #4]
 8004afc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b00:	2300      	movs	r3, #0
 8004b02:	9303      	str	r3, [sp, #12]
 8004b04:	ab0a      	add	r3, sp, #40	; 0x28
 8004b06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b0a:	ab09      	add	r3, sp, #36	; 0x24
 8004b0c:	ec49 8b10 	vmov	d0, r8, r9
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	6022      	str	r2, [r4, #0]
 8004b14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f7ff fecf 	bl	80048bc <__cvt>
 8004b1e:	9b06      	ldr	r3, [sp, #24]
 8004b20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b22:	2b47      	cmp	r3, #71	; 0x47
 8004b24:	4680      	mov	r8, r0
 8004b26:	d108      	bne.n	8004b3a <_printf_float+0x13e>
 8004b28:	1cc8      	adds	r0, r1, #3
 8004b2a:	db02      	blt.n	8004b32 <_printf_float+0x136>
 8004b2c:	6863      	ldr	r3, [r4, #4]
 8004b2e:	4299      	cmp	r1, r3
 8004b30:	dd41      	ble.n	8004bb6 <_printf_float+0x1ba>
 8004b32:	f1ab 0302 	sub.w	r3, fp, #2
 8004b36:	fa5f fb83 	uxtb.w	fp, r3
 8004b3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b3e:	d820      	bhi.n	8004b82 <_printf_float+0x186>
 8004b40:	3901      	subs	r1, #1
 8004b42:	465a      	mov	r2, fp
 8004b44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b48:	9109      	str	r1, [sp, #36]	; 0x24
 8004b4a:	f7ff ff19 	bl	8004980 <__exponent>
 8004b4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b50:	1813      	adds	r3, r2, r0
 8004b52:	2a01      	cmp	r2, #1
 8004b54:	4681      	mov	r9, r0
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	dc02      	bgt.n	8004b60 <_printf_float+0x164>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	07d2      	lsls	r2, r2, #31
 8004b5e:	d501      	bpl.n	8004b64 <_printf_float+0x168>
 8004b60:	3301      	adds	r3, #1
 8004b62:	6123      	str	r3, [r4, #16]
 8004b64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d09c      	beq.n	8004aa6 <_printf_float+0xaa>
 8004b6c:	232d      	movs	r3, #45	; 0x2d
 8004b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b72:	e798      	b.n	8004aa6 <_printf_float+0xaa>
 8004b74:	9a06      	ldr	r2, [sp, #24]
 8004b76:	2a47      	cmp	r2, #71	; 0x47
 8004b78:	d1be      	bne.n	8004af8 <_printf_float+0xfc>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1bc      	bne.n	8004af8 <_printf_float+0xfc>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e7b9      	b.n	8004af6 <_printf_float+0xfa>
 8004b82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b86:	d118      	bne.n	8004bba <_printf_float+0x1be>
 8004b88:	2900      	cmp	r1, #0
 8004b8a:	6863      	ldr	r3, [r4, #4]
 8004b8c:	dd0b      	ble.n	8004ba6 <_printf_float+0x1aa>
 8004b8e:	6121      	str	r1, [r4, #16]
 8004b90:	b913      	cbnz	r3, 8004b98 <_printf_float+0x19c>
 8004b92:	6822      	ldr	r2, [r4, #0]
 8004b94:	07d0      	lsls	r0, r2, #31
 8004b96:	d502      	bpl.n	8004b9e <_printf_float+0x1a2>
 8004b98:	3301      	adds	r3, #1
 8004b9a:	440b      	add	r3, r1
 8004b9c:	6123      	str	r3, [r4, #16]
 8004b9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ba0:	f04f 0900 	mov.w	r9, #0
 8004ba4:	e7de      	b.n	8004b64 <_printf_float+0x168>
 8004ba6:	b913      	cbnz	r3, 8004bae <_printf_float+0x1b2>
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	07d2      	lsls	r2, r2, #31
 8004bac:	d501      	bpl.n	8004bb2 <_printf_float+0x1b6>
 8004bae:	3302      	adds	r3, #2
 8004bb0:	e7f4      	b.n	8004b9c <_printf_float+0x1a0>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e7f2      	b.n	8004b9c <_printf_float+0x1a0>
 8004bb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bbc:	4299      	cmp	r1, r3
 8004bbe:	db05      	blt.n	8004bcc <_printf_float+0x1d0>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	6121      	str	r1, [r4, #16]
 8004bc4:	07d8      	lsls	r0, r3, #31
 8004bc6:	d5ea      	bpl.n	8004b9e <_printf_float+0x1a2>
 8004bc8:	1c4b      	adds	r3, r1, #1
 8004bca:	e7e7      	b.n	8004b9c <_printf_float+0x1a0>
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	bfd4      	ite	le
 8004bd0:	f1c1 0202 	rsble	r2, r1, #2
 8004bd4:	2201      	movgt	r2, #1
 8004bd6:	4413      	add	r3, r2
 8004bd8:	e7e0      	b.n	8004b9c <_printf_float+0x1a0>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	055a      	lsls	r2, r3, #21
 8004bde:	d407      	bmi.n	8004bf0 <_printf_float+0x1f4>
 8004be0:	6923      	ldr	r3, [r4, #16]
 8004be2:	4642      	mov	r2, r8
 8004be4:	4631      	mov	r1, r6
 8004be6:	4628      	mov	r0, r5
 8004be8:	47b8      	blx	r7
 8004bea:	3001      	adds	r0, #1
 8004bec:	d12c      	bne.n	8004c48 <_printf_float+0x24c>
 8004bee:	e764      	b.n	8004aba <_printf_float+0xbe>
 8004bf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bf4:	f240 80e0 	bls.w	8004db8 <_printf_float+0x3bc>
 8004bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f7fb ff6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d034      	beq.n	8004c72 <_printf_float+0x276>
 8004c08:	4a37      	ldr	r2, [pc, #220]	; (8004ce8 <_printf_float+0x2ec>)
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	f43f af51 	beq.w	8004aba <_printf_float+0xbe>
 8004c18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	db02      	blt.n	8004c26 <_printf_float+0x22a>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	07d8      	lsls	r0, r3, #31
 8004c24:	d510      	bpl.n	8004c48 <_printf_float+0x24c>
 8004c26:	ee18 3a10 	vmov	r3, s16
 8004c2a:	4652      	mov	r2, sl
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	f43f af41 	beq.w	8004aba <_printf_float+0xbe>
 8004c38:	f04f 0800 	mov.w	r8, #0
 8004c3c:	f104 091a 	add.w	r9, r4, #26
 8004c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	4543      	cmp	r3, r8
 8004c46:	dc09      	bgt.n	8004c5c <_printf_float+0x260>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	079b      	lsls	r3, r3, #30
 8004c4c:	f100 8107 	bmi.w	8004e5e <_printf_float+0x462>
 8004c50:	68e0      	ldr	r0, [r4, #12]
 8004c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c54:	4298      	cmp	r0, r3
 8004c56:	bfb8      	it	lt
 8004c58:	4618      	movlt	r0, r3
 8004c5a:	e730      	b.n	8004abe <_printf_float+0xc2>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	464a      	mov	r2, r9
 8004c60:	4631      	mov	r1, r6
 8004c62:	4628      	mov	r0, r5
 8004c64:	47b8      	blx	r7
 8004c66:	3001      	adds	r0, #1
 8004c68:	f43f af27 	beq.w	8004aba <_printf_float+0xbe>
 8004c6c:	f108 0801 	add.w	r8, r8, #1
 8004c70:	e7e6      	b.n	8004c40 <_printf_float+0x244>
 8004c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dc39      	bgt.n	8004cec <_printf_float+0x2f0>
 8004c78:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <_printf_float+0x2ec>)
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b8      	blx	r7
 8004c82:	3001      	adds	r0, #1
 8004c84:	f43f af19 	beq.w	8004aba <_printf_float+0xbe>
 8004c88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	d102      	bne.n	8004c96 <_printf_float+0x29a>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07d9      	lsls	r1, r3, #31
 8004c94:	d5d8      	bpl.n	8004c48 <_printf_float+0x24c>
 8004c96:	ee18 3a10 	vmov	r3, s16
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f af09 	beq.w	8004aba <_printf_float+0xbe>
 8004ca8:	f04f 0900 	mov.w	r9, #0
 8004cac:	f104 0a1a 	add.w	sl, r4, #26
 8004cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb2:	425b      	negs	r3, r3
 8004cb4:	454b      	cmp	r3, r9
 8004cb6:	dc01      	bgt.n	8004cbc <_printf_float+0x2c0>
 8004cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cba:	e792      	b.n	8004be2 <_printf_float+0x1e6>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b8      	blx	r7
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	f43f aef7 	beq.w	8004aba <_printf_float+0xbe>
 8004ccc:	f109 0901 	add.w	r9, r9, #1
 8004cd0:	e7ee      	b.n	8004cb0 <_printf_float+0x2b4>
 8004cd2:	bf00      	nop
 8004cd4:	7fefffff 	.word	0x7fefffff
 8004cd8:	080084b8 	.word	0x080084b8
 8004cdc:	080084bc 	.word	0x080084bc
 8004ce0:	080084c0 	.word	0x080084c0
 8004ce4:	080084c4 	.word	0x080084c4
 8004ce8:	080084c8 	.word	0x080084c8
 8004cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	bfa8      	it	ge
 8004cf4:	461a      	movge	r2, r3
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	4691      	mov	r9, r2
 8004cfa:	dc37      	bgt.n	8004d6c <_printf_float+0x370>
 8004cfc:	f04f 0b00 	mov.w	fp, #0
 8004d00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d04:	f104 021a 	add.w	r2, r4, #26
 8004d08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d0a:	9305      	str	r3, [sp, #20]
 8004d0c:	eba3 0309 	sub.w	r3, r3, r9
 8004d10:	455b      	cmp	r3, fp
 8004d12:	dc33      	bgt.n	8004d7c <_printf_float+0x380>
 8004d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	db3b      	blt.n	8004d94 <_printf_float+0x398>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	07da      	lsls	r2, r3, #31
 8004d20:	d438      	bmi.n	8004d94 <_printf_float+0x398>
 8004d22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d26:	eba2 0903 	sub.w	r9, r2, r3
 8004d2a:	9b05      	ldr	r3, [sp, #20]
 8004d2c:	1ad2      	subs	r2, r2, r3
 8004d2e:	4591      	cmp	r9, r2
 8004d30:	bfa8      	it	ge
 8004d32:	4691      	movge	r9, r2
 8004d34:	f1b9 0f00 	cmp.w	r9, #0
 8004d38:	dc35      	bgt.n	8004da6 <_printf_float+0x3aa>
 8004d3a:	f04f 0800 	mov.w	r8, #0
 8004d3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d42:	f104 0a1a 	add.w	sl, r4, #26
 8004d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	eba3 0309 	sub.w	r3, r3, r9
 8004d50:	4543      	cmp	r3, r8
 8004d52:	f77f af79 	ble.w	8004c48 <_printf_float+0x24c>
 8004d56:	2301      	movs	r3, #1
 8004d58:	4652      	mov	r2, sl
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	f43f aeaa 	beq.w	8004aba <_printf_float+0xbe>
 8004d66:	f108 0801 	add.w	r8, r8, #1
 8004d6a:	e7ec      	b.n	8004d46 <_printf_float+0x34a>
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4642      	mov	r2, r8
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b8      	blx	r7
 8004d76:	3001      	adds	r0, #1
 8004d78:	d1c0      	bne.n	8004cfc <_printf_float+0x300>
 8004d7a:	e69e      	b.n	8004aba <_printf_float+0xbe>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4628      	mov	r0, r5
 8004d82:	9205      	str	r2, [sp, #20]
 8004d84:	47b8      	blx	r7
 8004d86:	3001      	adds	r0, #1
 8004d88:	f43f ae97 	beq.w	8004aba <_printf_float+0xbe>
 8004d8c:	9a05      	ldr	r2, [sp, #20]
 8004d8e:	f10b 0b01 	add.w	fp, fp, #1
 8004d92:	e7b9      	b.n	8004d08 <_printf_float+0x30c>
 8004d94:	ee18 3a10 	vmov	r3, s16
 8004d98:	4652      	mov	r2, sl
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	d1be      	bne.n	8004d22 <_printf_float+0x326>
 8004da4:	e689      	b.n	8004aba <_printf_float+0xbe>
 8004da6:	9a05      	ldr	r2, [sp, #20]
 8004da8:	464b      	mov	r3, r9
 8004daa:	4442      	add	r2, r8
 8004dac:	4631      	mov	r1, r6
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	d1c1      	bne.n	8004d3a <_printf_float+0x33e>
 8004db6:	e680      	b.n	8004aba <_printf_float+0xbe>
 8004db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dba:	2a01      	cmp	r2, #1
 8004dbc:	dc01      	bgt.n	8004dc2 <_printf_float+0x3c6>
 8004dbe:	07db      	lsls	r3, r3, #31
 8004dc0:	d53a      	bpl.n	8004e38 <_printf_float+0x43c>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f ae74 	beq.w	8004aba <_printf_float+0xbe>
 8004dd2:	ee18 3a10 	vmov	r3, s16
 8004dd6:	4652      	mov	r2, sl
 8004dd8:	4631      	mov	r1, r6
 8004dda:	4628      	mov	r0, r5
 8004ddc:	47b8      	blx	r7
 8004dde:	3001      	adds	r0, #1
 8004de0:	f43f ae6b 	beq.w	8004aba <_printf_float+0xbe>
 8004de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004de8:	2200      	movs	r2, #0
 8004dea:	2300      	movs	r3, #0
 8004dec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004df0:	f7fb fe72 	bl	8000ad8 <__aeabi_dcmpeq>
 8004df4:	b9d8      	cbnz	r0, 8004e2e <_printf_float+0x432>
 8004df6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004dfa:	f108 0201 	add.w	r2, r8, #1
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	d10e      	bne.n	8004e26 <_printf_float+0x42a>
 8004e08:	e657      	b.n	8004aba <_printf_float+0xbe>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	f43f ae50 	beq.w	8004aba <_printf_float+0xbe>
 8004e1a:	f108 0801 	add.w	r8, r8, #1
 8004e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	4543      	cmp	r3, r8
 8004e24:	dcf1      	bgt.n	8004e0a <_printf_float+0x40e>
 8004e26:	464b      	mov	r3, r9
 8004e28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e2c:	e6da      	b.n	8004be4 <_printf_float+0x1e8>
 8004e2e:	f04f 0800 	mov.w	r8, #0
 8004e32:	f104 0a1a 	add.w	sl, r4, #26
 8004e36:	e7f2      	b.n	8004e1e <_printf_float+0x422>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	e7df      	b.n	8004dfe <_printf_float+0x402>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	464a      	mov	r2, r9
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae36 	beq.w	8004aba <_printf_float+0xbe>
 8004e4e:	f108 0801 	add.w	r8, r8, #1
 8004e52:	68e3      	ldr	r3, [r4, #12]
 8004e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e56:	1a5b      	subs	r3, r3, r1
 8004e58:	4543      	cmp	r3, r8
 8004e5a:	dcf0      	bgt.n	8004e3e <_printf_float+0x442>
 8004e5c:	e6f8      	b.n	8004c50 <_printf_float+0x254>
 8004e5e:	f04f 0800 	mov.w	r8, #0
 8004e62:	f104 0919 	add.w	r9, r4, #25
 8004e66:	e7f4      	b.n	8004e52 <_printf_float+0x456>

08004e68 <_printf_common>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	4616      	mov	r6, r2
 8004e6e:	4699      	mov	r9, r3
 8004e70:	688a      	ldr	r2, [r1, #8]
 8004e72:	690b      	ldr	r3, [r1, #16]
 8004e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	bfb8      	it	lt
 8004e7c:	4613      	movlt	r3, r2
 8004e7e:	6033      	str	r3, [r6, #0]
 8004e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e84:	4607      	mov	r7, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	b10a      	cbz	r2, 8004e8e <_printf_common+0x26>
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	6033      	str	r3, [r6, #0]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	0699      	lsls	r1, r3, #26
 8004e92:	bf42      	ittt	mi
 8004e94:	6833      	ldrmi	r3, [r6, #0]
 8004e96:	3302      	addmi	r3, #2
 8004e98:	6033      	strmi	r3, [r6, #0]
 8004e9a:	6825      	ldr	r5, [r4, #0]
 8004e9c:	f015 0506 	ands.w	r5, r5, #6
 8004ea0:	d106      	bne.n	8004eb0 <_printf_common+0x48>
 8004ea2:	f104 0a19 	add.w	sl, r4, #25
 8004ea6:	68e3      	ldr	r3, [r4, #12]
 8004ea8:	6832      	ldr	r2, [r6, #0]
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	42ab      	cmp	r3, r5
 8004eae:	dc26      	bgt.n	8004efe <_printf_common+0x96>
 8004eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb4:	1e13      	subs	r3, r2, #0
 8004eb6:	6822      	ldr	r2, [r4, #0]
 8004eb8:	bf18      	it	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	0692      	lsls	r2, r2, #26
 8004ebe:	d42b      	bmi.n	8004f18 <_printf_common+0xb0>
 8004ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	47c0      	blx	r8
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d01e      	beq.n	8004f0c <_printf_common+0xa4>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	6922      	ldr	r2, [r4, #16]
 8004ed2:	f003 0306 	and.w	r3, r3, #6
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	bf02      	ittt	eq
 8004eda:	68e5      	ldreq	r5, [r4, #12]
 8004edc:	6833      	ldreq	r3, [r6, #0]
 8004ede:	1aed      	subeq	r5, r5, r3
 8004ee0:	68a3      	ldr	r3, [r4, #8]
 8004ee2:	bf0c      	ite	eq
 8004ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee8:	2500      	movne	r5, #0
 8004eea:	4293      	cmp	r3, r2
 8004eec:	bfc4      	itt	gt
 8004eee:	1a9b      	subgt	r3, r3, r2
 8004ef0:	18ed      	addgt	r5, r5, r3
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	341a      	adds	r4, #26
 8004ef6:	42b5      	cmp	r5, r6
 8004ef8:	d11a      	bne.n	8004f30 <_printf_common+0xc8>
 8004efa:	2000      	movs	r0, #0
 8004efc:	e008      	b.n	8004f10 <_printf_common+0xa8>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4652      	mov	r2, sl
 8004f02:	4649      	mov	r1, r9
 8004f04:	4638      	mov	r0, r7
 8004f06:	47c0      	blx	r8
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d103      	bne.n	8004f14 <_printf_common+0xac>
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f14:	3501      	adds	r5, #1
 8004f16:	e7c6      	b.n	8004ea6 <_printf_common+0x3e>
 8004f18:	18e1      	adds	r1, r4, r3
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	2030      	movs	r0, #48	; 0x30
 8004f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f22:	4422      	add	r2, r4
 8004f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	e7c7      	b.n	8004ec0 <_printf_common+0x58>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4622      	mov	r2, r4
 8004f34:	4649      	mov	r1, r9
 8004f36:	4638      	mov	r0, r7
 8004f38:	47c0      	blx	r8
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d0e6      	beq.n	8004f0c <_printf_common+0xa4>
 8004f3e:	3601      	adds	r6, #1
 8004f40:	e7d9      	b.n	8004ef6 <_printf_common+0x8e>
	...

08004f44 <_printf_i>:
 8004f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	7e0f      	ldrb	r7, [r1, #24]
 8004f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f4c:	2f78      	cmp	r7, #120	; 0x78
 8004f4e:	4691      	mov	r9, r2
 8004f50:	4680      	mov	r8, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	469a      	mov	sl, r3
 8004f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f5a:	d807      	bhi.n	8004f6c <_printf_i+0x28>
 8004f5c:	2f62      	cmp	r7, #98	; 0x62
 8004f5e:	d80a      	bhi.n	8004f76 <_printf_i+0x32>
 8004f60:	2f00      	cmp	r7, #0
 8004f62:	f000 80d4 	beq.w	800510e <_printf_i+0x1ca>
 8004f66:	2f58      	cmp	r7, #88	; 0x58
 8004f68:	f000 80c0 	beq.w	80050ec <_printf_i+0x1a8>
 8004f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f74:	e03a      	b.n	8004fec <_printf_i+0xa8>
 8004f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f7a:	2b15      	cmp	r3, #21
 8004f7c:	d8f6      	bhi.n	8004f6c <_printf_i+0x28>
 8004f7e:	a101      	add	r1, pc, #4	; (adr r1, 8004f84 <_printf_i+0x40>)
 8004f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004ff1 	.word	0x08004ff1
 8004f8c:	08004f6d 	.word	0x08004f6d
 8004f90:	08004f6d 	.word	0x08004f6d
 8004f94:	08004f6d 	.word	0x08004f6d
 8004f98:	08004f6d 	.word	0x08004f6d
 8004f9c:	08004ff1 	.word	0x08004ff1
 8004fa0:	08004f6d 	.word	0x08004f6d
 8004fa4:	08004f6d 	.word	0x08004f6d
 8004fa8:	08004f6d 	.word	0x08004f6d
 8004fac:	08004f6d 	.word	0x08004f6d
 8004fb0:	080050f5 	.word	0x080050f5
 8004fb4:	0800501d 	.word	0x0800501d
 8004fb8:	080050af 	.word	0x080050af
 8004fbc:	08004f6d 	.word	0x08004f6d
 8004fc0:	08004f6d 	.word	0x08004f6d
 8004fc4:	08005117 	.word	0x08005117
 8004fc8:	08004f6d 	.word	0x08004f6d
 8004fcc:	0800501d 	.word	0x0800501d
 8004fd0:	08004f6d 	.word	0x08004f6d
 8004fd4:	08004f6d 	.word	0x08004f6d
 8004fd8:	080050b7 	.word	0x080050b7
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	1d1a      	adds	r2, r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	602a      	str	r2, [r5, #0]
 8004fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fec:	2301      	movs	r3, #1
 8004fee:	e09f      	b.n	8005130 <_printf_i+0x1ec>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	682b      	ldr	r3, [r5, #0]
 8004ff4:	0607      	lsls	r7, r0, #24
 8004ff6:	f103 0104 	add.w	r1, r3, #4
 8004ffa:	6029      	str	r1, [r5, #0]
 8004ffc:	d501      	bpl.n	8005002 <_printf_i+0xbe>
 8004ffe:	681e      	ldr	r6, [r3, #0]
 8005000:	e003      	b.n	800500a <_printf_i+0xc6>
 8005002:	0646      	lsls	r6, r0, #25
 8005004:	d5fb      	bpl.n	8004ffe <_printf_i+0xba>
 8005006:	f9b3 6000 	ldrsh.w	r6, [r3]
 800500a:	2e00      	cmp	r6, #0
 800500c:	da03      	bge.n	8005016 <_printf_i+0xd2>
 800500e:	232d      	movs	r3, #45	; 0x2d
 8005010:	4276      	negs	r6, r6
 8005012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005016:	485a      	ldr	r0, [pc, #360]	; (8005180 <_printf_i+0x23c>)
 8005018:	230a      	movs	r3, #10
 800501a:	e012      	b.n	8005042 <_printf_i+0xfe>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	6820      	ldr	r0, [r4, #0]
 8005020:	1d19      	adds	r1, r3, #4
 8005022:	6029      	str	r1, [r5, #0]
 8005024:	0605      	lsls	r5, r0, #24
 8005026:	d501      	bpl.n	800502c <_printf_i+0xe8>
 8005028:	681e      	ldr	r6, [r3, #0]
 800502a:	e002      	b.n	8005032 <_printf_i+0xee>
 800502c:	0641      	lsls	r1, r0, #25
 800502e:	d5fb      	bpl.n	8005028 <_printf_i+0xe4>
 8005030:	881e      	ldrh	r6, [r3, #0]
 8005032:	4853      	ldr	r0, [pc, #332]	; (8005180 <_printf_i+0x23c>)
 8005034:	2f6f      	cmp	r7, #111	; 0x6f
 8005036:	bf0c      	ite	eq
 8005038:	2308      	moveq	r3, #8
 800503a:	230a      	movne	r3, #10
 800503c:	2100      	movs	r1, #0
 800503e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005042:	6865      	ldr	r5, [r4, #4]
 8005044:	60a5      	str	r5, [r4, #8]
 8005046:	2d00      	cmp	r5, #0
 8005048:	bfa2      	ittt	ge
 800504a:	6821      	ldrge	r1, [r4, #0]
 800504c:	f021 0104 	bicge.w	r1, r1, #4
 8005050:	6021      	strge	r1, [r4, #0]
 8005052:	b90e      	cbnz	r6, 8005058 <_printf_i+0x114>
 8005054:	2d00      	cmp	r5, #0
 8005056:	d04b      	beq.n	80050f0 <_printf_i+0x1ac>
 8005058:	4615      	mov	r5, r2
 800505a:	fbb6 f1f3 	udiv	r1, r6, r3
 800505e:	fb03 6711 	mls	r7, r3, r1, r6
 8005062:	5dc7      	ldrb	r7, [r0, r7]
 8005064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005068:	4637      	mov	r7, r6
 800506a:	42bb      	cmp	r3, r7
 800506c:	460e      	mov	r6, r1
 800506e:	d9f4      	bls.n	800505a <_printf_i+0x116>
 8005070:	2b08      	cmp	r3, #8
 8005072:	d10b      	bne.n	800508c <_printf_i+0x148>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	07de      	lsls	r6, r3, #31
 8005078:	d508      	bpl.n	800508c <_printf_i+0x148>
 800507a:	6923      	ldr	r3, [r4, #16]
 800507c:	6861      	ldr	r1, [r4, #4]
 800507e:	4299      	cmp	r1, r3
 8005080:	bfde      	ittt	le
 8005082:	2330      	movle	r3, #48	; 0x30
 8005084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005088:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800508c:	1b52      	subs	r2, r2, r5
 800508e:	6122      	str	r2, [r4, #16]
 8005090:	f8cd a000 	str.w	sl, [sp]
 8005094:	464b      	mov	r3, r9
 8005096:	aa03      	add	r2, sp, #12
 8005098:	4621      	mov	r1, r4
 800509a:	4640      	mov	r0, r8
 800509c:	f7ff fee4 	bl	8004e68 <_printf_common>
 80050a0:	3001      	adds	r0, #1
 80050a2:	d14a      	bne.n	800513a <_printf_i+0x1f6>
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a8:	b004      	add	sp, #16
 80050aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	f043 0320 	orr.w	r3, r3, #32
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	4833      	ldr	r0, [pc, #204]	; (8005184 <_printf_i+0x240>)
 80050b8:	2778      	movs	r7, #120	; 0x78
 80050ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	6829      	ldr	r1, [r5, #0]
 80050c2:	061f      	lsls	r7, r3, #24
 80050c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80050c8:	d402      	bmi.n	80050d0 <_printf_i+0x18c>
 80050ca:	065f      	lsls	r7, r3, #25
 80050cc:	bf48      	it	mi
 80050ce:	b2b6      	uxthmi	r6, r6
 80050d0:	07df      	lsls	r7, r3, #31
 80050d2:	bf48      	it	mi
 80050d4:	f043 0320 	orrmi.w	r3, r3, #32
 80050d8:	6029      	str	r1, [r5, #0]
 80050da:	bf48      	it	mi
 80050dc:	6023      	strmi	r3, [r4, #0]
 80050de:	b91e      	cbnz	r6, 80050e8 <_printf_i+0x1a4>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	f023 0320 	bic.w	r3, r3, #32
 80050e6:	6023      	str	r3, [r4, #0]
 80050e8:	2310      	movs	r3, #16
 80050ea:	e7a7      	b.n	800503c <_printf_i+0xf8>
 80050ec:	4824      	ldr	r0, [pc, #144]	; (8005180 <_printf_i+0x23c>)
 80050ee:	e7e4      	b.n	80050ba <_printf_i+0x176>
 80050f0:	4615      	mov	r5, r2
 80050f2:	e7bd      	b.n	8005070 <_printf_i+0x12c>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	6826      	ldr	r6, [r4, #0]
 80050f8:	6961      	ldr	r1, [r4, #20]
 80050fa:	1d18      	adds	r0, r3, #4
 80050fc:	6028      	str	r0, [r5, #0]
 80050fe:	0635      	lsls	r5, r6, #24
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	d501      	bpl.n	8005108 <_printf_i+0x1c4>
 8005104:	6019      	str	r1, [r3, #0]
 8005106:	e002      	b.n	800510e <_printf_i+0x1ca>
 8005108:	0670      	lsls	r0, r6, #25
 800510a:	d5fb      	bpl.n	8005104 <_printf_i+0x1c0>
 800510c:	8019      	strh	r1, [r3, #0]
 800510e:	2300      	movs	r3, #0
 8005110:	6123      	str	r3, [r4, #16]
 8005112:	4615      	mov	r5, r2
 8005114:	e7bc      	b.n	8005090 <_printf_i+0x14c>
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	1d1a      	adds	r2, r3, #4
 800511a:	602a      	str	r2, [r5, #0]
 800511c:	681d      	ldr	r5, [r3, #0]
 800511e:	6862      	ldr	r2, [r4, #4]
 8005120:	2100      	movs	r1, #0
 8005122:	4628      	mov	r0, r5
 8005124:	f7fb f85c 	bl	80001e0 <memchr>
 8005128:	b108      	cbz	r0, 800512e <_printf_i+0x1ea>
 800512a:	1b40      	subs	r0, r0, r5
 800512c:	6060      	str	r0, [r4, #4]
 800512e:	6863      	ldr	r3, [r4, #4]
 8005130:	6123      	str	r3, [r4, #16]
 8005132:	2300      	movs	r3, #0
 8005134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005138:	e7aa      	b.n	8005090 <_printf_i+0x14c>
 800513a:	6923      	ldr	r3, [r4, #16]
 800513c:	462a      	mov	r2, r5
 800513e:	4649      	mov	r1, r9
 8005140:	4640      	mov	r0, r8
 8005142:	47d0      	blx	sl
 8005144:	3001      	adds	r0, #1
 8005146:	d0ad      	beq.n	80050a4 <_printf_i+0x160>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	079b      	lsls	r3, r3, #30
 800514c:	d413      	bmi.n	8005176 <_printf_i+0x232>
 800514e:	68e0      	ldr	r0, [r4, #12]
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	4298      	cmp	r0, r3
 8005154:	bfb8      	it	lt
 8005156:	4618      	movlt	r0, r3
 8005158:	e7a6      	b.n	80050a8 <_printf_i+0x164>
 800515a:	2301      	movs	r3, #1
 800515c:	4632      	mov	r2, r6
 800515e:	4649      	mov	r1, r9
 8005160:	4640      	mov	r0, r8
 8005162:	47d0      	blx	sl
 8005164:	3001      	adds	r0, #1
 8005166:	d09d      	beq.n	80050a4 <_printf_i+0x160>
 8005168:	3501      	adds	r5, #1
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	9903      	ldr	r1, [sp, #12]
 800516e:	1a5b      	subs	r3, r3, r1
 8005170:	42ab      	cmp	r3, r5
 8005172:	dcf2      	bgt.n	800515a <_printf_i+0x216>
 8005174:	e7eb      	b.n	800514e <_printf_i+0x20a>
 8005176:	2500      	movs	r5, #0
 8005178:	f104 0619 	add.w	r6, r4, #25
 800517c:	e7f5      	b.n	800516a <_printf_i+0x226>
 800517e:	bf00      	nop
 8005180:	080084ca 	.word	0x080084ca
 8005184:	080084db 	.word	0x080084db

08005188 <sniprintf>:
 8005188:	b40c      	push	{r2, r3}
 800518a:	b530      	push	{r4, r5, lr}
 800518c:	4b17      	ldr	r3, [pc, #92]	; (80051ec <sniprintf+0x64>)
 800518e:	1e0c      	subs	r4, r1, #0
 8005190:	681d      	ldr	r5, [r3, #0]
 8005192:	b09d      	sub	sp, #116	; 0x74
 8005194:	da08      	bge.n	80051a8 <sniprintf+0x20>
 8005196:	238b      	movs	r3, #139	; 0x8b
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800519e:	b01d      	add	sp, #116	; 0x74
 80051a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051a4:	b002      	add	sp, #8
 80051a6:	4770      	bx	lr
 80051a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80051ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80051b0:	bf14      	ite	ne
 80051b2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80051b6:	4623      	moveq	r3, r4
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	9307      	str	r3, [sp, #28]
 80051bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051c0:	9002      	str	r0, [sp, #8]
 80051c2:	9006      	str	r0, [sp, #24]
 80051c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80051c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051ca:	ab21      	add	r3, sp, #132	; 0x84
 80051cc:	a902      	add	r1, sp, #8
 80051ce:	4628      	mov	r0, r5
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	f000 ffdd 	bl	8006190 <_svfiprintf_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	bfbc      	itt	lt
 80051da:	238b      	movlt	r3, #139	; 0x8b
 80051dc:	602b      	strlt	r3, [r5, #0]
 80051de:	2c00      	cmp	r4, #0
 80051e0:	d0dd      	beq.n	800519e <sniprintf+0x16>
 80051e2:	9b02      	ldr	r3, [sp, #8]
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e7d9      	b.n	800519e <sniprintf+0x16>
 80051ea:	bf00      	nop
 80051ec:	20000064 	.word	0x20000064

080051f0 <std>:
 80051f0:	2300      	movs	r3, #0
 80051f2:	b510      	push	{r4, lr}
 80051f4:	4604      	mov	r4, r0
 80051f6:	e9c0 3300 	strd	r3, r3, [r0]
 80051fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051fe:	6083      	str	r3, [r0, #8]
 8005200:	8181      	strh	r1, [r0, #12]
 8005202:	6643      	str	r3, [r0, #100]	; 0x64
 8005204:	81c2      	strh	r2, [r0, #14]
 8005206:	6183      	str	r3, [r0, #24]
 8005208:	4619      	mov	r1, r3
 800520a:	2208      	movs	r2, #8
 800520c:	305c      	adds	r0, #92	; 0x5c
 800520e:	f000 f8b1 	bl	8005374 <memset>
 8005212:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <std+0x58>)
 8005214:	6263      	str	r3, [r4, #36]	; 0x24
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <std+0x5c>)
 8005218:	62a3      	str	r3, [r4, #40]	; 0x28
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <std+0x60>)
 800521c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <std+0x64>)
 8005220:	6323      	str	r3, [r4, #48]	; 0x30
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <std+0x68>)
 8005224:	6224      	str	r4, [r4, #32]
 8005226:	429c      	cmp	r4, r3
 8005228:	d006      	beq.n	8005238 <std+0x48>
 800522a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800522e:	4294      	cmp	r4, r2
 8005230:	d002      	beq.n	8005238 <std+0x48>
 8005232:	33d0      	adds	r3, #208	; 0xd0
 8005234:	429c      	cmp	r4, r3
 8005236:	d105      	bne.n	8005244 <std+0x54>
 8005238:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800523c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005240:	f000 b8ce 	b.w	80053e0 <__retarget_lock_init_recursive>
 8005244:	bd10      	pop	{r4, pc}
 8005246:	bf00      	nop
 8005248:	08006d49 	.word	0x08006d49
 800524c:	08006d6b 	.word	0x08006d6b
 8005250:	08006da3 	.word	0x08006da3
 8005254:	08006dc7 	.word	0x08006dc7
 8005258:	200012e0 	.word	0x200012e0

0800525c <stdio_exit_handler>:
 800525c:	4a02      	ldr	r2, [pc, #8]	; (8005268 <stdio_exit_handler+0xc>)
 800525e:	4903      	ldr	r1, [pc, #12]	; (800526c <stdio_exit_handler+0x10>)
 8005260:	4803      	ldr	r0, [pc, #12]	; (8005270 <stdio_exit_handler+0x14>)
 8005262:	f000 b869 	b.w	8005338 <_fwalk_sglue>
 8005266:	bf00      	nop
 8005268:	2000000c 	.word	0x2000000c
 800526c:	080065e9 	.word	0x080065e9
 8005270:	20000018 	.word	0x20000018

08005274 <cleanup_stdio>:
 8005274:	6841      	ldr	r1, [r0, #4]
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <cleanup_stdio+0x34>)
 8005278:	4299      	cmp	r1, r3
 800527a:	b510      	push	{r4, lr}
 800527c:	4604      	mov	r4, r0
 800527e:	d001      	beq.n	8005284 <cleanup_stdio+0x10>
 8005280:	f001 f9b2 	bl	80065e8 <_fflush_r>
 8005284:	68a1      	ldr	r1, [r4, #8]
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <cleanup_stdio+0x38>)
 8005288:	4299      	cmp	r1, r3
 800528a:	d002      	beq.n	8005292 <cleanup_stdio+0x1e>
 800528c:	4620      	mov	r0, r4
 800528e:	f001 f9ab 	bl	80065e8 <_fflush_r>
 8005292:	68e1      	ldr	r1, [r4, #12]
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <cleanup_stdio+0x3c>)
 8005296:	4299      	cmp	r1, r3
 8005298:	d004      	beq.n	80052a4 <cleanup_stdio+0x30>
 800529a:	4620      	mov	r0, r4
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f001 b9a2 	b.w	80065e8 <_fflush_r>
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	bf00      	nop
 80052a8:	200012e0 	.word	0x200012e0
 80052ac:	20001348 	.word	0x20001348
 80052b0:	200013b0 	.word	0x200013b0

080052b4 <global_stdio_init.part.0>:
 80052b4:	b510      	push	{r4, lr}
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <global_stdio_init.part.0+0x30>)
 80052b8:	4c0b      	ldr	r4, [pc, #44]	; (80052e8 <global_stdio_init.part.0+0x34>)
 80052ba:	4a0c      	ldr	r2, [pc, #48]	; (80052ec <global_stdio_init.part.0+0x38>)
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	4620      	mov	r0, r4
 80052c0:	2200      	movs	r2, #0
 80052c2:	2104      	movs	r1, #4
 80052c4:	f7ff ff94 	bl	80051f0 <std>
 80052c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052cc:	2201      	movs	r2, #1
 80052ce:	2109      	movs	r1, #9
 80052d0:	f7ff ff8e 	bl	80051f0 <std>
 80052d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052d8:	2202      	movs	r2, #2
 80052da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052de:	2112      	movs	r1, #18
 80052e0:	f7ff bf86 	b.w	80051f0 <std>
 80052e4:	20001418 	.word	0x20001418
 80052e8:	200012e0 	.word	0x200012e0
 80052ec:	0800525d 	.word	0x0800525d

080052f0 <__sfp_lock_acquire>:
 80052f0:	4801      	ldr	r0, [pc, #4]	; (80052f8 <__sfp_lock_acquire+0x8>)
 80052f2:	f000 b876 	b.w	80053e2 <__retarget_lock_acquire_recursive>
 80052f6:	bf00      	nop
 80052f8:	2000141d 	.word	0x2000141d

080052fc <__sfp_lock_release>:
 80052fc:	4801      	ldr	r0, [pc, #4]	; (8005304 <__sfp_lock_release+0x8>)
 80052fe:	f000 b871 	b.w	80053e4 <__retarget_lock_release_recursive>
 8005302:	bf00      	nop
 8005304:	2000141d 	.word	0x2000141d

08005308 <__sinit>:
 8005308:	b510      	push	{r4, lr}
 800530a:	4604      	mov	r4, r0
 800530c:	f7ff fff0 	bl	80052f0 <__sfp_lock_acquire>
 8005310:	6a23      	ldr	r3, [r4, #32]
 8005312:	b11b      	cbz	r3, 800531c <__sinit+0x14>
 8005314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005318:	f7ff bff0 	b.w	80052fc <__sfp_lock_release>
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <__sinit+0x28>)
 800531e:	6223      	str	r3, [r4, #32]
 8005320:	4b04      	ldr	r3, [pc, #16]	; (8005334 <__sinit+0x2c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f5      	bne.n	8005314 <__sinit+0xc>
 8005328:	f7ff ffc4 	bl	80052b4 <global_stdio_init.part.0>
 800532c:	e7f2      	b.n	8005314 <__sinit+0xc>
 800532e:	bf00      	nop
 8005330:	08005275 	.word	0x08005275
 8005334:	20001418 	.word	0x20001418

08005338 <_fwalk_sglue>:
 8005338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800533c:	4607      	mov	r7, r0
 800533e:	4688      	mov	r8, r1
 8005340:	4614      	mov	r4, r2
 8005342:	2600      	movs	r6, #0
 8005344:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005348:	f1b9 0901 	subs.w	r9, r9, #1
 800534c:	d505      	bpl.n	800535a <_fwalk_sglue+0x22>
 800534e:	6824      	ldr	r4, [r4, #0]
 8005350:	2c00      	cmp	r4, #0
 8005352:	d1f7      	bne.n	8005344 <_fwalk_sglue+0xc>
 8005354:	4630      	mov	r0, r6
 8005356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535a:	89ab      	ldrh	r3, [r5, #12]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d907      	bls.n	8005370 <_fwalk_sglue+0x38>
 8005360:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005364:	3301      	adds	r3, #1
 8005366:	d003      	beq.n	8005370 <_fwalk_sglue+0x38>
 8005368:	4629      	mov	r1, r5
 800536a:	4638      	mov	r0, r7
 800536c:	47c0      	blx	r8
 800536e:	4306      	orrs	r6, r0
 8005370:	3568      	adds	r5, #104	; 0x68
 8005372:	e7e9      	b.n	8005348 <_fwalk_sglue+0x10>

08005374 <memset>:
 8005374:	4402      	add	r2, r0
 8005376:	4603      	mov	r3, r0
 8005378:	4293      	cmp	r3, r2
 800537a:	d100      	bne.n	800537e <memset+0xa>
 800537c:	4770      	bx	lr
 800537e:	f803 1b01 	strb.w	r1, [r3], #1
 8005382:	e7f9      	b.n	8005378 <memset+0x4>

08005384 <_localeconv_r>:
 8005384:	4800      	ldr	r0, [pc, #0]	; (8005388 <_localeconv_r+0x4>)
 8005386:	4770      	bx	lr
 8005388:	20000158 	.word	0x20000158

0800538c <__errno>:
 800538c:	4b01      	ldr	r3, [pc, #4]	; (8005394 <__errno+0x8>)
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000064 	.word	0x20000064

08005398 <__libc_init_array>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4d0d      	ldr	r5, [pc, #52]	; (80053d0 <__libc_init_array+0x38>)
 800539c:	4c0d      	ldr	r4, [pc, #52]	; (80053d4 <__libc_init_array+0x3c>)
 800539e:	1b64      	subs	r4, r4, r5
 80053a0:	10a4      	asrs	r4, r4, #2
 80053a2:	2600      	movs	r6, #0
 80053a4:	42a6      	cmp	r6, r4
 80053a6:	d109      	bne.n	80053bc <__libc_init_array+0x24>
 80053a8:	4d0b      	ldr	r5, [pc, #44]	; (80053d8 <__libc_init_array+0x40>)
 80053aa:	4c0c      	ldr	r4, [pc, #48]	; (80053dc <__libc_init_array+0x44>)
 80053ac:	f003 f858 	bl	8008460 <_init>
 80053b0:	1b64      	subs	r4, r4, r5
 80053b2:	10a4      	asrs	r4, r4, #2
 80053b4:	2600      	movs	r6, #0
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	d105      	bne.n	80053c6 <__libc_init_array+0x2e>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c0:	4798      	blx	r3
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7ee      	b.n	80053a4 <__libc_init_array+0xc>
 80053c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ca:	4798      	blx	r3
 80053cc:	3601      	adds	r6, #1
 80053ce:	e7f2      	b.n	80053b6 <__libc_init_array+0x1e>
 80053d0:	08008868 	.word	0x08008868
 80053d4:	08008868 	.word	0x08008868
 80053d8:	08008868 	.word	0x08008868
 80053dc:	0800886c 	.word	0x0800886c

080053e0 <__retarget_lock_init_recursive>:
 80053e0:	4770      	bx	lr

080053e2 <__retarget_lock_acquire_recursive>:
 80053e2:	4770      	bx	lr

080053e4 <__retarget_lock_release_recursive>:
 80053e4:	4770      	bx	lr

080053e6 <quorem>:
 80053e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	6903      	ldr	r3, [r0, #16]
 80053ec:	690c      	ldr	r4, [r1, #16]
 80053ee:	42a3      	cmp	r3, r4
 80053f0:	4607      	mov	r7, r0
 80053f2:	db7e      	blt.n	80054f2 <quorem+0x10c>
 80053f4:	3c01      	subs	r4, #1
 80053f6:	f101 0814 	add.w	r8, r1, #20
 80053fa:	f100 0514 	add.w	r5, r0, #20
 80053fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005408:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800540c:	3301      	adds	r3, #1
 800540e:	429a      	cmp	r2, r3
 8005410:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005414:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005418:	fbb2 f6f3 	udiv	r6, r2, r3
 800541c:	d331      	bcc.n	8005482 <quorem+0x9c>
 800541e:	f04f 0e00 	mov.w	lr, #0
 8005422:	4640      	mov	r0, r8
 8005424:	46ac      	mov	ip, r5
 8005426:	46f2      	mov	sl, lr
 8005428:	f850 2b04 	ldr.w	r2, [r0], #4
 800542c:	b293      	uxth	r3, r2
 800542e:	fb06 e303 	mla	r3, r6, r3, lr
 8005432:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005436:	0c1a      	lsrs	r2, r3, #16
 8005438:	b29b      	uxth	r3, r3
 800543a:	ebaa 0303 	sub.w	r3, sl, r3
 800543e:	f8dc a000 	ldr.w	sl, [ip]
 8005442:	fa13 f38a 	uxtah	r3, r3, sl
 8005446:	fb06 220e 	mla	r2, r6, lr, r2
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	9b00      	ldr	r3, [sp, #0]
 800544e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005452:	b292      	uxth	r2, r2
 8005454:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800545c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005460:	4581      	cmp	r9, r0
 8005462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005466:	f84c 3b04 	str.w	r3, [ip], #4
 800546a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800546e:	d2db      	bcs.n	8005428 <quorem+0x42>
 8005470:	f855 300b 	ldr.w	r3, [r5, fp]
 8005474:	b92b      	cbnz	r3, 8005482 <quorem+0x9c>
 8005476:	9b01      	ldr	r3, [sp, #4]
 8005478:	3b04      	subs	r3, #4
 800547a:	429d      	cmp	r5, r3
 800547c:	461a      	mov	r2, r3
 800547e:	d32c      	bcc.n	80054da <quorem+0xf4>
 8005480:	613c      	str	r4, [r7, #16]
 8005482:	4638      	mov	r0, r7
 8005484:	f001 fb60 	bl	8006b48 <__mcmp>
 8005488:	2800      	cmp	r0, #0
 800548a:	db22      	blt.n	80054d2 <quorem+0xec>
 800548c:	3601      	adds	r6, #1
 800548e:	4629      	mov	r1, r5
 8005490:	2000      	movs	r0, #0
 8005492:	f858 2b04 	ldr.w	r2, [r8], #4
 8005496:	f8d1 c000 	ldr.w	ip, [r1]
 800549a:	b293      	uxth	r3, r2
 800549c:	1ac3      	subs	r3, r0, r3
 800549e:	0c12      	lsrs	r2, r2, #16
 80054a0:	fa13 f38c 	uxtah	r3, r3, ip
 80054a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80054a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054b2:	45c1      	cmp	r9, r8
 80054b4:	f841 3b04 	str.w	r3, [r1], #4
 80054b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80054bc:	d2e9      	bcs.n	8005492 <quorem+0xac>
 80054be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054c6:	b922      	cbnz	r2, 80054d2 <quorem+0xec>
 80054c8:	3b04      	subs	r3, #4
 80054ca:	429d      	cmp	r5, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	d30a      	bcc.n	80054e6 <quorem+0x100>
 80054d0:	613c      	str	r4, [r7, #16]
 80054d2:	4630      	mov	r0, r6
 80054d4:	b003      	add	sp, #12
 80054d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	3b04      	subs	r3, #4
 80054de:	2a00      	cmp	r2, #0
 80054e0:	d1ce      	bne.n	8005480 <quorem+0x9a>
 80054e2:	3c01      	subs	r4, #1
 80054e4:	e7c9      	b.n	800547a <quorem+0x94>
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	3b04      	subs	r3, #4
 80054ea:	2a00      	cmp	r2, #0
 80054ec:	d1f0      	bne.n	80054d0 <quorem+0xea>
 80054ee:	3c01      	subs	r4, #1
 80054f0:	e7eb      	b.n	80054ca <quorem+0xe4>
 80054f2:	2000      	movs	r0, #0
 80054f4:	e7ee      	b.n	80054d4 <quorem+0xee>
	...

080054f8 <_dtoa_r>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	ed2d 8b04 	vpush	{d8-d9}
 8005500:	69c5      	ldr	r5, [r0, #28]
 8005502:	b093      	sub	sp, #76	; 0x4c
 8005504:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005508:	ec57 6b10 	vmov	r6, r7, d0
 800550c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005510:	9107      	str	r1, [sp, #28]
 8005512:	4604      	mov	r4, r0
 8005514:	920a      	str	r2, [sp, #40]	; 0x28
 8005516:	930d      	str	r3, [sp, #52]	; 0x34
 8005518:	b975      	cbnz	r5, 8005538 <_dtoa_r+0x40>
 800551a:	2010      	movs	r0, #16
 800551c:	f000 ff36 	bl	800638c <malloc>
 8005520:	4602      	mov	r2, r0
 8005522:	61e0      	str	r0, [r4, #28]
 8005524:	b920      	cbnz	r0, 8005530 <_dtoa_r+0x38>
 8005526:	4bae      	ldr	r3, [pc, #696]	; (80057e0 <_dtoa_r+0x2e8>)
 8005528:	21ef      	movs	r1, #239	; 0xef
 800552a:	48ae      	ldr	r0, [pc, #696]	; (80057e4 <_dtoa_r+0x2ec>)
 800552c:	f001 fcfc 	bl	8006f28 <__assert_func>
 8005530:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005534:	6005      	str	r5, [r0, #0]
 8005536:	60c5      	str	r5, [r0, #12]
 8005538:	69e3      	ldr	r3, [r4, #28]
 800553a:	6819      	ldr	r1, [r3, #0]
 800553c:	b151      	cbz	r1, 8005554 <_dtoa_r+0x5c>
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	604a      	str	r2, [r1, #4]
 8005542:	2301      	movs	r3, #1
 8005544:	4093      	lsls	r3, r2
 8005546:	608b      	str	r3, [r1, #8]
 8005548:	4620      	mov	r0, r4
 800554a:	f001 f8c1 	bl	80066d0 <_Bfree>
 800554e:	69e3      	ldr	r3, [r4, #28]
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	1e3b      	subs	r3, r7, #0
 8005556:	bfbb      	ittet	lt
 8005558:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800555c:	9303      	strlt	r3, [sp, #12]
 800555e:	2300      	movge	r3, #0
 8005560:	2201      	movlt	r2, #1
 8005562:	bfac      	ite	ge
 8005564:	f8c8 3000 	strge.w	r3, [r8]
 8005568:	f8c8 2000 	strlt.w	r2, [r8]
 800556c:	4b9e      	ldr	r3, [pc, #632]	; (80057e8 <_dtoa_r+0x2f0>)
 800556e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005572:	ea33 0308 	bics.w	r3, r3, r8
 8005576:	d11b      	bne.n	80055b0 <_dtoa_r+0xb8>
 8005578:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800557a:	f242 730f 	movw	r3, #9999	; 0x270f
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005584:	4333      	orrs	r3, r6
 8005586:	f000 8593 	beq.w	80060b0 <_dtoa_r+0xbb8>
 800558a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800558c:	b963      	cbnz	r3, 80055a8 <_dtoa_r+0xb0>
 800558e:	4b97      	ldr	r3, [pc, #604]	; (80057ec <_dtoa_r+0x2f4>)
 8005590:	e027      	b.n	80055e2 <_dtoa_r+0xea>
 8005592:	4b97      	ldr	r3, [pc, #604]	; (80057f0 <_dtoa_r+0x2f8>)
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	3308      	adds	r3, #8
 8005598:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	9800      	ldr	r0, [sp, #0]
 800559e:	b013      	add	sp, #76	; 0x4c
 80055a0:	ecbd 8b04 	vpop	{d8-d9}
 80055a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a8:	4b90      	ldr	r3, [pc, #576]	; (80057ec <_dtoa_r+0x2f4>)
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	3303      	adds	r3, #3
 80055ae:	e7f3      	b.n	8005598 <_dtoa_r+0xa0>
 80055b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	ec51 0b17 	vmov	r0, r1, d7
 80055ba:	eeb0 8a47 	vmov.f32	s16, s14
 80055be:	eef0 8a67 	vmov.f32	s17, s15
 80055c2:	2300      	movs	r3, #0
 80055c4:	f7fb fa88 	bl	8000ad8 <__aeabi_dcmpeq>
 80055c8:	4681      	mov	r9, r0
 80055ca:	b160      	cbz	r0, 80055e6 <_dtoa_r+0xee>
 80055cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055ce:	2301      	movs	r3, #1
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8568 	beq.w	80060aa <_dtoa_r+0xbb2>
 80055da:	4b86      	ldr	r3, [pc, #536]	; (80057f4 <_dtoa_r+0x2fc>)
 80055dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	e7da      	b.n	800559c <_dtoa_r+0xa4>
 80055e6:	aa10      	add	r2, sp, #64	; 0x40
 80055e8:	a911      	add	r1, sp, #68	; 0x44
 80055ea:	4620      	mov	r0, r4
 80055ec:	eeb0 0a48 	vmov.f32	s0, s16
 80055f0:	eef0 0a68 	vmov.f32	s1, s17
 80055f4:	f001 fb4e 	bl	8006c94 <__d2b>
 80055f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80055fc:	4682      	mov	sl, r0
 80055fe:	2d00      	cmp	r5, #0
 8005600:	d07f      	beq.n	8005702 <_dtoa_r+0x20a>
 8005602:	ee18 3a90 	vmov	r3, s17
 8005606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800560a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800560e:	ec51 0b18 	vmov	r0, r1, d8
 8005612:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800561a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800561e:	4619      	mov	r1, r3
 8005620:	2200      	movs	r2, #0
 8005622:	4b75      	ldr	r3, [pc, #468]	; (80057f8 <_dtoa_r+0x300>)
 8005624:	f7fa fe38 	bl	8000298 <__aeabi_dsub>
 8005628:	a367      	add	r3, pc, #412	; (adr r3, 80057c8 <_dtoa_r+0x2d0>)
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	f7fa ffeb 	bl	8000608 <__aeabi_dmul>
 8005632:	a367      	add	r3, pc, #412	; (adr r3, 80057d0 <_dtoa_r+0x2d8>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f7fa fe30 	bl	800029c <__adddf3>
 800563c:	4606      	mov	r6, r0
 800563e:	4628      	mov	r0, r5
 8005640:	460f      	mov	r7, r1
 8005642:	f7fa ff77 	bl	8000534 <__aeabi_i2d>
 8005646:	a364      	add	r3, pc, #400	; (adr r3, 80057d8 <_dtoa_r+0x2e0>)
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	f7fa ffdc 	bl	8000608 <__aeabi_dmul>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4630      	mov	r0, r6
 8005656:	4639      	mov	r1, r7
 8005658:	f7fa fe20 	bl	800029c <__adddf3>
 800565c:	4606      	mov	r6, r0
 800565e:	460f      	mov	r7, r1
 8005660:	f7fb fa82 	bl	8000b68 <__aeabi_d2iz>
 8005664:	2200      	movs	r2, #0
 8005666:	4683      	mov	fp, r0
 8005668:	2300      	movs	r3, #0
 800566a:	4630      	mov	r0, r6
 800566c:	4639      	mov	r1, r7
 800566e:	f7fb fa3d 	bl	8000aec <__aeabi_dcmplt>
 8005672:	b148      	cbz	r0, 8005688 <_dtoa_r+0x190>
 8005674:	4658      	mov	r0, fp
 8005676:	f7fa ff5d 	bl	8000534 <__aeabi_i2d>
 800567a:	4632      	mov	r2, r6
 800567c:	463b      	mov	r3, r7
 800567e:	f7fb fa2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005682:	b908      	cbnz	r0, 8005688 <_dtoa_r+0x190>
 8005684:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005688:	f1bb 0f16 	cmp.w	fp, #22
 800568c:	d857      	bhi.n	800573e <_dtoa_r+0x246>
 800568e:	4b5b      	ldr	r3, [pc, #364]	; (80057fc <_dtoa_r+0x304>)
 8005690:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	ec51 0b18 	vmov	r0, r1, d8
 800569c:	f7fb fa26 	bl	8000aec <__aeabi_dcmplt>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d04e      	beq.n	8005742 <_dtoa_r+0x24a>
 80056a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80056a8:	2300      	movs	r3, #0
 80056aa:	930c      	str	r3, [sp, #48]	; 0x30
 80056ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056ae:	1b5b      	subs	r3, r3, r5
 80056b0:	1e5a      	subs	r2, r3, #1
 80056b2:	bf45      	ittet	mi
 80056b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80056b8:	9305      	strmi	r3, [sp, #20]
 80056ba:	2300      	movpl	r3, #0
 80056bc:	2300      	movmi	r3, #0
 80056be:	9206      	str	r2, [sp, #24]
 80056c0:	bf54      	ite	pl
 80056c2:	9305      	strpl	r3, [sp, #20]
 80056c4:	9306      	strmi	r3, [sp, #24]
 80056c6:	f1bb 0f00 	cmp.w	fp, #0
 80056ca:	db3c      	blt.n	8005746 <_dtoa_r+0x24e>
 80056cc:	9b06      	ldr	r3, [sp, #24]
 80056ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80056d2:	445b      	add	r3, fp
 80056d4:	9306      	str	r3, [sp, #24]
 80056d6:	2300      	movs	r3, #0
 80056d8:	9308      	str	r3, [sp, #32]
 80056da:	9b07      	ldr	r3, [sp, #28]
 80056dc:	2b09      	cmp	r3, #9
 80056de:	d868      	bhi.n	80057b2 <_dtoa_r+0x2ba>
 80056e0:	2b05      	cmp	r3, #5
 80056e2:	bfc4      	itt	gt
 80056e4:	3b04      	subgt	r3, #4
 80056e6:	9307      	strgt	r3, [sp, #28]
 80056e8:	9b07      	ldr	r3, [sp, #28]
 80056ea:	f1a3 0302 	sub.w	r3, r3, #2
 80056ee:	bfcc      	ite	gt
 80056f0:	2500      	movgt	r5, #0
 80056f2:	2501      	movle	r5, #1
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	f200 8085 	bhi.w	8005804 <_dtoa_r+0x30c>
 80056fa:	e8df f003 	tbb	[pc, r3]
 80056fe:	3b2e      	.short	0x3b2e
 8005700:	5839      	.short	0x5839
 8005702:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005706:	441d      	add	r5, r3
 8005708:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800570c:	2b20      	cmp	r3, #32
 800570e:	bfc1      	itttt	gt
 8005710:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005714:	fa08 f803 	lslgt.w	r8, r8, r3
 8005718:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800571c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005720:	bfd6      	itet	le
 8005722:	f1c3 0320 	rsble	r3, r3, #32
 8005726:	ea48 0003 	orrgt.w	r0, r8, r3
 800572a:	fa06 f003 	lslle.w	r0, r6, r3
 800572e:	f7fa fef1 	bl	8000514 <__aeabi_ui2d>
 8005732:	2201      	movs	r2, #1
 8005734:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005738:	3d01      	subs	r5, #1
 800573a:	920e      	str	r2, [sp, #56]	; 0x38
 800573c:	e76f      	b.n	800561e <_dtoa_r+0x126>
 800573e:	2301      	movs	r3, #1
 8005740:	e7b3      	b.n	80056aa <_dtoa_r+0x1b2>
 8005742:	900c      	str	r0, [sp, #48]	; 0x30
 8005744:	e7b2      	b.n	80056ac <_dtoa_r+0x1b4>
 8005746:	9b05      	ldr	r3, [sp, #20]
 8005748:	eba3 030b 	sub.w	r3, r3, fp
 800574c:	9305      	str	r3, [sp, #20]
 800574e:	f1cb 0300 	rsb	r3, fp, #0
 8005752:	9308      	str	r3, [sp, #32]
 8005754:	2300      	movs	r3, #0
 8005756:	930b      	str	r3, [sp, #44]	; 0x2c
 8005758:	e7bf      	b.n	80056da <_dtoa_r+0x1e2>
 800575a:	2300      	movs	r3, #0
 800575c:	9309      	str	r3, [sp, #36]	; 0x24
 800575e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	dc52      	bgt.n	800580a <_dtoa_r+0x312>
 8005764:	2301      	movs	r3, #1
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	461a      	mov	r2, r3
 800576c:	920a      	str	r2, [sp, #40]	; 0x28
 800576e:	e00b      	b.n	8005788 <_dtoa_r+0x290>
 8005770:	2301      	movs	r3, #1
 8005772:	e7f3      	b.n	800575c <_dtoa_r+0x264>
 8005774:	2300      	movs	r3, #0
 8005776:	9309      	str	r3, [sp, #36]	; 0x24
 8005778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800577a:	445b      	add	r3, fp
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	3301      	adds	r3, #1
 8005780:	2b01      	cmp	r3, #1
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	bfb8      	it	lt
 8005786:	2301      	movlt	r3, #1
 8005788:	69e0      	ldr	r0, [r4, #28]
 800578a:	2100      	movs	r1, #0
 800578c:	2204      	movs	r2, #4
 800578e:	f102 0614 	add.w	r6, r2, #20
 8005792:	429e      	cmp	r6, r3
 8005794:	d93d      	bls.n	8005812 <_dtoa_r+0x31a>
 8005796:	6041      	str	r1, [r0, #4]
 8005798:	4620      	mov	r0, r4
 800579a:	f000 ff59 	bl	8006650 <_Balloc>
 800579e:	9000      	str	r0, [sp, #0]
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d139      	bne.n	8005818 <_dtoa_r+0x320>
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <_dtoa_r+0x308>)
 80057a6:	4602      	mov	r2, r0
 80057a8:	f240 11af 	movw	r1, #431	; 0x1af
 80057ac:	e6bd      	b.n	800552a <_dtoa_r+0x32>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e7e1      	b.n	8005776 <_dtoa_r+0x27e>
 80057b2:	2501      	movs	r5, #1
 80057b4:	2300      	movs	r3, #0
 80057b6:	9307      	str	r3, [sp, #28]
 80057b8:	9509      	str	r5, [sp, #36]	; 0x24
 80057ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	9304      	str	r3, [sp, #16]
 80057c2:	2200      	movs	r2, #0
 80057c4:	2312      	movs	r3, #18
 80057c6:	e7d1      	b.n	800576c <_dtoa_r+0x274>
 80057c8:	636f4361 	.word	0x636f4361
 80057cc:	3fd287a7 	.word	0x3fd287a7
 80057d0:	8b60c8b3 	.word	0x8b60c8b3
 80057d4:	3fc68a28 	.word	0x3fc68a28
 80057d8:	509f79fb 	.word	0x509f79fb
 80057dc:	3fd34413 	.word	0x3fd34413
 80057e0:	080084f9 	.word	0x080084f9
 80057e4:	08008510 	.word	0x08008510
 80057e8:	7ff00000 	.word	0x7ff00000
 80057ec:	080084f5 	.word	0x080084f5
 80057f0:	080084ec 	.word	0x080084ec
 80057f4:	080084c9 	.word	0x080084c9
 80057f8:	3ff80000 	.word	0x3ff80000
 80057fc:	08008610 	.word	0x08008610
 8005800:	08008568 	.word	0x08008568
 8005804:	2301      	movs	r3, #1
 8005806:	9309      	str	r3, [sp, #36]	; 0x24
 8005808:	e7d7      	b.n	80057ba <_dtoa_r+0x2c2>
 800580a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	9304      	str	r3, [sp, #16]
 8005810:	e7ba      	b.n	8005788 <_dtoa_r+0x290>
 8005812:	3101      	adds	r1, #1
 8005814:	0052      	lsls	r2, r2, #1
 8005816:	e7ba      	b.n	800578e <_dtoa_r+0x296>
 8005818:	69e3      	ldr	r3, [r4, #28]
 800581a:	9a00      	ldr	r2, [sp, #0]
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	9b04      	ldr	r3, [sp, #16]
 8005820:	2b0e      	cmp	r3, #14
 8005822:	f200 80a8 	bhi.w	8005976 <_dtoa_r+0x47e>
 8005826:	2d00      	cmp	r5, #0
 8005828:	f000 80a5 	beq.w	8005976 <_dtoa_r+0x47e>
 800582c:	f1bb 0f00 	cmp.w	fp, #0
 8005830:	dd38      	ble.n	80058a4 <_dtoa_r+0x3ac>
 8005832:	4bc0      	ldr	r3, [pc, #768]	; (8005b34 <_dtoa_r+0x63c>)
 8005834:	f00b 020f 	and.w	r2, fp, #15
 8005838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800583c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005840:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005844:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005848:	d019      	beq.n	800587e <_dtoa_r+0x386>
 800584a:	4bbb      	ldr	r3, [pc, #748]	; (8005b38 <_dtoa_r+0x640>)
 800584c:	ec51 0b18 	vmov	r0, r1, d8
 8005850:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005854:	f7fb f802 	bl	800085c <__aeabi_ddiv>
 8005858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800585c:	f008 080f 	and.w	r8, r8, #15
 8005860:	2503      	movs	r5, #3
 8005862:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005b38 <_dtoa_r+0x640>
 8005866:	f1b8 0f00 	cmp.w	r8, #0
 800586a:	d10a      	bne.n	8005882 <_dtoa_r+0x38a>
 800586c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005870:	4632      	mov	r2, r6
 8005872:	463b      	mov	r3, r7
 8005874:	f7fa fff2 	bl	800085c <__aeabi_ddiv>
 8005878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800587c:	e02b      	b.n	80058d6 <_dtoa_r+0x3de>
 800587e:	2502      	movs	r5, #2
 8005880:	e7ef      	b.n	8005862 <_dtoa_r+0x36a>
 8005882:	f018 0f01 	tst.w	r8, #1
 8005886:	d008      	beq.n	800589a <_dtoa_r+0x3a2>
 8005888:	4630      	mov	r0, r6
 800588a:	4639      	mov	r1, r7
 800588c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005890:	f7fa feba 	bl	8000608 <__aeabi_dmul>
 8005894:	3501      	adds	r5, #1
 8005896:	4606      	mov	r6, r0
 8005898:	460f      	mov	r7, r1
 800589a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800589e:	f109 0908 	add.w	r9, r9, #8
 80058a2:	e7e0      	b.n	8005866 <_dtoa_r+0x36e>
 80058a4:	f000 809f 	beq.w	80059e6 <_dtoa_r+0x4ee>
 80058a8:	f1cb 0600 	rsb	r6, fp, #0
 80058ac:	4ba1      	ldr	r3, [pc, #644]	; (8005b34 <_dtoa_r+0x63c>)
 80058ae:	4fa2      	ldr	r7, [pc, #648]	; (8005b38 <_dtoa_r+0x640>)
 80058b0:	f006 020f 	and.w	r2, r6, #15
 80058b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	ec51 0b18 	vmov	r0, r1, d8
 80058c0:	f7fa fea2 	bl	8000608 <__aeabi_dmul>
 80058c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058c8:	1136      	asrs	r6, r6, #4
 80058ca:	2300      	movs	r3, #0
 80058cc:	2502      	movs	r5, #2
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	d17e      	bne.n	80059d0 <_dtoa_r+0x4d8>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1d0      	bne.n	8005878 <_dtoa_r+0x380>
 80058d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8084 	beq.w	80059ea <_dtoa_r+0x4f2>
 80058e2:	4b96      	ldr	r3, [pc, #600]	; (8005b3c <_dtoa_r+0x644>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	4640      	mov	r0, r8
 80058e8:	4649      	mov	r1, r9
 80058ea:	f7fb f8ff 	bl	8000aec <__aeabi_dcmplt>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d07b      	beq.n	80059ea <_dtoa_r+0x4f2>
 80058f2:	9b04      	ldr	r3, [sp, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d078      	beq.n	80059ea <_dtoa_r+0x4f2>
 80058f8:	9b01      	ldr	r3, [sp, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	dd39      	ble.n	8005972 <_dtoa_r+0x47a>
 80058fe:	4b90      	ldr	r3, [pc, #576]	; (8005b40 <_dtoa_r+0x648>)
 8005900:	2200      	movs	r2, #0
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fa fe7f 	bl	8000608 <__aeabi_dmul>
 800590a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800590e:	9e01      	ldr	r6, [sp, #4]
 8005910:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005914:	3501      	adds	r5, #1
 8005916:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800591a:	4628      	mov	r0, r5
 800591c:	f7fa fe0a 	bl	8000534 <__aeabi_i2d>
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	f7fa fe70 	bl	8000608 <__aeabi_dmul>
 8005928:	4b86      	ldr	r3, [pc, #536]	; (8005b44 <_dtoa_r+0x64c>)
 800592a:	2200      	movs	r2, #0
 800592c:	f7fa fcb6 	bl	800029c <__adddf3>
 8005930:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005938:	9303      	str	r3, [sp, #12]
 800593a:	2e00      	cmp	r6, #0
 800593c:	d158      	bne.n	80059f0 <_dtoa_r+0x4f8>
 800593e:	4b82      	ldr	r3, [pc, #520]	; (8005b48 <_dtoa_r+0x650>)
 8005940:	2200      	movs	r2, #0
 8005942:	4640      	mov	r0, r8
 8005944:	4649      	mov	r1, r9
 8005946:	f7fa fca7 	bl	8000298 <__aeabi_dsub>
 800594a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800594e:	4680      	mov	r8, r0
 8005950:	4689      	mov	r9, r1
 8005952:	f7fb f8e9 	bl	8000b28 <__aeabi_dcmpgt>
 8005956:	2800      	cmp	r0, #0
 8005958:	f040 8296 	bne.w	8005e88 <_dtoa_r+0x990>
 800595c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005960:	4640      	mov	r0, r8
 8005962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005966:	4649      	mov	r1, r9
 8005968:	f7fb f8c0 	bl	8000aec <__aeabi_dcmplt>
 800596c:	2800      	cmp	r0, #0
 800596e:	f040 8289 	bne.w	8005e84 <_dtoa_r+0x98c>
 8005972:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005978:	2b00      	cmp	r3, #0
 800597a:	f2c0 814e 	blt.w	8005c1a <_dtoa_r+0x722>
 800597e:	f1bb 0f0e 	cmp.w	fp, #14
 8005982:	f300 814a 	bgt.w	8005c1a <_dtoa_r+0x722>
 8005986:	4b6b      	ldr	r3, [pc, #428]	; (8005b34 <_dtoa_r+0x63c>)
 8005988:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800598c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	f280 80dc 	bge.w	8005b50 <_dtoa_r+0x658>
 8005998:	9b04      	ldr	r3, [sp, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f300 80d8 	bgt.w	8005b50 <_dtoa_r+0x658>
 80059a0:	f040 826f 	bne.w	8005e82 <_dtoa_r+0x98a>
 80059a4:	4b68      	ldr	r3, [pc, #416]	; (8005b48 <_dtoa_r+0x650>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	4640      	mov	r0, r8
 80059aa:	4649      	mov	r1, r9
 80059ac:	f7fa fe2c 	bl	8000608 <__aeabi_dmul>
 80059b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059b4:	f7fb f8ae 	bl	8000b14 <__aeabi_dcmpge>
 80059b8:	9e04      	ldr	r6, [sp, #16]
 80059ba:	4637      	mov	r7, r6
 80059bc:	2800      	cmp	r0, #0
 80059be:	f040 8245 	bne.w	8005e4c <_dtoa_r+0x954>
 80059c2:	9d00      	ldr	r5, [sp, #0]
 80059c4:	2331      	movs	r3, #49	; 0x31
 80059c6:	f805 3b01 	strb.w	r3, [r5], #1
 80059ca:	f10b 0b01 	add.w	fp, fp, #1
 80059ce:	e241      	b.n	8005e54 <_dtoa_r+0x95c>
 80059d0:	07f2      	lsls	r2, r6, #31
 80059d2:	d505      	bpl.n	80059e0 <_dtoa_r+0x4e8>
 80059d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d8:	f7fa fe16 	bl	8000608 <__aeabi_dmul>
 80059dc:	3501      	adds	r5, #1
 80059de:	2301      	movs	r3, #1
 80059e0:	1076      	asrs	r6, r6, #1
 80059e2:	3708      	adds	r7, #8
 80059e4:	e773      	b.n	80058ce <_dtoa_r+0x3d6>
 80059e6:	2502      	movs	r5, #2
 80059e8:	e775      	b.n	80058d6 <_dtoa_r+0x3de>
 80059ea:	9e04      	ldr	r6, [sp, #16]
 80059ec:	465f      	mov	r7, fp
 80059ee:	e792      	b.n	8005916 <_dtoa_r+0x41e>
 80059f0:	9900      	ldr	r1, [sp, #0]
 80059f2:	4b50      	ldr	r3, [pc, #320]	; (8005b34 <_dtoa_r+0x63c>)
 80059f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059f8:	4431      	add	r1, r6
 80059fa:	9102      	str	r1, [sp, #8]
 80059fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059fe:	eeb0 9a47 	vmov.f32	s18, s14
 8005a02:	eef0 9a67 	vmov.f32	s19, s15
 8005a06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a0e:	2900      	cmp	r1, #0
 8005a10:	d044      	beq.n	8005a9c <_dtoa_r+0x5a4>
 8005a12:	494e      	ldr	r1, [pc, #312]	; (8005b4c <_dtoa_r+0x654>)
 8005a14:	2000      	movs	r0, #0
 8005a16:	f7fa ff21 	bl	800085c <__aeabi_ddiv>
 8005a1a:	ec53 2b19 	vmov	r2, r3, d9
 8005a1e:	f7fa fc3b 	bl	8000298 <__aeabi_dsub>
 8005a22:	9d00      	ldr	r5, [sp, #0]
 8005a24:	ec41 0b19 	vmov	d9, r0, r1
 8005a28:	4649      	mov	r1, r9
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f7fb f89c 	bl	8000b68 <__aeabi_d2iz>
 8005a30:	4606      	mov	r6, r0
 8005a32:	f7fa fd7f 	bl	8000534 <__aeabi_i2d>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	f7fa fc2b 	bl	8000298 <__aeabi_dsub>
 8005a42:	3630      	adds	r6, #48	; 0x30
 8005a44:	f805 6b01 	strb.w	r6, [r5], #1
 8005a48:	ec53 2b19 	vmov	r2, r3, d9
 8005a4c:	4680      	mov	r8, r0
 8005a4e:	4689      	mov	r9, r1
 8005a50:	f7fb f84c 	bl	8000aec <__aeabi_dcmplt>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d164      	bne.n	8005b22 <_dtoa_r+0x62a>
 8005a58:	4642      	mov	r2, r8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	4937      	ldr	r1, [pc, #220]	; (8005b3c <_dtoa_r+0x644>)
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f7fa fc1a 	bl	8000298 <__aeabi_dsub>
 8005a64:	ec53 2b19 	vmov	r2, r3, d9
 8005a68:	f7fb f840 	bl	8000aec <__aeabi_dcmplt>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	f040 80b6 	bne.w	8005bde <_dtoa_r+0x6e6>
 8005a72:	9b02      	ldr	r3, [sp, #8]
 8005a74:	429d      	cmp	r5, r3
 8005a76:	f43f af7c 	beq.w	8005972 <_dtoa_r+0x47a>
 8005a7a:	4b31      	ldr	r3, [pc, #196]	; (8005b40 <_dtoa_r+0x648>)
 8005a7c:	ec51 0b19 	vmov	r0, r1, d9
 8005a80:	2200      	movs	r2, #0
 8005a82:	f7fa fdc1 	bl	8000608 <__aeabi_dmul>
 8005a86:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <_dtoa_r+0x648>)
 8005a88:	ec41 0b19 	vmov	d9, r0, r1
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4640      	mov	r0, r8
 8005a90:	4649      	mov	r1, r9
 8005a92:	f7fa fdb9 	bl	8000608 <__aeabi_dmul>
 8005a96:	4680      	mov	r8, r0
 8005a98:	4689      	mov	r9, r1
 8005a9a:	e7c5      	b.n	8005a28 <_dtoa_r+0x530>
 8005a9c:	ec51 0b17 	vmov	r0, r1, d7
 8005aa0:	f7fa fdb2 	bl	8000608 <__aeabi_dmul>
 8005aa4:	9b02      	ldr	r3, [sp, #8]
 8005aa6:	9d00      	ldr	r5, [sp, #0]
 8005aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005aaa:	ec41 0b19 	vmov	d9, r0, r1
 8005aae:	4649      	mov	r1, r9
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	f7fb f859 	bl	8000b68 <__aeabi_d2iz>
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	f7fa fd3c 	bl	8000534 <__aeabi_i2d>
 8005abc:	3630      	adds	r6, #48	; 0x30
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	f7fa fbe7 	bl	8000298 <__aeabi_dsub>
 8005aca:	f805 6b01 	strb.w	r6, [r5], #1
 8005ace:	9b02      	ldr	r3, [sp, #8]
 8005ad0:	429d      	cmp	r5, r3
 8005ad2:	4680      	mov	r8, r0
 8005ad4:	4689      	mov	r9, r1
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	d124      	bne.n	8005b26 <_dtoa_r+0x62e>
 8005adc:	4b1b      	ldr	r3, [pc, #108]	; (8005b4c <_dtoa_r+0x654>)
 8005ade:	ec51 0b19 	vmov	r0, r1, d9
 8005ae2:	f7fa fbdb 	bl	800029c <__adddf3>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4640      	mov	r0, r8
 8005aec:	4649      	mov	r1, r9
 8005aee:	f7fb f81b 	bl	8000b28 <__aeabi_dcmpgt>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d173      	bne.n	8005bde <_dtoa_r+0x6e6>
 8005af6:	ec53 2b19 	vmov	r2, r3, d9
 8005afa:	4914      	ldr	r1, [pc, #80]	; (8005b4c <_dtoa_r+0x654>)
 8005afc:	2000      	movs	r0, #0
 8005afe:	f7fa fbcb 	bl	8000298 <__aeabi_dsub>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa ffef 	bl	8000aec <__aeabi_dcmplt>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f43f af2f 	beq.w	8005972 <_dtoa_r+0x47a>
 8005b14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005b16:	1e6b      	subs	r3, r5, #1
 8005b18:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b1e:	2b30      	cmp	r3, #48	; 0x30
 8005b20:	d0f8      	beq.n	8005b14 <_dtoa_r+0x61c>
 8005b22:	46bb      	mov	fp, r7
 8005b24:	e04a      	b.n	8005bbc <_dtoa_r+0x6c4>
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <_dtoa_r+0x648>)
 8005b28:	f7fa fd6e 	bl	8000608 <__aeabi_dmul>
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	4689      	mov	r9, r1
 8005b30:	e7bd      	b.n	8005aae <_dtoa_r+0x5b6>
 8005b32:	bf00      	nop
 8005b34:	08008610 	.word	0x08008610
 8005b38:	080085e8 	.word	0x080085e8
 8005b3c:	3ff00000 	.word	0x3ff00000
 8005b40:	40240000 	.word	0x40240000
 8005b44:	401c0000 	.word	0x401c0000
 8005b48:	40140000 	.word	0x40140000
 8005b4c:	3fe00000 	.word	0x3fe00000
 8005b50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b54:	9d00      	ldr	r5, [sp, #0]
 8005b56:	4642      	mov	r2, r8
 8005b58:	464b      	mov	r3, r9
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	f7fa fe7d 	bl	800085c <__aeabi_ddiv>
 8005b62:	f7fb f801 	bl	8000b68 <__aeabi_d2iz>
 8005b66:	9001      	str	r0, [sp, #4]
 8005b68:	f7fa fce4 	bl	8000534 <__aeabi_i2d>
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	464b      	mov	r3, r9
 8005b70:	f7fa fd4a 	bl	8000608 <__aeabi_dmul>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4630      	mov	r0, r6
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	f7fa fb8c 	bl	8000298 <__aeabi_dsub>
 8005b80:	9e01      	ldr	r6, [sp, #4]
 8005b82:	9f04      	ldr	r7, [sp, #16]
 8005b84:	3630      	adds	r6, #48	; 0x30
 8005b86:	f805 6b01 	strb.w	r6, [r5], #1
 8005b8a:	9e00      	ldr	r6, [sp, #0]
 8005b8c:	1bae      	subs	r6, r5, r6
 8005b8e:	42b7      	cmp	r7, r6
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	d134      	bne.n	8005c00 <_dtoa_r+0x708>
 8005b96:	f7fa fb81 	bl	800029c <__adddf3>
 8005b9a:	4642      	mov	r2, r8
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460f      	mov	r7, r1
 8005ba2:	f7fa ffc1 	bl	8000b28 <__aeabi_dcmpgt>
 8005ba6:	b9c8      	cbnz	r0, 8005bdc <_dtoa_r+0x6e4>
 8005ba8:	4642      	mov	r2, r8
 8005baa:	464b      	mov	r3, r9
 8005bac:	4630      	mov	r0, r6
 8005bae:	4639      	mov	r1, r7
 8005bb0:	f7fa ff92 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bb4:	b110      	cbz	r0, 8005bbc <_dtoa_r+0x6c4>
 8005bb6:	9b01      	ldr	r3, [sp, #4]
 8005bb8:	07db      	lsls	r3, r3, #31
 8005bba:	d40f      	bmi.n	8005bdc <_dtoa_r+0x6e4>
 8005bbc:	4651      	mov	r1, sl
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 fd86 	bl	80066d0 <_Bfree>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bc8:	702b      	strb	r3, [r5, #0]
 8005bca:	f10b 0301 	add.w	r3, fp, #1
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f43f ace2 	beq.w	800559c <_dtoa_r+0xa4>
 8005bd8:	601d      	str	r5, [r3, #0]
 8005bda:	e4df      	b.n	800559c <_dtoa_r+0xa4>
 8005bdc:	465f      	mov	r7, fp
 8005bde:	462b      	mov	r3, r5
 8005be0:	461d      	mov	r5, r3
 8005be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005be6:	2a39      	cmp	r2, #57	; 0x39
 8005be8:	d106      	bne.n	8005bf8 <_dtoa_r+0x700>
 8005bea:	9a00      	ldr	r2, [sp, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d1f7      	bne.n	8005be0 <_dtoa_r+0x6e8>
 8005bf0:	9900      	ldr	r1, [sp, #0]
 8005bf2:	2230      	movs	r2, #48	; 0x30
 8005bf4:	3701      	adds	r7, #1
 8005bf6:	700a      	strb	r2, [r1, #0]
 8005bf8:	781a      	ldrb	r2, [r3, #0]
 8005bfa:	3201      	adds	r2, #1
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	e790      	b.n	8005b22 <_dtoa_r+0x62a>
 8005c00:	4ba3      	ldr	r3, [pc, #652]	; (8005e90 <_dtoa_r+0x998>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	f7fa fd00 	bl	8000608 <__aeabi_dmul>
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	460f      	mov	r7, r1
 8005c10:	f7fa ff62 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d09e      	beq.n	8005b56 <_dtoa_r+0x65e>
 8005c18:	e7d0      	b.n	8005bbc <_dtoa_r+0x6c4>
 8005c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	f000 80ca 	beq.w	8005db6 <_dtoa_r+0x8be>
 8005c22:	9a07      	ldr	r2, [sp, #28]
 8005c24:	2a01      	cmp	r2, #1
 8005c26:	f300 80ad 	bgt.w	8005d84 <_dtoa_r+0x88c>
 8005c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	f000 80a5 	beq.w	8005d7c <_dtoa_r+0x884>
 8005c32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c36:	9e08      	ldr	r6, [sp, #32]
 8005c38:	9d05      	ldr	r5, [sp, #20]
 8005c3a:	9a05      	ldr	r2, [sp, #20]
 8005c3c:	441a      	add	r2, r3
 8005c3e:	9205      	str	r2, [sp, #20]
 8005c40:	9a06      	ldr	r2, [sp, #24]
 8005c42:	2101      	movs	r1, #1
 8005c44:	441a      	add	r2, r3
 8005c46:	4620      	mov	r0, r4
 8005c48:	9206      	str	r2, [sp, #24]
 8005c4a:	f000 fdf7 	bl	800683c <__i2b>
 8005c4e:	4607      	mov	r7, r0
 8005c50:	b165      	cbz	r5, 8005c6c <_dtoa_r+0x774>
 8005c52:	9b06      	ldr	r3, [sp, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	dd09      	ble.n	8005c6c <_dtoa_r+0x774>
 8005c58:	42ab      	cmp	r3, r5
 8005c5a:	9a05      	ldr	r2, [sp, #20]
 8005c5c:	bfa8      	it	ge
 8005c5e:	462b      	movge	r3, r5
 8005c60:	1ad2      	subs	r2, r2, r3
 8005c62:	9205      	str	r2, [sp, #20]
 8005c64:	9a06      	ldr	r2, [sp, #24]
 8005c66:	1aed      	subs	r5, r5, r3
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	9306      	str	r3, [sp, #24]
 8005c6c:	9b08      	ldr	r3, [sp, #32]
 8005c6e:	b1f3      	cbz	r3, 8005cae <_dtoa_r+0x7b6>
 8005c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 80a3 	beq.w	8005dbe <_dtoa_r+0x8c6>
 8005c78:	2e00      	cmp	r6, #0
 8005c7a:	dd10      	ble.n	8005c9e <_dtoa_r+0x7a6>
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	4632      	mov	r2, r6
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fe9b 	bl	80069bc <__pow5mult>
 8005c86:	4652      	mov	r2, sl
 8005c88:	4601      	mov	r1, r0
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 fdeb 	bl	8006868 <__multiply>
 8005c92:	4651      	mov	r1, sl
 8005c94:	4680      	mov	r8, r0
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 fd1a 	bl	80066d0 <_Bfree>
 8005c9c:	46c2      	mov	sl, r8
 8005c9e:	9b08      	ldr	r3, [sp, #32]
 8005ca0:	1b9a      	subs	r2, r3, r6
 8005ca2:	d004      	beq.n	8005cae <_dtoa_r+0x7b6>
 8005ca4:	4651      	mov	r1, sl
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f000 fe88 	bl	80069bc <__pow5mult>
 8005cac:	4682      	mov	sl, r0
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f000 fdc3 	bl	800683c <__i2b>
 8005cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	4606      	mov	r6, r0
 8005cbc:	f340 8081 	ble.w	8005dc2 <_dtoa_r+0x8ca>
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4601      	mov	r1, r0
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 fe79 	bl	80069bc <__pow5mult>
 8005cca:	9b07      	ldr	r3, [sp, #28]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	4606      	mov	r6, r0
 8005cd0:	dd7a      	ble.n	8005dc8 <_dtoa_r+0x8d0>
 8005cd2:	f04f 0800 	mov.w	r8, #0
 8005cd6:	6933      	ldr	r3, [r6, #16]
 8005cd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005cdc:	6918      	ldr	r0, [r3, #16]
 8005cde:	f000 fd5f 	bl	80067a0 <__hi0bits>
 8005ce2:	f1c0 0020 	rsb	r0, r0, #32
 8005ce6:	9b06      	ldr	r3, [sp, #24]
 8005ce8:	4418      	add	r0, r3
 8005cea:	f010 001f 	ands.w	r0, r0, #31
 8005cee:	f000 8094 	beq.w	8005e1a <_dtoa_r+0x922>
 8005cf2:	f1c0 0320 	rsb	r3, r0, #32
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	f340 8085 	ble.w	8005e06 <_dtoa_r+0x90e>
 8005cfc:	9b05      	ldr	r3, [sp, #20]
 8005cfe:	f1c0 001c 	rsb	r0, r0, #28
 8005d02:	4403      	add	r3, r0
 8005d04:	9305      	str	r3, [sp, #20]
 8005d06:	9b06      	ldr	r3, [sp, #24]
 8005d08:	4403      	add	r3, r0
 8005d0a:	4405      	add	r5, r0
 8005d0c:	9306      	str	r3, [sp, #24]
 8005d0e:	9b05      	ldr	r3, [sp, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	dd05      	ble.n	8005d20 <_dtoa_r+0x828>
 8005d14:	4651      	mov	r1, sl
 8005d16:	461a      	mov	r2, r3
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fea9 	bl	8006a70 <__lshift>
 8005d1e:	4682      	mov	sl, r0
 8005d20:	9b06      	ldr	r3, [sp, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dd05      	ble.n	8005d32 <_dtoa_r+0x83a>
 8005d26:	4631      	mov	r1, r6
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f000 fea0 	bl	8006a70 <__lshift>
 8005d30:	4606      	mov	r6, r0
 8005d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d072      	beq.n	8005e1e <_dtoa_r+0x926>
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	f000 ff04 	bl	8006b48 <__mcmp>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	da6c      	bge.n	8005e1e <_dtoa_r+0x926>
 8005d44:	2300      	movs	r3, #0
 8005d46:	4651      	mov	r1, sl
 8005d48:	220a      	movs	r2, #10
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 fce2 	bl	8006714 <__multadd>
 8005d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d52:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005d56:	4682      	mov	sl, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 81b0 	beq.w	80060be <_dtoa_r+0xbc6>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	4639      	mov	r1, r7
 8005d62:	220a      	movs	r2, #10
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 fcd5 	bl	8006714 <__multadd>
 8005d6a:	9b01      	ldr	r3, [sp, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	4607      	mov	r7, r0
 8005d70:	f300 8096 	bgt.w	8005ea0 <_dtoa_r+0x9a8>
 8005d74:	9b07      	ldr	r3, [sp, #28]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	dc59      	bgt.n	8005e2e <_dtoa_r+0x936>
 8005d7a:	e091      	b.n	8005ea0 <_dtoa_r+0x9a8>
 8005d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d82:	e758      	b.n	8005c36 <_dtoa_r+0x73e>
 8005d84:	9b04      	ldr	r3, [sp, #16]
 8005d86:	1e5e      	subs	r6, r3, #1
 8005d88:	9b08      	ldr	r3, [sp, #32]
 8005d8a:	42b3      	cmp	r3, r6
 8005d8c:	bfbf      	itttt	lt
 8005d8e:	9b08      	ldrlt	r3, [sp, #32]
 8005d90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005d92:	9608      	strlt	r6, [sp, #32]
 8005d94:	1af3      	sublt	r3, r6, r3
 8005d96:	bfb4      	ite	lt
 8005d98:	18d2      	addlt	r2, r2, r3
 8005d9a:	1b9e      	subge	r6, r3, r6
 8005d9c:	9b04      	ldr	r3, [sp, #16]
 8005d9e:	bfbc      	itt	lt
 8005da0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005da2:	2600      	movlt	r6, #0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bfb7      	itett	lt
 8005da8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005dac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005db0:	1a9d      	sublt	r5, r3, r2
 8005db2:	2300      	movlt	r3, #0
 8005db4:	e741      	b.n	8005c3a <_dtoa_r+0x742>
 8005db6:	9e08      	ldr	r6, [sp, #32]
 8005db8:	9d05      	ldr	r5, [sp, #20]
 8005dba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005dbc:	e748      	b.n	8005c50 <_dtoa_r+0x758>
 8005dbe:	9a08      	ldr	r2, [sp, #32]
 8005dc0:	e770      	b.n	8005ca4 <_dtoa_r+0x7ac>
 8005dc2:	9b07      	ldr	r3, [sp, #28]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	dc19      	bgt.n	8005dfc <_dtoa_r+0x904>
 8005dc8:	9b02      	ldr	r3, [sp, #8]
 8005dca:	b9bb      	cbnz	r3, 8005dfc <_dtoa_r+0x904>
 8005dcc:	9b03      	ldr	r3, [sp, #12]
 8005dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dd2:	b99b      	cbnz	r3, 8005dfc <_dtoa_r+0x904>
 8005dd4:	9b03      	ldr	r3, [sp, #12]
 8005dd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dda:	0d1b      	lsrs	r3, r3, #20
 8005ddc:	051b      	lsls	r3, r3, #20
 8005dde:	b183      	cbz	r3, 8005e02 <_dtoa_r+0x90a>
 8005de0:	9b05      	ldr	r3, [sp, #20]
 8005de2:	3301      	adds	r3, #1
 8005de4:	9305      	str	r3, [sp, #20]
 8005de6:	9b06      	ldr	r3, [sp, #24]
 8005de8:	3301      	adds	r3, #1
 8005dea:	9306      	str	r3, [sp, #24]
 8005dec:	f04f 0801 	mov.w	r8, #1
 8005df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f47f af6f 	bne.w	8005cd6 <_dtoa_r+0x7de>
 8005df8:	2001      	movs	r0, #1
 8005dfa:	e774      	b.n	8005ce6 <_dtoa_r+0x7ee>
 8005dfc:	f04f 0800 	mov.w	r8, #0
 8005e00:	e7f6      	b.n	8005df0 <_dtoa_r+0x8f8>
 8005e02:	4698      	mov	r8, r3
 8005e04:	e7f4      	b.n	8005df0 <_dtoa_r+0x8f8>
 8005e06:	d082      	beq.n	8005d0e <_dtoa_r+0x816>
 8005e08:	9a05      	ldr	r2, [sp, #20]
 8005e0a:	331c      	adds	r3, #28
 8005e0c:	441a      	add	r2, r3
 8005e0e:	9205      	str	r2, [sp, #20]
 8005e10:	9a06      	ldr	r2, [sp, #24]
 8005e12:	441a      	add	r2, r3
 8005e14:	441d      	add	r5, r3
 8005e16:	9206      	str	r2, [sp, #24]
 8005e18:	e779      	b.n	8005d0e <_dtoa_r+0x816>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	e7f4      	b.n	8005e08 <_dtoa_r+0x910>
 8005e1e:	9b04      	ldr	r3, [sp, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	dc37      	bgt.n	8005e94 <_dtoa_r+0x99c>
 8005e24:	9b07      	ldr	r3, [sp, #28]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	dd34      	ble.n	8005e94 <_dtoa_r+0x99c>
 8005e2a:	9b04      	ldr	r3, [sp, #16]
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	9b01      	ldr	r3, [sp, #4]
 8005e30:	b963      	cbnz	r3, 8005e4c <_dtoa_r+0x954>
 8005e32:	4631      	mov	r1, r6
 8005e34:	2205      	movs	r2, #5
 8005e36:	4620      	mov	r0, r4
 8005e38:	f000 fc6c 	bl	8006714 <__multadd>
 8005e3c:	4601      	mov	r1, r0
 8005e3e:	4606      	mov	r6, r0
 8005e40:	4650      	mov	r0, sl
 8005e42:	f000 fe81 	bl	8006b48 <__mcmp>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	f73f adbb 	bgt.w	80059c2 <_dtoa_r+0x4ca>
 8005e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e4e:	9d00      	ldr	r5, [sp, #0]
 8005e50:	ea6f 0b03 	mvn.w	fp, r3
 8005e54:	f04f 0800 	mov.w	r8, #0
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 fc38 	bl	80066d0 <_Bfree>
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	f43f aeab 	beq.w	8005bbc <_dtoa_r+0x6c4>
 8005e66:	f1b8 0f00 	cmp.w	r8, #0
 8005e6a:	d005      	beq.n	8005e78 <_dtoa_r+0x980>
 8005e6c:	45b8      	cmp	r8, r7
 8005e6e:	d003      	beq.n	8005e78 <_dtoa_r+0x980>
 8005e70:	4641      	mov	r1, r8
 8005e72:	4620      	mov	r0, r4
 8005e74:	f000 fc2c 	bl	80066d0 <_Bfree>
 8005e78:	4639      	mov	r1, r7
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 fc28 	bl	80066d0 <_Bfree>
 8005e80:	e69c      	b.n	8005bbc <_dtoa_r+0x6c4>
 8005e82:	2600      	movs	r6, #0
 8005e84:	4637      	mov	r7, r6
 8005e86:	e7e1      	b.n	8005e4c <_dtoa_r+0x954>
 8005e88:	46bb      	mov	fp, r7
 8005e8a:	4637      	mov	r7, r6
 8005e8c:	e599      	b.n	80059c2 <_dtoa_r+0x4ca>
 8005e8e:	bf00      	nop
 8005e90:	40240000 	.word	0x40240000
 8005e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 80c8 	beq.w	800602c <_dtoa_r+0xb34>
 8005e9c:	9b04      	ldr	r3, [sp, #16]
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	dd05      	ble.n	8005eb0 <_dtoa_r+0x9b8>
 8005ea4:	4639      	mov	r1, r7
 8005ea6:	462a      	mov	r2, r5
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 fde1 	bl	8006a70 <__lshift>
 8005eae:	4607      	mov	r7, r0
 8005eb0:	f1b8 0f00 	cmp.w	r8, #0
 8005eb4:	d05b      	beq.n	8005f6e <_dtoa_r+0xa76>
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f000 fbc9 	bl	8006650 <_Balloc>
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	b928      	cbnz	r0, 8005ece <_dtoa_r+0x9d6>
 8005ec2:	4b83      	ldr	r3, [pc, #524]	; (80060d0 <_dtoa_r+0xbd8>)
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005eca:	f7ff bb2e 	b.w	800552a <_dtoa_r+0x32>
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	3202      	adds	r2, #2
 8005ed2:	0092      	lsls	r2, r2, #2
 8005ed4:	f107 010c 	add.w	r1, r7, #12
 8005ed8:	300c      	adds	r0, #12
 8005eda:	f001 f817 	bl	8006f0c <memcpy>
 8005ede:	2201      	movs	r2, #1
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fdc4 	bl	8006a70 <__lshift>
 8005ee8:	9b00      	ldr	r3, [sp, #0]
 8005eea:	3301      	adds	r3, #1
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	9308      	str	r3, [sp, #32]
 8005ef6:	9b02      	ldr	r3, [sp, #8]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	46b8      	mov	r8, r7
 8005efe:	9306      	str	r3, [sp, #24]
 8005f00:	4607      	mov	r7, r0
 8005f02:	9b04      	ldr	r3, [sp, #16]
 8005f04:	4631      	mov	r1, r6
 8005f06:	3b01      	subs	r3, #1
 8005f08:	4650      	mov	r0, sl
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	f7ff fa6b 	bl	80053e6 <quorem>
 8005f10:	4641      	mov	r1, r8
 8005f12:	9002      	str	r0, [sp, #8]
 8005f14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f18:	4650      	mov	r0, sl
 8005f1a:	f000 fe15 	bl	8006b48 <__mcmp>
 8005f1e:	463a      	mov	r2, r7
 8005f20:	9005      	str	r0, [sp, #20]
 8005f22:	4631      	mov	r1, r6
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 fe2b 	bl	8006b80 <__mdiff>
 8005f2a:	68c2      	ldr	r2, [r0, #12]
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	bb02      	cbnz	r2, 8005f72 <_dtoa_r+0xa7a>
 8005f30:	4601      	mov	r1, r0
 8005f32:	4650      	mov	r0, sl
 8005f34:	f000 fe08 	bl	8006b48 <__mcmp>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f40:	f000 fbc6 	bl	80066d0 <_Bfree>
 8005f44:	9b07      	ldr	r3, [sp, #28]
 8005f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f48:	9d04      	ldr	r5, [sp, #16]
 8005f4a:	ea43 0102 	orr.w	r1, r3, r2
 8005f4e:	9b06      	ldr	r3, [sp, #24]
 8005f50:	4319      	orrs	r1, r3
 8005f52:	d110      	bne.n	8005f76 <_dtoa_r+0xa7e>
 8005f54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f58:	d029      	beq.n	8005fae <_dtoa_r+0xab6>
 8005f5a:	9b05      	ldr	r3, [sp, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dd02      	ble.n	8005f66 <_dtoa_r+0xa6e>
 8005f60:	9b02      	ldr	r3, [sp, #8]
 8005f62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005f66:	9b01      	ldr	r3, [sp, #4]
 8005f68:	f883 9000 	strb.w	r9, [r3]
 8005f6c:	e774      	b.n	8005e58 <_dtoa_r+0x960>
 8005f6e:	4638      	mov	r0, r7
 8005f70:	e7ba      	b.n	8005ee8 <_dtoa_r+0x9f0>
 8005f72:	2201      	movs	r2, #1
 8005f74:	e7e1      	b.n	8005f3a <_dtoa_r+0xa42>
 8005f76:	9b05      	ldr	r3, [sp, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	db04      	blt.n	8005f86 <_dtoa_r+0xa8e>
 8005f7c:	9907      	ldr	r1, [sp, #28]
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	9906      	ldr	r1, [sp, #24]
 8005f82:	430b      	orrs	r3, r1
 8005f84:	d120      	bne.n	8005fc8 <_dtoa_r+0xad0>
 8005f86:	2a00      	cmp	r2, #0
 8005f88:	dded      	ble.n	8005f66 <_dtoa_r+0xa6e>
 8005f8a:	4651      	mov	r1, sl
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 fd6e 	bl	8006a70 <__lshift>
 8005f94:	4631      	mov	r1, r6
 8005f96:	4682      	mov	sl, r0
 8005f98:	f000 fdd6 	bl	8006b48 <__mcmp>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	dc03      	bgt.n	8005fa8 <_dtoa_r+0xab0>
 8005fa0:	d1e1      	bne.n	8005f66 <_dtoa_r+0xa6e>
 8005fa2:	f019 0f01 	tst.w	r9, #1
 8005fa6:	d0de      	beq.n	8005f66 <_dtoa_r+0xa6e>
 8005fa8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fac:	d1d8      	bne.n	8005f60 <_dtoa_r+0xa68>
 8005fae:	9a01      	ldr	r2, [sp, #4]
 8005fb0:	2339      	movs	r3, #57	; 0x39
 8005fb2:	7013      	strb	r3, [r2, #0]
 8005fb4:	462b      	mov	r3, r5
 8005fb6:	461d      	mov	r5, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005fbe:	2a39      	cmp	r2, #57	; 0x39
 8005fc0:	d06c      	beq.n	800609c <_dtoa_r+0xba4>
 8005fc2:	3201      	adds	r2, #1
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e747      	b.n	8005e58 <_dtoa_r+0x960>
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	dd07      	ble.n	8005fdc <_dtoa_r+0xae4>
 8005fcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fd0:	d0ed      	beq.n	8005fae <_dtoa_r+0xab6>
 8005fd2:	9a01      	ldr	r2, [sp, #4]
 8005fd4:	f109 0301 	add.w	r3, r9, #1
 8005fd8:	7013      	strb	r3, [r2, #0]
 8005fda:	e73d      	b.n	8005e58 <_dtoa_r+0x960>
 8005fdc:	9b04      	ldr	r3, [sp, #16]
 8005fde:	9a08      	ldr	r2, [sp, #32]
 8005fe0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d043      	beq.n	8006070 <_dtoa_r+0xb78>
 8005fe8:	4651      	mov	r1, sl
 8005fea:	2300      	movs	r3, #0
 8005fec:	220a      	movs	r2, #10
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f000 fb90 	bl	8006714 <__multadd>
 8005ff4:	45b8      	cmp	r8, r7
 8005ff6:	4682      	mov	sl, r0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	f04f 020a 	mov.w	r2, #10
 8006000:	4641      	mov	r1, r8
 8006002:	4620      	mov	r0, r4
 8006004:	d107      	bne.n	8006016 <_dtoa_r+0xb1e>
 8006006:	f000 fb85 	bl	8006714 <__multadd>
 800600a:	4680      	mov	r8, r0
 800600c:	4607      	mov	r7, r0
 800600e:	9b04      	ldr	r3, [sp, #16]
 8006010:	3301      	adds	r3, #1
 8006012:	9304      	str	r3, [sp, #16]
 8006014:	e775      	b.n	8005f02 <_dtoa_r+0xa0a>
 8006016:	f000 fb7d 	bl	8006714 <__multadd>
 800601a:	4639      	mov	r1, r7
 800601c:	4680      	mov	r8, r0
 800601e:	2300      	movs	r3, #0
 8006020:	220a      	movs	r2, #10
 8006022:	4620      	mov	r0, r4
 8006024:	f000 fb76 	bl	8006714 <__multadd>
 8006028:	4607      	mov	r7, r0
 800602a:	e7f0      	b.n	800600e <_dtoa_r+0xb16>
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	9d00      	ldr	r5, [sp, #0]
 8006032:	4631      	mov	r1, r6
 8006034:	4650      	mov	r0, sl
 8006036:	f7ff f9d6 	bl	80053e6 <quorem>
 800603a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800603e:	9b00      	ldr	r3, [sp, #0]
 8006040:	f805 9b01 	strb.w	r9, [r5], #1
 8006044:	1aea      	subs	r2, r5, r3
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	4293      	cmp	r3, r2
 800604a:	dd07      	ble.n	800605c <_dtoa_r+0xb64>
 800604c:	4651      	mov	r1, sl
 800604e:	2300      	movs	r3, #0
 8006050:	220a      	movs	r2, #10
 8006052:	4620      	mov	r0, r4
 8006054:	f000 fb5e 	bl	8006714 <__multadd>
 8006058:	4682      	mov	sl, r0
 800605a:	e7ea      	b.n	8006032 <_dtoa_r+0xb3a>
 800605c:	9b01      	ldr	r3, [sp, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	bfc8      	it	gt
 8006062:	461d      	movgt	r5, r3
 8006064:	9b00      	ldr	r3, [sp, #0]
 8006066:	bfd8      	it	le
 8006068:	2501      	movle	r5, #1
 800606a:	441d      	add	r5, r3
 800606c:	f04f 0800 	mov.w	r8, #0
 8006070:	4651      	mov	r1, sl
 8006072:	2201      	movs	r2, #1
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fcfb 	bl	8006a70 <__lshift>
 800607a:	4631      	mov	r1, r6
 800607c:	4682      	mov	sl, r0
 800607e:	f000 fd63 	bl	8006b48 <__mcmp>
 8006082:	2800      	cmp	r0, #0
 8006084:	dc96      	bgt.n	8005fb4 <_dtoa_r+0xabc>
 8006086:	d102      	bne.n	800608e <_dtoa_r+0xb96>
 8006088:	f019 0f01 	tst.w	r9, #1
 800608c:	d192      	bne.n	8005fb4 <_dtoa_r+0xabc>
 800608e:	462b      	mov	r3, r5
 8006090:	461d      	mov	r5, r3
 8006092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006096:	2a30      	cmp	r2, #48	; 0x30
 8006098:	d0fa      	beq.n	8006090 <_dtoa_r+0xb98>
 800609a:	e6dd      	b.n	8005e58 <_dtoa_r+0x960>
 800609c:	9a00      	ldr	r2, [sp, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d189      	bne.n	8005fb6 <_dtoa_r+0xabe>
 80060a2:	f10b 0b01 	add.w	fp, fp, #1
 80060a6:	2331      	movs	r3, #49	; 0x31
 80060a8:	e796      	b.n	8005fd8 <_dtoa_r+0xae0>
 80060aa:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <_dtoa_r+0xbdc>)
 80060ac:	f7ff ba99 	b.w	80055e2 <_dtoa_r+0xea>
 80060b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f47f aa6d 	bne.w	8005592 <_dtoa_r+0x9a>
 80060b8:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <_dtoa_r+0xbe0>)
 80060ba:	f7ff ba92 	b.w	80055e2 <_dtoa_r+0xea>
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	dcb5      	bgt.n	8006030 <_dtoa_r+0xb38>
 80060c4:	9b07      	ldr	r3, [sp, #28]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	f73f aeb1 	bgt.w	8005e2e <_dtoa_r+0x936>
 80060cc:	e7b0      	b.n	8006030 <_dtoa_r+0xb38>
 80060ce:	bf00      	nop
 80060d0:	08008568 	.word	0x08008568
 80060d4:	080084c8 	.word	0x080084c8
 80060d8:	080084ec 	.word	0x080084ec

080060dc <__ssputs_r>:
 80060dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	688e      	ldr	r6, [r1, #8]
 80060e2:	461f      	mov	r7, r3
 80060e4:	42be      	cmp	r6, r7
 80060e6:	680b      	ldr	r3, [r1, #0]
 80060e8:	4682      	mov	sl, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	4690      	mov	r8, r2
 80060ee:	d82c      	bhi.n	800614a <__ssputs_r+0x6e>
 80060f0:	898a      	ldrh	r2, [r1, #12]
 80060f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060f6:	d026      	beq.n	8006146 <__ssputs_r+0x6a>
 80060f8:	6965      	ldr	r5, [r4, #20]
 80060fa:	6909      	ldr	r1, [r1, #16]
 80060fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006100:	eba3 0901 	sub.w	r9, r3, r1
 8006104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006108:	1c7b      	adds	r3, r7, #1
 800610a:	444b      	add	r3, r9
 800610c:	106d      	asrs	r5, r5, #1
 800610e:	429d      	cmp	r5, r3
 8006110:	bf38      	it	cc
 8006112:	461d      	movcc	r5, r3
 8006114:	0553      	lsls	r3, r2, #21
 8006116:	d527      	bpl.n	8006168 <__ssputs_r+0x8c>
 8006118:	4629      	mov	r1, r5
 800611a:	f000 f95f 	bl	80063dc <_malloc_r>
 800611e:	4606      	mov	r6, r0
 8006120:	b360      	cbz	r0, 800617c <__ssputs_r+0xa0>
 8006122:	6921      	ldr	r1, [r4, #16]
 8006124:	464a      	mov	r2, r9
 8006126:	f000 fef1 	bl	8006f0c <memcpy>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006134:	81a3      	strh	r3, [r4, #12]
 8006136:	6126      	str	r6, [r4, #16]
 8006138:	6165      	str	r5, [r4, #20]
 800613a:	444e      	add	r6, r9
 800613c:	eba5 0509 	sub.w	r5, r5, r9
 8006140:	6026      	str	r6, [r4, #0]
 8006142:	60a5      	str	r5, [r4, #8]
 8006144:	463e      	mov	r6, r7
 8006146:	42be      	cmp	r6, r7
 8006148:	d900      	bls.n	800614c <__ssputs_r+0x70>
 800614a:	463e      	mov	r6, r7
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	4632      	mov	r2, r6
 8006150:	4641      	mov	r1, r8
 8006152:	f000 fe6b 	bl	8006e2c <memmove>
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	1b9b      	subs	r3, r3, r6
 800615a:	60a3      	str	r3, [r4, #8]
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	4433      	add	r3, r6
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	2000      	movs	r0, #0
 8006164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006168:	462a      	mov	r2, r5
 800616a:	f000 fe30 	bl	8006dce <_realloc_r>
 800616e:	4606      	mov	r6, r0
 8006170:	2800      	cmp	r0, #0
 8006172:	d1e0      	bne.n	8006136 <__ssputs_r+0x5a>
 8006174:	6921      	ldr	r1, [r4, #16]
 8006176:	4650      	mov	r0, sl
 8006178:	f000 ff0a 	bl	8006f90 <_free_r>
 800617c:	230c      	movs	r3, #12
 800617e:	f8ca 3000 	str.w	r3, [sl]
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800618e:	e7e9      	b.n	8006164 <__ssputs_r+0x88>

08006190 <_svfiprintf_r>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	4698      	mov	r8, r3
 8006196:	898b      	ldrh	r3, [r1, #12]
 8006198:	061b      	lsls	r3, r3, #24
 800619a:	b09d      	sub	sp, #116	; 0x74
 800619c:	4607      	mov	r7, r0
 800619e:	460d      	mov	r5, r1
 80061a0:	4614      	mov	r4, r2
 80061a2:	d50e      	bpl.n	80061c2 <_svfiprintf_r+0x32>
 80061a4:	690b      	ldr	r3, [r1, #16]
 80061a6:	b963      	cbnz	r3, 80061c2 <_svfiprintf_r+0x32>
 80061a8:	2140      	movs	r1, #64	; 0x40
 80061aa:	f000 f917 	bl	80063dc <_malloc_r>
 80061ae:	6028      	str	r0, [r5, #0]
 80061b0:	6128      	str	r0, [r5, #16]
 80061b2:	b920      	cbnz	r0, 80061be <_svfiprintf_r+0x2e>
 80061b4:	230c      	movs	r3, #12
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061bc:	e0d0      	b.n	8006360 <_svfiprintf_r+0x1d0>
 80061be:	2340      	movs	r3, #64	; 0x40
 80061c0:	616b      	str	r3, [r5, #20]
 80061c2:	2300      	movs	r3, #0
 80061c4:	9309      	str	r3, [sp, #36]	; 0x24
 80061c6:	2320      	movs	r3, #32
 80061c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80061d0:	2330      	movs	r3, #48	; 0x30
 80061d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006378 <_svfiprintf_r+0x1e8>
 80061d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061da:	f04f 0901 	mov.w	r9, #1
 80061de:	4623      	mov	r3, r4
 80061e0:	469a      	mov	sl, r3
 80061e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061e6:	b10a      	cbz	r2, 80061ec <_svfiprintf_r+0x5c>
 80061e8:	2a25      	cmp	r2, #37	; 0x25
 80061ea:	d1f9      	bne.n	80061e0 <_svfiprintf_r+0x50>
 80061ec:	ebba 0b04 	subs.w	fp, sl, r4
 80061f0:	d00b      	beq.n	800620a <_svfiprintf_r+0x7a>
 80061f2:	465b      	mov	r3, fp
 80061f4:	4622      	mov	r2, r4
 80061f6:	4629      	mov	r1, r5
 80061f8:	4638      	mov	r0, r7
 80061fa:	f7ff ff6f 	bl	80060dc <__ssputs_r>
 80061fe:	3001      	adds	r0, #1
 8006200:	f000 80a9 	beq.w	8006356 <_svfiprintf_r+0x1c6>
 8006204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006206:	445a      	add	r2, fp
 8006208:	9209      	str	r2, [sp, #36]	; 0x24
 800620a:	f89a 3000 	ldrb.w	r3, [sl]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 80a1 	beq.w	8006356 <_svfiprintf_r+0x1c6>
 8006214:	2300      	movs	r3, #0
 8006216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800621a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800621e:	f10a 0a01 	add.w	sl, sl, #1
 8006222:	9304      	str	r3, [sp, #16]
 8006224:	9307      	str	r3, [sp, #28]
 8006226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800622a:	931a      	str	r3, [sp, #104]	; 0x68
 800622c:	4654      	mov	r4, sl
 800622e:	2205      	movs	r2, #5
 8006230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006234:	4850      	ldr	r0, [pc, #320]	; (8006378 <_svfiprintf_r+0x1e8>)
 8006236:	f7f9 ffd3 	bl	80001e0 <memchr>
 800623a:	9a04      	ldr	r2, [sp, #16]
 800623c:	b9d8      	cbnz	r0, 8006276 <_svfiprintf_r+0xe6>
 800623e:	06d0      	lsls	r0, r2, #27
 8006240:	bf44      	itt	mi
 8006242:	2320      	movmi	r3, #32
 8006244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006248:	0711      	lsls	r1, r2, #28
 800624a:	bf44      	itt	mi
 800624c:	232b      	movmi	r3, #43	; 0x2b
 800624e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006252:	f89a 3000 	ldrb.w	r3, [sl]
 8006256:	2b2a      	cmp	r3, #42	; 0x2a
 8006258:	d015      	beq.n	8006286 <_svfiprintf_r+0xf6>
 800625a:	9a07      	ldr	r2, [sp, #28]
 800625c:	4654      	mov	r4, sl
 800625e:	2000      	movs	r0, #0
 8006260:	f04f 0c0a 	mov.w	ip, #10
 8006264:	4621      	mov	r1, r4
 8006266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800626a:	3b30      	subs	r3, #48	; 0x30
 800626c:	2b09      	cmp	r3, #9
 800626e:	d94d      	bls.n	800630c <_svfiprintf_r+0x17c>
 8006270:	b1b0      	cbz	r0, 80062a0 <_svfiprintf_r+0x110>
 8006272:	9207      	str	r2, [sp, #28]
 8006274:	e014      	b.n	80062a0 <_svfiprintf_r+0x110>
 8006276:	eba0 0308 	sub.w	r3, r0, r8
 800627a:	fa09 f303 	lsl.w	r3, r9, r3
 800627e:	4313      	orrs	r3, r2
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	46a2      	mov	sl, r4
 8006284:	e7d2      	b.n	800622c <_svfiprintf_r+0x9c>
 8006286:	9b03      	ldr	r3, [sp, #12]
 8006288:	1d19      	adds	r1, r3, #4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	9103      	str	r1, [sp, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	bfbb      	ittet	lt
 8006292:	425b      	neglt	r3, r3
 8006294:	f042 0202 	orrlt.w	r2, r2, #2
 8006298:	9307      	strge	r3, [sp, #28]
 800629a:	9307      	strlt	r3, [sp, #28]
 800629c:	bfb8      	it	lt
 800629e:	9204      	strlt	r2, [sp, #16]
 80062a0:	7823      	ldrb	r3, [r4, #0]
 80062a2:	2b2e      	cmp	r3, #46	; 0x2e
 80062a4:	d10c      	bne.n	80062c0 <_svfiprintf_r+0x130>
 80062a6:	7863      	ldrb	r3, [r4, #1]
 80062a8:	2b2a      	cmp	r3, #42	; 0x2a
 80062aa:	d134      	bne.n	8006316 <_svfiprintf_r+0x186>
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	1d1a      	adds	r2, r3, #4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	9203      	str	r2, [sp, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bfb8      	it	lt
 80062b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062bc:	3402      	adds	r4, #2
 80062be:	9305      	str	r3, [sp, #20]
 80062c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006388 <_svfiprintf_r+0x1f8>
 80062c4:	7821      	ldrb	r1, [r4, #0]
 80062c6:	2203      	movs	r2, #3
 80062c8:	4650      	mov	r0, sl
 80062ca:	f7f9 ff89 	bl	80001e0 <memchr>
 80062ce:	b138      	cbz	r0, 80062e0 <_svfiprintf_r+0x150>
 80062d0:	9b04      	ldr	r3, [sp, #16]
 80062d2:	eba0 000a 	sub.w	r0, r0, sl
 80062d6:	2240      	movs	r2, #64	; 0x40
 80062d8:	4082      	lsls	r2, r0
 80062da:	4313      	orrs	r3, r2
 80062dc:	3401      	adds	r4, #1
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e4:	4825      	ldr	r0, [pc, #148]	; (800637c <_svfiprintf_r+0x1ec>)
 80062e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062ea:	2206      	movs	r2, #6
 80062ec:	f7f9 ff78 	bl	80001e0 <memchr>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d038      	beq.n	8006366 <_svfiprintf_r+0x1d6>
 80062f4:	4b22      	ldr	r3, [pc, #136]	; (8006380 <_svfiprintf_r+0x1f0>)
 80062f6:	bb1b      	cbnz	r3, 8006340 <_svfiprintf_r+0x1b0>
 80062f8:	9b03      	ldr	r3, [sp, #12]
 80062fa:	3307      	adds	r3, #7
 80062fc:	f023 0307 	bic.w	r3, r3, #7
 8006300:	3308      	adds	r3, #8
 8006302:	9303      	str	r3, [sp, #12]
 8006304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006306:	4433      	add	r3, r6
 8006308:	9309      	str	r3, [sp, #36]	; 0x24
 800630a:	e768      	b.n	80061de <_svfiprintf_r+0x4e>
 800630c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006310:	460c      	mov	r4, r1
 8006312:	2001      	movs	r0, #1
 8006314:	e7a6      	b.n	8006264 <_svfiprintf_r+0xd4>
 8006316:	2300      	movs	r3, #0
 8006318:	3401      	adds	r4, #1
 800631a:	9305      	str	r3, [sp, #20]
 800631c:	4619      	mov	r1, r3
 800631e:	f04f 0c0a 	mov.w	ip, #10
 8006322:	4620      	mov	r0, r4
 8006324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006328:	3a30      	subs	r2, #48	; 0x30
 800632a:	2a09      	cmp	r2, #9
 800632c:	d903      	bls.n	8006336 <_svfiprintf_r+0x1a6>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0c6      	beq.n	80062c0 <_svfiprintf_r+0x130>
 8006332:	9105      	str	r1, [sp, #20]
 8006334:	e7c4      	b.n	80062c0 <_svfiprintf_r+0x130>
 8006336:	fb0c 2101 	mla	r1, ip, r1, r2
 800633a:	4604      	mov	r4, r0
 800633c:	2301      	movs	r3, #1
 800633e:	e7f0      	b.n	8006322 <_svfiprintf_r+0x192>
 8006340:	ab03      	add	r3, sp, #12
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	462a      	mov	r2, r5
 8006346:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <_svfiprintf_r+0x1f4>)
 8006348:	a904      	add	r1, sp, #16
 800634a:	4638      	mov	r0, r7
 800634c:	f7fe fb56 	bl	80049fc <_printf_float>
 8006350:	1c42      	adds	r2, r0, #1
 8006352:	4606      	mov	r6, r0
 8006354:	d1d6      	bne.n	8006304 <_svfiprintf_r+0x174>
 8006356:	89ab      	ldrh	r3, [r5, #12]
 8006358:	065b      	lsls	r3, r3, #25
 800635a:	f53f af2d 	bmi.w	80061b8 <_svfiprintf_r+0x28>
 800635e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006360:	b01d      	add	sp, #116	; 0x74
 8006362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006366:	ab03      	add	r3, sp, #12
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	462a      	mov	r2, r5
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <_svfiprintf_r+0x1f4>)
 800636e:	a904      	add	r1, sp, #16
 8006370:	4638      	mov	r0, r7
 8006372:	f7fe fde7 	bl	8004f44 <_printf_i>
 8006376:	e7eb      	b.n	8006350 <_svfiprintf_r+0x1c0>
 8006378:	08008579 	.word	0x08008579
 800637c:	08008583 	.word	0x08008583
 8006380:	080049fd 	.word	0x080049fd
 8006384:	080060dd 	.word	0x080060dd
 8006388:	0800857f 	.word	0x0800857f

0800638c <malloc>:
 800638c:	4b02      	ldr	r3, [pc, #8]	; (8006398 <malloc+0xc>)
 800638e:	4601      	mov	r1, r0
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	f000 b823 	b.w	80063dc <_malloc_r>
 8006396:	bf00      	nop
 8006398:	20000064 	.word	0x20000064

0800639c <sbrk_aligned>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	4e0e      	ldr	r6, [pc, #56]	; (80063d8 <sbrk_aligned+0x3c>)
 80063a0:	460c      	mov	r4, r1
 80063a2:	6831      	ldr	r1, [r6, #0]
 80063a4:	4605      	mov	r5, r0
 80063a6:	b911      	cbnz	r1, 80063ae <sbrk_aligned+0x12>
 80063a8:	f000 fd8e 	bl	8006ec8 <_sbrk_r>
 80063ac:	6030      	str	r0, [r6, #0]
 80063ae:	4621      	mov	r1, r4
 80063b0:	4628      	mov	r0, r5
 80063b2:	f000 fd89 	bl	8006ec8 <_sbrk_r>
 80063b6:	1c43      	adds	r3, r0, #1
 80063b8:	d00a      	beq.n	80063d0 <sbrk_aligned+0x34>
 80063ba:	1cc4      	adds	r4, r0, #3
 80063bc:	f024 0403 	bic.w	r4, r4, #3
 80063c0:	42a0      	cmp	r0, r4
 80063c2:	d007      	beq.n	80063d4 <sbrk_aligned+0x38>
 80063c4:	1a21      	subs	r1, r4, r0
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 fd7e 	bl	8006ec8 <_sbrk_r>
 80063cc:	3001      	adds	r0, #1
 80063ce:	d101      	bne.n	80063d4 <sbrk_aligned+0x38>
 80063d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80063d4:	4620      	mov	r0, r4
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	20001424 	.word	0x20001424

080063dc <_malloc_r>:
 80063dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e0:	1ccd      	adds	r5, r1, #3
 80063e2:	f025 0503 	bic.w	r5, r5, #3
 80063e6:	3508      	adds	r5, #8
 80063e8:	2d0c      	cmp	r5, #12
 80063ea:	bf38      	it	cc
 80063ec:	250c      	movcc	r5, #12
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	4607      	mov	r7, r0
 80063f2:	db01      	blt.n	80063f8 <_malloc_r+0x1c>
 80063f4:	42a9      	cmp	r1, r5
 80063f6:	d905      	bls.n	8006404 <_malloc_r+0x28>
 80063f8:	230c      	movs	r3, #12
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	2600      	movs	r6, #0
 80063fe:	4630      	mov	r0, r6
 8006400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006404:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80064d8 <_malloc_r+0xfc>
 8006408:	f000 f916 	bl	8006638 <__malloc_lock>
 800640c:	f8d8 3000 	ldr.w	r3, [r8]
 8006410:	461c      	mov	r4, r3
 8006412:	bb5c      	cbnz	r4, 800646c <_malloc_r+0x90>
 8006414:	4629      	mov	r1, r5
 8006416:	4638      	mov	r0, r7
 8006418:	f7ff ffc0 	bl	800639c <sbrk_aligned>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	4604      	mov	r4, r0
 8006420:	d155      	bne.n	80064ce <_malloc_r+0xf2>
 8006422:	f8d8 4000 	ldr.w	r4, [r8]
 8006426:	4626      	mov	r6, r4
 8006428:	2e00      	cmp	r6, #0
 800642a:	d145      	bne.n	80064b8 <_malloc_r+0xdc>
 800642c:	2c00      	cmp	r4, #0
 800642e:	d048      	beq.n	80064c2 <_malloc_r+0xe6>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	4631      	mov	r1, r6
 8006434:	4638      	mov	r0, r7
 8006436:	eb04 0903 	add.w	r9, r4, r3
 800643a:	f000 fd45 	bl	8006ec8 <_sbrk_r>
 800643e:	4581      	cmp	r9, r0
 8006440:	d13f      	bne.n	80064c2 <_malloc_r+0xe6>
 8006442:	6821      	ldr	r1, [r4, #0]
 8006444:	1a6d      	subs	r5, r5, r1
 8006446:	4629      	mov	r1, r5
 8006448:	4638      	mov	r0, r7
 800644a:	f7ff ffa7 	bl	800639c <sbrk_aligned>
 800644e:	3001      	adds	r0, #1
 8006450:	d037      	beq.n	80064c2 <_malloc_r+0xe6>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	442b      	add	r3, r5
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	f8d8 3000 	ldr.w	r3, [r8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d038      	beq.n	80064d2 <_malloc_r+0xf6>
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	42a2      	cmp	r2, r4
 8006464:	d12b      	bne.n	80064be <_malloc_r+0xe2>
 8006466:	2200      	movs	r2, #0
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	e00f      	b.n	800648c <_malloc_r+0xb0>
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	1b52      	subs	r2, r2, r5
 8006470:	d41f      	bmi.n	80064b2 <_malloc_r+0xd6>
 8006472:	2a0b      	cmp	r2, #11
 8006474:	d917      	bls.n	80064a6 <_malloc_r+0xca>
 8006476:	1961      	adds	r1, r4, r5
 8006478:	42a3      	cmp	r3, r4
 800647a:	6025      	str	r5, [r4, #0]
 800647c:	bf18      	it	ne
 800647e:	6059      	strne	r1, [r3, #4]
 8006480:	6863      	ldr	r3, [r4, #4]
 8006482:	bf08      	it	eq
 8006484:	f8c8 1000 	streq.w	r1, [r8]
 8006488:	5162      	str	r2, [r4, r5]
 800648a:	604b      	str	r3, [r1, #4]
 800648c:	4638      	mov	r0, r7
 800648e:	f104 060b 	add.w	r6, r4, #11
 8006492:	f000 f8d7 	bl	8006644 <__malloc_unlock>
 8006496:	f026 0607 	bic.w	r6, r6, #7
 800649a:	1d23      	adds	r3, r4, #4
 800649c:	1af2      	subs	r2, r6, r3
 800649e:	d0ae      	beq.n	80063fe <_malloc_r+0x22>
 80064a0:	1b9b      	subs	r3, r3, r6
 80064a2:	50a3      	str	r3, [r4, r2]
 80064a4:	e7ab      	b.n	80063fe <_malloc_r+0x22>
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	6862      	ldr	r2, [r4, #4]
 80064aa:	d1dd      	bne.n	8006468 <_malloc_r+0x8c>
 80064ac:	f8c8 2000 	str.w	r2, [r8]
 80064b0:	e7ec      	b.n	800648c <_malloc_r+0xb0>
 80064b2:	4623      	mov	r3, r4
 80064b4:	6864      	ldr	r4, [r4, #4]
 80064b6:	e7ac      	b.n	8006412 <_malloc_r+0x36>
 80064b8:	4634      	mov	r4, r6
 80064ba:	6876      	ldr	r6, [r6, #4]
 80064bc:	e7b4      	b.n	8006428 <_malloc_r+0x4c>
 80064be:	4613      	mov	r3, r2
 80064c0:	e7cc      	b.n	800645c <_malloc_r+0x80>
 80064c2:	230c      	movs	r3, #12
 80064c4:	603b      	str	r3, [r7, #0]
 80064c6:	4638      	mov	r0, r7
 80064c8:	f000 f8bc 	bl	8006644 <__malloc_unlock>
 80064cc:	e797      	b.n	80063fe <_malloc_r+0x22>
 80064ce:	6025      	str	r5, [r4, #0]
 80064d0:	e7dc      	b.n	800648c <_malloc_r+0xb0>
 80064d2:	605b      	str	r3, [r3, #4]
 80064d4:	deff      	udf	#255	; 0xff
 80064d6:	bf00      	nop
 80064d8:	20001420 	.word	0x20001420

080064dc <__sflush_r>:
 80064dc:	898a      	ldrh	r2, [r1, #12]
 80064de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e2:	4605      	mov	r5, r0
 80064e4:	0710      	lsls	r0, r2, #28
 80064e6:	460c      	mov	r4, r1
 80064e8:	d458      	bmi.n	800659c <__sflush_r+0xc0>
 80064ea:	684b      	ldr	r3, [r1, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	dc05      	bgt.n	80064fc <__sflush_r+0x20>
 80064f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dc02      	bgt.n	80064fc <__sflush_r+0x20>
 80064f6:	2000      	movs	r0, #0
 80064f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064fe:	2e00      	cmp	r6, #0
 8006500:	d0f9      	beq.n	80064f6 <__sflush_r+0x1a>
 8006502:	2300      	movs	r3, #0
 8006504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006508:	682f      	ldr	r7, [r5, #0]
 800650a:	6a21      	ldr	r1, [r4, #32]
 800650c:	602b      	str	r3, [r5, #0]
 800650e:	d032      	beq.n	8006576 <__sflush_r+0x9a>
 8006510:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	075a      	lsls	r2, r3, #29
 8006516:	d505      	bpl.n	8006524 <__sflush_r+0x48>
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	1ac0      	subs	r0, r0, r3
 800651c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800651e:	b10b      	cbz	r3, 8006524 <__sflush_r+0x48>
 8006520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006522:	1ac0      	subs	r0, r0, r3
 8006524:	2300      	movs	r3, #0
 8006526:	4602      	mov	r2, r0
 8006528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800652a:	6a21      	ldr	r1, [r4, #32]
 800652c:	4628      	mov	r0, r5
 800652e:	47b0      	blx	r6
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	d106      	bne.n	8006544 <__sflush_r+0x68>
 8006536:	6829      	ldr	r1, [r5, #0]
 8006538:	291d      	cmp	r1, #29
 800653a:	d82b      	bhi.n	8006594 <__sflush_r+0xb8>
 800653c:	4a29      	ldr	r2, [pc, #164]	; (80065e4 <__sflush_r+0x108>)
 800653e:	410a      	asrs	r2, r1
 8006540:	07d6      	lsls	r6, r2, #31
 8006542:	d427      	bmi.n	8006594 <__sflush_r+0xb8>
 8006544:	2200      	movs	r2, #0
 8006546:	6062      	str	r2, [r4, #4]
 8006548:	04d9      	lsls	r1, r3, #19
 800654a:	6922      	ldr	r2, [r4, #16]
 800654c:	6022      	str	r2, [r4, #0]
 800654e:	d504      	bpl.n	800655a <__sflush_r+0x7e>
 8006550:	1c42      	adds	r2, r0, #1
 8006552:	d101      	bne.n	8006558 <__sflush_r+0x7c>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	b903      	cbnz	r3, 800655a <__sflush_r+0x7e>
 8006558:	6560      	str	r0, [r4, #84]	; 0x54
 800655a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800655c:	602f      	str	r7, [r5, #0]
 800655e:	2900      	cmp	r1, #0
 8006560:	d0c9      	beq.n	80064f6 <__sflush_r+0x1a>
 8006562:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006566:	4299      	cmp	r1, r3
 8006568:	d002      	beq.n	8006570 <__sflush_r+0x94>
 800656a:	4628      	mov	r0, r5
 800656c:	f000 fd10 	bl	8006f90 <_free_r>
 8006570:	2000      	movs	r0, #0
 8006572:	6360      	str	r0, [r4, #52]	; 0x34
 8006574:	e7c0      	b.n	80064f8 <__sflush_r+0x1c>
 8006576:	2301      	movs	r3, #1
 8006578:	4628      	mov	r0, r5
 800657a:	47b0      	blx	r6
 800657c:	1c41      	adds	r1, r0, #1
 800657e:	d1c8      	bne.n	8006512 <__sflush_r+0x36>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0c5      	beq.n	8006512 <__sflush_r+0x36>
 8006586:	2b1d      	cmp	r3, #29
 8006588:	d001      	beq.n	800658e <__sflush_r+0xb2>
 800658a:	2b16      	cmp	r3, #22
 800658c:	d101      	bne.n	8006592 <__sflush_r+0xb6>
 800658e:	602f      	str	r7, [r5, #0]
 8006590:	e7b1      	b.n	80064f6 <__sflush_r+0x1a>
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006598:	81a3      	strh	r3, [r4, #12]
 800659a:	e7ad      	b.n	80064f8 <__sflush_r+0x1c>
 800659c:	690f      	ldr	r7, [r1, #16]
 800659e:	2f00      	cmp	r7, #0
 80065a0:	d0a9      	beq.n	80064f6 <__sflush_r+0x1a>
 80065a2:	0793      	lsls	r3, r2, #30
 80065a4:	680e      	ldr	r6, [r1, #0]
 80065a6:	bf08      	it	eq
 80065a8:	694b      	ldreq	r3, [r1, #20]
 80065aa:	600f      	str	r7, [r1, #0]
 80065ac:	bf18      	it	ne
 80065ae:	2300      	movne	r3, #0
 80065b0:	eba6 0807 	sub.w	r8, r6, r7
 80065b4:	608b      	str	r3, [r1, #8]
 80065b6:	f1b8 0f00 	cmp.w	r8, #0
 80065ba:	dd9c      	ble.n	80064f6 <__sflush_r+0x1a>
 80065bc:	6a21      	ldr	r1, [r4, #32]
 80065be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065c0:	4643      	mov	r3, r8
 80065c2:	463a      	mov	r2, r7
 80065c4:	4628      	mov	r0, r5
 80065c6:	47b0      	blx	r6
 80065c8:	2800      	cmp	r0, #0
 80065ca:	dc06      	bgt.n	80065da <__sflush_r+0xfe>
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065d8:	e78e      	b.n	80064f8 <__sflush_r+0x1c>
 80065da:	4407      	add	r7, r0
 80065dc:	eba8 0800 	sub.w	r8, r8, r0
 80065e0:	e7e9      	b.n	80065b6 <__sflush_r+0xda>
 80065e2:	bf00      	nop
 80065e4:	dfbffffe 	.word	0xdfbffffe

080065e8 <_fflush_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	690b      	ldr	r3, [r1, #16]
 80065ec:	4605      	mov	r5, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	b913      	cbnz	r3, 80065f8 <_fflush_r+0x10>
 80065f2:	2500      	movs	r5, #0
 80065f4:	4628      	mov	r0, r5
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	b118      	cbz	r0, 8006602 <_fflush_r+0x1a>
 80065fa:	6a03      	ldr	r3, [r0, #32]
 80065fc:	b90b      	cbnz	r3, 8006602 <_fflush_r+0x1a>
 80065fe:	f7fe fe83 	bl	8005308 <__sinit>
 8006602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f3      	beq.n	80065f2 <_fflush_r+0xa>
 800660a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800660c:	07d0      	lsls	r0, r2, #31
 800660e:	d404      	bmi.n	800661a <_fflush_r+0x32>
 8006610:	0599      	lsls	r1, r3, #22
 8006612:	d402      	bmi.n	800661a <_fflush_r+0x32>
 8006614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006616:	f7fe fee4 	bl	80053e2 <__retarget_lock_acquire_recursive>
 800661a:	4628      	mov	r0, r5
 800661c:	4621      	mov	r1, r4
 800661e:	f7ff ff5d 	bl	80064dc <__sflush_r>
 8006622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006624:	07da      	lsls	r2, r3, #31
 8006626:	4605      	mov	r5, r0
 8006628:	d4e4      	bmi.n	80065f4 <_fflush_r+0xc>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	059b      	lsls	r3, r3, #22
 800662e:	d4e1      	bmi.n	80065f4 <_fflush_r+0xc>
 8006630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006632:	f7fe fed7 	bl	80053e4 <__retarget_lock_release_recursive>
 8006636:	e7dd      	b.n	80065f4 <_fflush_r+0xc>

08006638 <__malloc_lock>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__malloc_lock+0x8>)
 800663a:	f7fe bed2 	b.w	80053e2 <__retarget_lock_acquire_recursive>
 800663e:	bf00      	nop
 8006640:	2000141c 	.word	0x2000141c

08006644 <__malloc_unlock>:
 8006644:	4801      	ldr	r0, [pc, #4]	; (800664c <__malloc_unlock+0x8>)
 8006646:	f7fe becd 	b.w	80053e4 <__retarget_lock_release_recursive>
 800664a:	bf00      	nop
 800664c:	2000141c 	.word	0x2000141c

08006650 <_Balloc>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	69c6      	ldr	r6, [r0, #28]
 8006654:	4604      	mov	r4, r0
 8006656:	460d      	mov	r5, r1
 8006658:	b976      	cbnz	r6, 8006678 <_Balloc+0x28>
 800665a:	2010      	movs	r0, #16
 800665c:	f7ff fe96 	bl	800638c <malloc>
 8006660:	4602      	mov	r2, r0
 8006662:	61e0      	str	r0, [r4, #28]
 8006664:	b920      	cbnz	r0, 8006670 <_Balloc+0x20>
 8006666:	4b18      	ldr	r3, [pc, #96]	; (80066c8 <_Balloc+0x78>)
 8006668:	4818      	ldr	r0, [pc, #96]	; (80066cc <_Balloc+0x7c>)
 800666a:	216b      	movs	r1, #107	; 0x6b
 800666c:	f000 fc5c 	bl	8006f28 <__assert_func>
 8006670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006674:	6006      	str	r6, [r0, #0]
 8006676:	60c6      	str	r6, [r0, #12]
 8006678:	69e6      	ldr	r6, [r4, #28]
 800667a:	68f3      	ldr	r3, [r6, #12]
 800667c:	b183      	cbz	r3, 80066a0 <_Balloc+0x50>
 800667e:	69e3      	ldr	r3, [r4, #28]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006686:	b9b8      	cbnz	r0, 80066b8 <_Balloc+0x68>
 8006688:	2101      	movs	r1, #1
 800668a:	fa01 f605 	lsl.w	r6, r1, r5
 800668e:	1d72      	adds	r2, r6, #5
 8006690:	0092      	lsls	r2, r2, #2
 8006692:	4620      	mov	r0, r4
 8006694:	f000 fc66 	bl	8006f64 <_calloc_r>
 8006698:	b160      	cbz	r0, 80066b4 <_Balloc+0x64>
 800669a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800669e:	e00e      	b.n	80066be <_Balloc+0x6e>
 80066a0:	2221      	movs	r2, #33	; 0x21
 80066a2:	2104      	movs	r1, #4
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 fc5d 	bl	8006f64 <_calloc_r>
 80066aa:	69e3      	ldr	r3, [r4, #28]
 80066ac:	60f0      	str	r0, [r6, #12]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e4      	bne.n	800667e <_Balloc+0x2e>
 80066b4:	2000      	movs	r0, #0
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	6802      	ldr	r2, [r0, #0]
 80066ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066be:	2300      	movs	r3, #0
 80066c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066c4:	e7f7      	b.n	80066b6 <_Balloc+0x66>
 80066c6:	bf00      	nop
 80066c8:	080084f9 	.word	0x080084f9
 80066cc:	0800858a 	.word	0x0800858a

080066d0 <_Bfree>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	69c6      	ldr	r6, [r0, #28]
 80066d4:	4605      	mov	r5, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	b976      	cbnz	r6, 80066f8 <_Bfree+0x28>
 80066da:	2010      	movs	r0, #16
 80066dc:	f7ff fe56 	bl	800638c <malloc>
 80066e0:	4602      	mov	r2, r0
 80066e2:	61e8      	str	r0, [r5, #28]
 80066e4:	b920      	cbnz	r0, 80066f0 <_Bfree+0x20>
 80066e6:	4b09      	ldr	r3, [pc, #36]	; (800670c <_Bfree+0x3c>)
 80066e8:	4809      	ldr	r0, [pc, #36]	; (8006710 <_Bfree+0x40>)
 80066ea:	218f      	movs	r1, #143	; 0x8f
 80066ec:	f000 fc1c 	bl	8006f28 <__assert_func>
 80066f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066f4:	6006      	str	r6, [r0, #0]
 80066f6:	60c6      	str	r6, [r0, #12]
 80066f8:	b13c      	cbz	r4, 800670a <_Bfree+0x3a>
 80066fa:	69eb      	ldr	r3, [r5, #28]
 80066fc:	6862      	ldr	r2, [r4, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006704:	6021      	str	r1, [r4, #0]
 8006706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	080084f9 	.word	0x080084f9
 8006710:	0800858a 	.word	0x0800858a

08006714 <__multadd>:
 8006714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	690d      	ldr	r5, [r1, #16]
 800671a:	4607      	mov	r7, r0
 800671c:	460c      	mov	r4, r1
 800671e:	461e      	mov	r6, r3
 8006720:	f101 0c14 	add.w	ip, r1, #20
 8006724:	2000      	movs	r0, #0
 8006726:	f8dc 3000 	ldr.w	r3, [ip]
 800672a:	b299      	uxth	r1, r3
 800672c:	fb02 6101 	mla	r1, r2, r1, r6
 8006730:	0c1e      	lsrs	r6, r3, #16
 8006732:	0c0b      	lsrs	r3, r1, #16
 8006734:	fb02 3306 	mla	r3, r2, r6, r3
 8006738:	b289      	uxth	r1, r1
 800673a:	3001      	adds	r0, #1
 800673c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006740:	4285      	cmp	r5, r0
 8006742:	f84c 1b04 	str.w	r1, [ip], #4
 8006746:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800674a:	dcec      	bgt.n	8006726 <__multadd+0x12>
 800674c:	b30e      	cbz	r6, 8006792 <__multadd+0x7e>
 800674e:	68a3      	ldr	r3, [r4, #8]
 8006750:	42ab      	cmp	r3, r5
 8006752:	dc19      	bgt.n	8006788 <__multadd+0x74>
 8006754:	6861      	ldr	r1, [r4, #4]
 8006756:	4638      	mov	r0, r7
 8006758:	3101      	adds	r1, #1
 800675a:	f7ff ff79 	bl	8006650 <_Balloc>
 800675e:	4680      	mov	r8, r0
 8006760:	b928      	cbnz	r0, 800676e <__multadd+0x5a>
 8006762:	4602      	mov	r2, r0
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <__multadd+0x84>)
 8006766:	480d      	ldr	r0, [pc, #52]	; (800679c <__multadd+0x88>)
 8006768:	21ba      	movs	r1, #186	; 0xba
 800676a:	f000 fbdd 	bl	8006f28 <__assert_func>
 800676e:	6922      	ldr	r2, [r4, #16]
 8006770:	3202      	adds	r2, #2
 8006772:	f104 010c 	add.w	r1, r4, #12
 8006776:	0092      	lsls	r2, r2, #2
 8006778:	300c      	adds	r0, #12
 800677a:	f000 fbc7 	bl	8006f0c <memcpy>
 800677e:	4621      	mov	r1, r4
 8006780:	4638      	mov	r0, r7
 8006782:	f7ff ffa5 	bl	80066d0 <_Bfree>
 8006786:	4644      	mov	r4, r8
 8006788:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800678c:	3501      	adds	r5, #1
 800678e:	615e      	str	r6, [r3, #20]
 8006790:	6125      	str	r5, [r4, #16]
 8006792:	4620      	mov	r0, r4
 8006794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006798:	08008568 	.word	0x08008568
 800679c:	0800858a 	.word	0x0800858a

080067a0 <__hi0bits>:
 80067a0:	0c03      	lsrs	r3, r0, #16
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	b9d3      	cbnz	r3, 80067dc <__hi0bits+0x3c>
 80067a6:	0400      	lsls	r0, r0, #16
 80067a8:	2310      	movs	r3, #16
 80067aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80067ae:	bf04      	itt	eq
 80067b0:	0200      	lsleq	r0, r0, #8
 80067b2:	3308      	addeq	r3, #8
 80067b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80067b8:	bf04      	itt	eq
 80067ba:	0100      	lsleq	r0, r0, #4
 80067bc:	3304      	addeq	r3, #4
 80067be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80067c2:	bf04      	itt	eq
 80067c4:	0080      	lsleq	r0, r0, #2
 80067c6:	3302      	addeq	r3, #2
 80067c8:	2800      	cmp	r0, #0
 80067ca:	db05      	blt.n	80067d8 <__hi0bits+0x38>
 80067cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80067d0:	f103 0301 	add.w	r3, r3, #1
 80067d4:	bf08      	it	eq
 80067d6:	2320      	moveq	r3, #32
 80067d8:	4618      	mov	r0, r3
 80067da:	4770      	bx	lr
 80067dc:	2300      	movs	r3, #0
 80067de:	e7e4      	b.n	80067aa <__hi0bits+0xa>

080067e0 <__lo0bits>:
 80067e0:	6803      	ldr	r3, [r0, #0]
 80067e2:	f013 0207 	ands.w	r2, r3, #7
 80067e6:	d00c      	beq.n	8006802 <__lo0bits+0x22>
 80067e8:	07d9      	lsls	r1, r3, #31
 80067ea:	d422      	bmi.n	8006832 <__lo0bits+0x52>
 80067ec:	079a      	lsls	r2, r3, #30
 80067ee:	bf49      	itett	mi
 80067f0:	085b      	lsrmi	r3, r3, #1
 80067f2:	089b      	lsrpl	r3, r3, #2
 80067f4:	6003      	strmi	r3, [r0, #0]
 80067f6:	2201      	movmi	r2, #1
 80067f8:	bf5c      	itt	pl
 80067fa:	6003      	strpl	r3, [r0, #0]
 80067fc:	2202      	movpl	r2, #2
 80067fe:	4610      	mov	r0, r2
 8006800:	4770      	bx	lr
 8006802:	b299      	uxth	r1, r3
 8006804:	b909      	cbnz	r1, 800680a <__lo0bits+0x2a>
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	2210      	movs	r2, #16
 800680a:	b2d9      	uxtb	r1, r3
 800680c:	b909      	cbnz	r1, 8006812 <__lo0bits+0x32>
 800680e:	3208      	adds	r2, #8
 8006810:	0a1b      	lsrs	r3, r3, #8
 8006812:	0719      	lsls	r1, r3, #28
 8006814:	bf04      	itt	eq
 8006816:	091b      	lsreq	r3, r3, #4
 8006818:	3204      	addeq	r2, #4
 800681a:	0799      	lsls	r1, r3, #30
 800681c:	bf04      	itt	eq
 800681e:	089b      	lsreq	r3, r3, #2
 8006820:	3202      	addeq	r2, #2
 8006822:	07d9      	lsls	r1, r3, #31
 8006824:	d403      	bmi.n	800682e <__lo0bits+0x4e>
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	f102 0201 	add.w	r2, r2, #1
 800682c:	d003      	beq.n	8006836 <__lo0bits+0x56>
 800682e:	6003      	str	r3, [r0, #0]
 8006830:	e7e5      	b.n	80067fe <__lo0bits+0x1e>
 8006832:	2200      	movs	r2, #0
 8006834:	e7e3      	b.n	80067fe <__lo0bits+0x1e>
 8006836:	2220      	movs	r2, #32
 8006838:	e7e1      	b.n	80067fe <__lo0bits+0x1e>
	...

0800683c <__i2b>:
 800683c:	b510      	push	{r4, lr}
 800683e:	460c      	mov	r4, r1
 8006840:	2101      	movs	r1, #1
 8006842:	f7ff ff05 	bl	8006650 <_Balloc>
 8006846:	4602      	mov	r2, r0
 8006848:	b928      	cbnz	r0, 8006856 <__i2b+0x1a>
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <__i2b+0x24>)
 800684c:	4805      	ldr	r0, [pc, #20]	; (8006864 <__i2b+0x28>)
 800684e:	f240 1145 	movw	r1, #325	; 0x145
 8006852:	f000 fb69 	bl	8006f28 <__assert_func>
 8006856:	2301      	movs	r3, #1
 8006858:	6144      	str	r4, [r0, #20]
 800685a:	6103      	str	r3, [r0, #16]
 800685c:	bd10      	pop	{r4, pc}
 800685e:	bf00      	nop
 8006860:	08008568 	.word	0x08008568
 8006864:	0800858a 	.word	0x0800858a

08006868 <__multiply>:
 8006868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686c:	4691      	mov	r9, r2
 800686e:	690a      	ldr	r2, [r1, #16]
 8006870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	bfb8      	it	lt
 8006878:	460b      	movlt	r3, r1
 800687a:	460c      	mov	r4, r1
 800687c:	bfbc      	itt	lt
 800687e:	464c      	movlt	r4, r9
 8006880:	4699      	movlt	r9, r3
 8006882:	6927      	ldr	r7, [r4, #16]
 8006884:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006888:	68a3      	ldr	r3, [r4, #8]
 800688a:	6861      	ldr	r1, [r4, #4]
 800688c:	eb07 060a 	add.w	r6, r7, sl
 8006890:	42b3      	cmp	r3, r6
 8006892:	b085      	sub	sp, #20
 8006894:	bfb8      	it	lt
 8006896:	3101      	addlt	r1, #1
 8006898:	f7ff feda 	bl	8006650 <_Balloc>
 800689c:	b930      	cbnz	r0, 80068ac <__multiply+0x44>
 800689e:	4602      	mov	r2, r0
 80068a0:	4b44      	ldr	r3, [pc, #272]	; (80069b4 <__multiply+0x14c>)
 80068a2:	4845      	ldr	r0, [pc, #276]	; (80069b8 <__multiply+0x150>)
 80068a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80068a8:	f000 fb3e 	bl	8006f28 <__assert_func>
 80068ac:	f100 0514 	add.w	r5, r0, #20
 80068b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068b4:	462b      	mov	r3, r5
 80068b6:	2200      	movs	r2, #0
 80068b8:	4543      	cmp	r3, r8
 80068ba:	d321      	bcc.n	8006900 <__multiply+0x98>
 80068bc:	f104 0314 	add.w	r3, r4, #20
 80068c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068c4:	f109 0314 	add.w	r3, r9, #20
 80068c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068cc:	9202      	str	r2, [sp, #8]
 80068ce:	1b3a      	subs	r2, r7, r4
 80068d0:	3a15      	subs	r2, #21
 80068d2:	f022 0203 	bic.w	r2, r2, #3
 80068d6:	3204      	adds	r2, #4
 80068d8:	f104 0115 	add.w	r1, r4, #21
 80068dc:	428f      	cmp	r7, r1
 80068de:	bf38      	it	cc
 80068e0:	2204      	movcc	r2, #4
 80068e2:	9201      	str	r2, [sp, #4]
 80068e4:	9a02      	ldr	r2, [sp, #8]
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d80c      	bhi.n	8006906 <__multiply+0x9e>
 80068ec:	2e00      	cmp	r6, #0
 80068ee:	dd03      	ble.n	80068f8 <__multiply+0x90>
 80068f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d05b      	beq.n	80069b0 <__multiply+0x148>
 80068f8:	6106      	str	r6, [r0, #16]
 80068fa:	b005      	add	sp, #20
 80068fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006900:	f843 2b04 	str.w	r2, [r3], #4
 8006904:	e7d8      	b.n	80068b8 <__multiply+0x50>
 8006906:	f8b3 a000 	ldrh.w	sl, [r3]
 800690a:	f1ba 0f00 	cmp.w	sl, #0
 800690e:	d024      	beq.n	800695a <__multiply+0xf2>
 8006910:	f104 0e14 	add.w	lr, r4, #20
 8006914:	46a9      	mov	r9, r5
 8006916:	f04f 0c00 	mov.w	ip, #0
 800691a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800691e:	f8d9 1000 	ldr.w	r1, [r9]
 8006922:	fa1f fb82 	uxth.w	fp, r2
 8006926:	b289      	uxth	r1, r1
 8006928:	fb0a 110b 	mla	r1, sl, fp, r1
 800692c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006930:	f8d9 2000 	ldr.w	r2, [r9]
 8006934:	4461      	add	r1, ip
 8006936:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800693a:	fb0a c20b 	mla	r2, sl, fp, ip
 800693e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006942:	b289      	uxth	r1, r1
 8006944:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006948:	4577      	cmp	r7, lr
 800694a:	f849 1b04 	str.w	r1, [r9], #4
 800694e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006952:	d8e2      	bhi.n	800691a <__multiply+0xb2>
 8006954:	9a01      	ldr	r2, [sp, #4]
 8006956:	f845 c002 	str.w	ip, [r5, r2]
 800695a:	9a03      	ldr	r2, [sp, #12]
 800695c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006960:	3304      	adds	r3, #4
 8006962:	f1b9 0f00 	cmp.w	r9, #0
 8006966:	d021      	beq.n	80069ac <__multiply+0x144>
 8006968:	6829      	ldr	r1, [r5, #0]
 800696a:	f104 0c14 	add.w	ip, r4, #20
 800696e:	46ae      	mov	lr, r5
 8006970:	f04f 0a00 	mov.w	sl, #0
 8006974:	f8bc b000 	ldrh.w	fp, [ip]
 8006978:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800697c:	fb09 220b 	mla	r2, r9, fp, r2
 8006980:	4452      	add	r2, sl
 8006982:	b289      	uxth	r1, r1
 8006984:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006988:	f84e 1b04 	str.w	r1, [lr], #4
 800698c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006990:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006994:	f8be 1000 	ldrh.w	r1, [lr]
 8006998:	fb09 110a 	mla	r1, r9, sl, r1
 800699c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80069a0:	4567      	cmp	r7, ip
 80069a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069a6:	d8e5      	bhi.n	8006974 <__multiply+0x10c>
 80069a8:	9a01      	ldr	r2, [sp, #4]
 80069aa:	50a9      	str	r1, [r5, r2]
 80069ac:	3504      	adds	r5, #4
 80069ae:	e799      	b.n	80068e4 <__multiply+0x7c>
 80069b0:	3e01      	subs	r6, #1
 80069b2:	e79b      	b.n	80068ec <__multiply+0x84>
 80069b4:	08008568 	.word	0x08008568
 80069b8:	0800858a 	.word	0x0800858a

080069bc <__pow5mult>:
 80069bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c0:	4615      	mov	r5, r2
 80069c2:	f012 0203 	ands.w	r2, r2, #3
 80069c6:	4606      	mov	r6, r0
 80069c8:	460f      	mov	r7, r1
 80069ca:	d007      	beq.n	80069dc <__pow5mult+0x20>
 80069cc:	4c25      	ldr	r4, [pc, #148]	; (8006a64 <__pow5mult+0xa8>)
 80069ce:	3a01      	subs	r2, #1
 80069d0:	2300      	movs	r3, #0
 80069d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069d6:	f7ff fe9d 	bl	8006714 <__multadd>
 80069da:	4607      	mov	r7, r0
 80069dc:	10ad      	asrs	r5, r5, #2
 80069de:	d03d      	beq.n	8006a5c <__pow5mult+0xa0>
 80069e0:	69f4      	ldr	r4, [r6, #28]
 80069e2:	b97c      	cbnz	r4, 8006a04 <__pow5mult+0x48>
 80069e4:	2010      	movs	r0, #16
 80069e6:	f7ff fcd1 	bl	800638c <malloc>
 80069ea:	4602      	mov	r2, r0
 80069ec:	61f0      	str	r0, [r6, #28]
 80069ee:	b928      	cbnz	r0, 80069fc <__pow5mult+0x40>
 80069f0:	4b1d      	ldr	r3, [pc, #116]	; (8006a68 <__pow5mult+0xac>)
 80069f2:	481e      	ldr	r0, [pc, #120]	; (8006a6c <__pow5mult+0xb0>)
 80069f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80069f8:	f000 fa96 	bl	8006f28 <__assert_func>
 80069fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a00:	6004      	str	r4, [r0, #0]
 8006a02:	60c4      	str	r4, [r0, #12]
 8006a04:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a0c:	b94c      	cbnz	r4, 8006a22 <__pow5mult+0x66>
 8006a0e:	f240 2171 	movw	r1, #625	; 0x271
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7ff ff12 	bl	800683c <__i2b>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a1e:	4604      	mov	r4, r0
 8006a20:	6003      	str	r3, [r0, #0]
 8006a22:	f04f 0900 	mov.w	r9, #0
 8006a26:	07eb      	lsls	r3, r5, #31
 8006a28:	d50a      	bpl.n	8006a40 <__pow5mult+0x84>
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f7ff ff1a 	bl	8006868 <__multiply>
 8006a34:	4639      	mov	r1, r7
 8006a36:	4680      	mov	r8, r0
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f7ff fe49 	bl	80066d0 <_Bfree>
 8006a3e:	4647      	mov	r7, r8
 8006a40:	106d      	asrs	r5, r5, #1
 8006a42:	d00b      	beq.n	8006a5c <__pow5mult+0xa0>
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	b938      	cbnz	r0, 8006a58 <__pow5mult+0x9c>
 8006a48:	4622      	mov	r2, r4
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f7ff ff0b 	bl	8006868 <__multiply>
 8006a52:	6020      	str	r0, [r4, #0]
 8006a54:	f8c0 9000 	str.w	r9, [r0]
 8006a58:	4604      	mov	r4, r0
 8006a5a:	e7e4      	b.n	8006a26 <__pow5mult+0x6a>
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a62:	bf00      	nop
 8006a64:	080086d8 	.word	0x080086d8
 8006a68:	080084f9 	.word	0x080084f9
 8006a6c:	0800858a 	.word	0x0800858a

08006a70 <__lshift>:
 8006a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a74:	460c      	mov	r4, r1
 8006a76:	6849      	ldr	r1, [r1, #4]
 8006a78:	6923      	ldr	r3, [r4, #16]
 8006a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a7e:	68a3      	ldr	r3, [r4, #8]
 8006a80:	4607      	mov	r7, r0
 8006a82:	4691      	mov	r9, r2
 8006a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a88:	f108 0601 	add.w	r6, r8, #1
 8006a8c:	42b3      	cmp	r3, r6
 8006a8e:	db0b      	blt.n	8006aa8 <__lshift+0x38>
 8006a90:	4638      	mov	r0, r7
 8006a92:	f7ff fddd 	bl	8006650 <_Balloc>
 8006a96:	4605      	mov	r5, r0
 8006a98:	b948      	cbnz	r0, 8006aae <__lshift+0x3e>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	4b28      	ldr	r3, [pc, #160]	; (8006b40 <__lshift+0xd0>)
 8006a9e:	4829      	ldr	r0, [pc, #164]	; (8006b44 <__lshift+0xd4>)
 8006aa0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006aa4:	f000 fa40 	bl	8006f28 <__assert_func>
 8006aa8:	3101      	adds	r1, #1
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	e7ee      	b.n	8006a8c <__lshift+0x1c>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f100 0114 	add.w	r1, r0, #20
 8006ab4:	f100 0210 	add.w	r2, r0, #16
 8006ab8:	4618      	mov	r0, r3
 8006aba:	4553      	cmp	r3, sl
 8006abc:	db33      	blt.n	8006b26 <__lshift+0xb6>
 8006abe:	6920      	ldr	r0, [r4, #16]
 8006ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ac4:	f104 0314 	add.w	r3, r4, #20
 8006ac8:	f019 091f 	ands.w	r9, r9, #31
 8006acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ad0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ad4:	d02b      	beq.n	8006b2e <__lshift+0xbe>
 8006ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8006ada:	468a      	mov	sl, r1
 8006adc:	2200      	movs	r2, #0
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ae4:	4310      	orrs	r0, r2
 8006ae6:	f84a 0b04 	str.w	r0, [sl], #4
 8006aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aee:	459c      	cmp	ip, r3
 8006af0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006af4:	d8f3      	bhi.n	8006ade <__lshift+0x6e>
 8006af6:	ebac 0304 	sub.w	r3, ip, r4
 8006afa:	3b15      	subs	r3, #21
 8006afc:	f023 0303 	bic.w	r3, r3, #3
 8006b00:	3304      	adds	r3, #4
 8006b02:	f104 0015 	add.w	r0, r4, #21
 8006b06:	4584      	cmp	ip, r0
 8006b08:	bf38      	it	cc
 8006b0a:	2304      	movcc	r3, #4
 8006b0c:	50ca      	str	r2, [r1, r3]
 8006b0e:	b10a      	cbz	r2, 8006b14 <__lshift+0xa4>
 8006b10:	f108 0602 	add.w	r6, r8, #2
 8006b14:	3e01      	subs	r6, #1
 8006b16:	4638      	mov	r0, r7
 8006b18:	612e      	str	r6, [r5, #16]
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	f7ff fdd8 	bl	80066d0 <_Bfree>
 8006b20:	4628      	mov	r0, r5
 8006b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b26:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	e7c5      	b.n	8006aba <__lshift+0x4a>
 8006b2e:	3904      	subs	r1, #4
 8006b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b34:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b38:	459c      	cmp	ip, r3
 8006b3a:	d8f9      	bhi.n	8006b30 <__lshift+0xc0>
 8006b3c:	e7ea      	b.n	8006b14 <__lshift+0xa4>
 8006b3e:	bf00      	nop
 8006b40:	08008568 	.word	0x08008568
 8006b44:	0800858a 	.word	0x0800858a

08006b48 <__mcmp>:
 8006b48:	b530      	push	{r4, r5, lr}
 8006b4a:	6902      	ldr	r2, [r0, #16]
 8006b4c:	690c      	ldr	r4, [r1, #16]
 8006b4e:	1b12      	subs	r2, r2, r4
 8006b50:	d10e      	bne.n	8006b70 <__mcmp+0x28>
 8006b52:	f100 0314 	add.w	r3, r0, #20
 8006b56:	3114      	adds	r1, #20
 8006b58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006b5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006b60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006b64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006b68:	42a5      	cmp	r5, r4
 8006b6a:	d003      	beq.n	8006b74 <__mcmp+0x2c>
 8006b6c:	d305      	bcc.n	8006b7a <__mcmp+0x32>
 8006b6e:	2201      	movs	r2, #1
 8006b70:	4610      	mov	r0, r2
 8006b72:	bd30      	pop	{r4, r5, pc}
 8006b74:	4283      	cmp	r3, r0
 8006b76:	d3f3      	bcc.n	8006b60 <__mcmp+0x18>
 8006b78:	e7fa      	b.n	8006b70 <__mcmp+0x28>
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b7e:	e7f7      	b.n	8006b70 <__mcmp+0x28>

08006b80 <__mdiff>:
 8006b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	460c      	mov	r4, r1
 8006b86:	4606      	mov	r6, r0
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4690      	mov	r8, r2
 8006b8e:	f7ff ffdb 	bl	8006b48 <__mcmp>
 8006b92:	1e05      	subs	r5, r0, #0
 8006b94:	d110      	bne.n	8006bb8 <__mdiff+0x38>
 8006b96:	4629      	mov	r1, r5
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f7ff fd59 	bl	8006650 <_Balloc>
 8006b9e:	b930      	cbnz	r0, 8006bae <__mdiff+0x2e>
 8006ba0:	4b3a      	ldr	r3, [pc, #232]	; (8006c8c <__mdiff+0x10c>)
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	f240 2137 	movw	r1, #567	; 0x237
 8006ba8:	4839      	ldr	r0, [pc, #228]	; (8006c90 <__mdiff+0x110>)
 8006baa:	f000 f9bd 	bl	8006f28 <__assert_func>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006bb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb8:	bfa4      	itt	ge
 8006bba:	4643      	movge	r3, r8
 8006bbc:	46a0      	movge	r8, r4
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006bc4:	bfa6      	itte	ge
 8006bc6:	461c      	movge	r4, r3
 8006bc8:	2500      	movge	r5, #0
 8006bca:	2501      	movlt	r5, #1
 8006bcc:	f7ff fd40 	bl	8006650 <_Balloc>
 8006bd0:	b920      	cbnz	r0, 8006bdc <__mdiff+0x5c>
 8006bd2:	4b2e      	ldr	r3, [pc, #184]	; (8006c8c <__mdiff+0x10c>)
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	f240 2145 	movw	r1, #581	; 0x245
 8006bda:	e7e5      	b.n	8006ba8 <__mdiff+0x28>
 8006bdc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006be0:	6926      	ldr	r6, [r4, #16]
 8006be2:	60c5      	str	r5, [r0, #12]
 8006be4:	f104 0914 	add.w	r9, r4, #20
 8006be8:	f108 0514 	add.w	r5, r8, #20
 8006bec:	f100 0e14 	add.w	lr, r0, #20
 8006bf0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006bf4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006bf8:	f108 0210 	add.w	r2, r8, #16
 8006bfc:	46f2      	mov	sl, lr
 8006bfe:	2100      	movs	r1, #0
 8006c00:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006c08:	fa11 f88b 	uxtah	r8, r1, fp
 8006c0c:	b299      	uxth	r1, r3
 8006c0e:	0c1b      	lsrs	r3, r3, #16
 8006c10:	eba8 0801 	sub.w	r8, r8, r1
 8006c14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c18:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c1c:	fa1f f888 	uxth.w	r8, r8
 8006c20:	1419      	asrs	r1, r3, #16
 8006c22:	454e      	cmp	r6, r9
 8006c24:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c28:	f84a 3b04 	str.w	r3, [sl], #4
 8006c2c:	d8e8      	bhi.n	8006c00 <__mdiff+0x80>
 8006c2e:	1b33      	subs	r3, r6, r4
 8006c30:	3b15      	subs	r3, #21
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	3304      	adds	r3, #4
 8006c38:	3415      	adds	r4, #21
 8006c3a:	42a6      	cmp	r6, r4
 8006c3c:	bf38      	it	cc
 8006c3e:	2304      	movcc	r3, #4
 8006c40:	441d      	add	r5, r3
 8006c42:	4473      	add	r3, lr
 8006c44:	469e      	mov	lr, r3
 8006c46:	462e      	mov	r6, r5
 8006c48:	4566      	cmp	r6, ip
 8006c4a:	d30e      	bcc.n	8006c6a <__mdiff+0xea>
 8006c4c:	f10c 0203 	add.w	r2, ip, #3
 8006c50:	1b52      	subs	r2, r2, r5
 8006c52:	f022 0203 	bic.w	r2, r2, #3
 8006c56:	3d03      	subs	r5, #3
 8006c58:	45ac      	cmp	ip, r5
 8006c5a:	bf38      	it	cc
 8006c5c:	2200      	movcc	r2, #0
 8006c5e:	4413      	add	r3, r2
 8006c60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c64:	b17a      	cbz	r2, 8006c86 <__mdiff+0x106>
 8006c66:	6107      	str	r7, [r0, #16]
 8006c68:	e7a4      	b.n	8006bb4 <__mdiff+0x34>
 8006c6a:	f856 8b04 	ldr.w	r8, [r6], #4
 8006c6e:	fa11 f288 	uxtah	r2, r1, r8
 8006c72:	1414      	asrs	r4, r2, #16
 8006c74:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c78:	b292      	uxth	r2, r2
 8006c7a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006c7e:	f84e 2b04 	str.w	r2, [lr], #4
 8006c82:	1421      	asrs	r1, r4, #16
 8006c84:	e7e0      	b.n	8006c48 <__mdiff+0xc8>
 8006c86:	3f01      	subs	r7, #1
 8006c88:	e7ea      	b.n	8006c60 <__mdiff+0xe0>
 8006c8a:	bf00      	nop
 8006c8c:	08008568 	.word	0x08008568
 8006c90:	0800858a 	.word	0x0800858a

08006c94 <__d2b>:
 8006c94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c98:	460f      	mov	r7, r1
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	ec59 8b10 	vmov	r8, r9, d0
 8006ca0:	4616      	mov	r6, r2
 8006ca2:	f7ff fcd5 	bl	8006650 <_Balloc>
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	b930      	cbnz	r0, 8006cb8 <__d2b+0x24>
 8006caa:	4602      	mov	r2, r0
 8006cac:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <__d2b+0xac>)
 8006cae:	4825      	ldr	r0, [pc, #148]	; (8006d44 <__d2b+0xb0>)
 8006cb0:	f240 310f 	movw	r1, #783	; 0x30f
 8006cb4:	f000 f938 	bl	8006f28 <__assert_func>
 8006cb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cc0:	bb2d      	cbnz	r5, 8006d0e <__d2b+0x7a>
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	f1b8 0300 	subs.w	r3, r8, #0
 8006cc8:	d026      	beq.n	8006d18 <__d2b+0x84>
 8006cca:	4668      	mov	r0, sp
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	f7ff fd87 	bl	80067e0 <__lo0bits>
 8006cd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006cd6:	b1e8      	cbz	r0, 8006d14 <__d2b+0x80>
 8006cd8:	f1c0 0320 	rsb	r3, r0, #32
 8006cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	40c2      	lsrs	r2, r0
 8006ce4:	6163      	str	r3, [r4, #20]
 8006ce6:	9201      	str	r2, [sp, #4]
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	61a3      	str	r3, [r4, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bf14      	ite	ne
 8006cf0:	2202      	movne	r2, #2
 8006cf2:	2201      	moveq	r2, #1
 8006cf4:	6122      	str	r2, [r4, #16]
 8006cf6:	b1bd      	cbz	r5, 8006d28 <__d2b+0x94>
 8006cf8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006cfc:	4405      	add	r5, r0
 8006cfe:	603d      	str	r5, [r7, #0]
 8006d00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d04:	6030      	str	r0, [r6, #0]
 8006d06:	4620      	mov	r0, r4
 8006d08:	b003      	add	sp, #12
 8006d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d12:	e7d6      	b.n	8006cc2 <__d2b+0x2e>
 8006d14:	6161      	str	r1, [r4, #20]
 8006d16:	e7e7      	b.n	8006ce8 <__d2b+0x54>
 8006d18:	a801      	add	r0, sp, #4
 8006d1a:	f7ff fd61 	bl	80067e0 <__lo0bits>
 8006d1e:	9b01      	ldr	r3, [sp, #4]
 8006d20:	6163      	str	r3, [r4, #20]
 8006d22:	3020      	adds	r0, #32
 8006d24:	2201      	movs	r2, #1
 8006d26:	e7e5      	b.n	8006cf4 <__d2b+0x60>
 8006d28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d30:	6038      	str	r0, [r7, #0]
 8006d32:	6918      	ldr	r0, [r3, #16]
 8006d34:	f7ff fd34 	bl	80067a0 <__hi0bits>
 8006d38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d3c:	e7e2      	b.n	8006d04 <__d2b+0x70>
 8006d3e:	bf00      	nop
 8006d40:	08008568 	.word	0x08008568
 8006d44:	0800858a 	.word	0x0800858a

08006d48 <__sread>:
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d50:	f000 f8a8 	bl	8006ea4 <_read_r>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	bfab      	itete	ge
 8006d58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d5c:	181b      	addge	r3, r3, r0
 8006d5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d62:	bfac      	ite	ge
 8006d64:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d66:	81a3      	strhlt	r3, [r4, #12]
 8006d68:	bd10      	pop	{r4, pc}

08006d6a <__swrite>:
 8006d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6e:	461f      	mov	r7, r3
 8006d70:	898b      	ldrh	r3, [r1, #12]
 8006d72:	05db      	lsls	r3, r3, #23
 8006d74:	4605      	mov	r5, r0
 8006d76:	460c      	mov	r4, r1
 8006d78:	4616      	mov	r6, r2
 8006d7a:	d505      	bpl.n	8006d88 <__swrite+0x1e>
 8006d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d80:	2302      	movs	r3, #2
 8006d82:	2200      	movs	r2, #0
 8006d84:	f000 f87c 	bl	8006e80 <_lseek_r>
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d92:	81a3      	strh	r3, [r4, #12]
 8006d94:	4632      	mov	r2, r6
 8006d96:	463b      	mov	r3, r7
 8006d98:	4628      	mov	r0, r5
 8006d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9e:	f000 b8a3 	b.w	8006ee8 <_write_r>

08006da2 <__sseek>:
 8006da2:	b510      	push	{r4, lr}
 8006da4:	460c      	mov	r4, r1
 8006da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006daa:	f000 f869 	bl	8006e80 <_lseek_r>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	bf15      	itete	ne
 8006db4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006db6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dbe:	81a3      	strheq	r3, [r4, #12]
 8006dc0:	bf18      	it	ne
 8006dc2:	81a3      	strhne	r3, [r4, #12]
 8006dc4:	bd10      	pop	{r4, pc}

08006dc6 <__sclose>:
 8006dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dca:	f000 b849 	b.w	8006e60 <_close_r>

08006dce <_realloc_r>:
 8006dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	460e      	mov	r6, r1
 8006dd8:	b921      	cbnz	r1, 8006de4 <_realloc_r+0x16>
 8006dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dde:	4611      	mov	r1, r2
 8006de0:	f7ff bafc 	b.w	80063dc <_malloc_r>
 8006de4:	b92a      	cbnz	r2, 8006df2 <_realloc_r+0x24>
 8006de6:	f000 f8d3 	bl	8006f90 <_free_r>
 8006dea:	4625      	mov	r5, r4
 8006dec:	4628      	mov	r0, r5
 8006dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df2:	f000 f92b 	bl	800704c <_malloc_usable_size_r>
 8006df6:	4284      	cmp	r4, r0
 8006df8:	4607      	mov	r7, r0
 8006dfa:	d802      	bhi.n	8006e02 <_realloc_r+0x34>
 8006dfc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e00:	d812      	bhi.n	8006e28 <_realloc_r+0x5a>
 8006e02:	4621      	mov	r1, r4
 8006e04:	4640      	mov	r0, r8
 8006e06:	f7ff fae9 	bl	80063dc <_malloc_r>
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d0ed      	beq.n	8006dec <_realloc_r+0x1e>
 8006e10:	42bc      	cmp	r4, r7
 8006e12:	4622      	mov	r2, r4
 8006e14:	4631      	mov	r1, r6
 8006e16:	bf28      	it	cs
 8006e18:	463a      	movcs	r2, r7
 8006e1a:	f000 f877 	bl	8006f0c <memcpy>
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4640      	mov	r0, r8
 8006e22:	f000 f8b5 	bl	8006f90 <_free_r>
 8006e26:	e7e1      	b.n	8006dec <_realloc_r+0x1e>
 8006e28:	4635      	mov	r5, r6
 8006e2a:	e7df      	b.n	8006dec <_realloc_r+0x1e>

08006e2c <memmove>:
 8006e2c:	4288      	cmp	r0, r1
 8006e2e:	b510      	push	{r4, lr}
 8006e30:	eb01 0402 	add.w	r4, r1, r2
 8006e34:	d902      	bls.n	8006e3c <memmove+0x10>
 8006e36:	4284      	cmp	r4, r0
 8006e38:	4623      	mov	r3, r4
 8006e3a:	d807      	bhi.n	8006e4c <memmove+0x20>
 8006e3c:	1e43      	subs	r3, r0, #1
 8006e3e:	42a1      	cmp	r1, r4
 8006e40:	d008      	beq.n	8006e54 <memmove+0x28>
 8006e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e4a:	e7f8      	b.n	8006e3e <memmove+0x12>
 8006e4c:	4402      	add	r2, r0
 8006e4e:	4601      	mov	r1, r0
 8006e50:	428a      	cmp	r2, r1
 8006e52:	d100      	bne.n	8006e56 <memmove+0x2a>
 8006e54:	bd10      	pop	{r4, pc}
 8006e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e5e:	e7f7      	b.n	8006e50 <memmove+0x24>

08006e60 <_close_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4d06      	ldr	r5, [pc, #24]	; (8006e7c <_close_r+0x1c>)
 8006e64:	2300      	movs	r3, #0
 8006e66:	4604      	mov	r4, r0
 8006e68:	4608      	mov	r0, r1
 8006e6a:	602b      	str	r3, [r5, #0]
 8006e6c:	f7fa fd97 	bl	800199e <_close>
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	d102      	bne.n	8006e7a <_close_r+0x1a>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	b103      	cbz	r3, 8006e7a <_close_r+0x1a>
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	20001428 	.word	0x20001428

08006e80 <_lseek_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4d07      	ldr	r5, [pc, #28]	; (8006ea0 <_lseek_r+0x20>)
 8006e84:	4604      	mov	r4, r0
 8006e86:	4608      	mov	r0, r1
 8006e88:	4611      	mov	r1, r2
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	602a      	str	r2, [r5, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f7fa fdac 	bl	80019ec <_lseek>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d102      	bne.n	8006e9e <_lseek_r+0x1e>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	b103      	cbz	r3, 8006e9e <_lseek_r+0x1e>
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	20001428 	.word	0x20001428

08006ea4 <_read_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4d07      	ldr	r5, [pc, #28]	; (8006ec4 <_read_r+0x20>)
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	4608      	mov	r0, r1
 8006eac:	4611      	mov	r1, r2
 8006eae:	2200      	movs	r2, #0
 8006eb0:	602a      	str	r2, [r5, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f7fa fd3a 	bl	800192c <_read>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_read_r+0x1e>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_read_r+0x1e>
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	20001428 	.word	0x20001428

08006ec8 <_sbrk_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4d06      	ldr	r5, [pc, #24]	; (8006ee4 <_sbrk_r+0x1c>)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4604      	mov	r4, r0
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	602b      	str	r3, [r5, #0]
 8006ed4:	f7fa fd98 	bl	8001a08 <_sbrk>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_sbrk_r+0x1a>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_sbrk_r+0x1a>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20001428 	.word	0x20001428

08006ee8 <_write_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4d07      	ldr	r5, [pc, #28]	; (8006f08 <_write_r+0x20>)
 8006eec:	4604      	mov	r4, r0
 8006eee:	4608      	mov	r0, r1
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	602a      	str	r2, [r5, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f7fa fd35 	bl	8001966 <_write>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_write_r+0x1e>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_write_r+0x1e>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	20001428 	.word	0x20001428

08006f0c <memcpy>:
 8006f0c:	440a      	add	r2, r1
 8006f0e:	4291      	cmp	r1, r2
 8006f10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f14:	d100      	bne.n	8006f18 <memcpy+0xc>
 8006f16:	4770      	bx	lr
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f22:	4291      	cmp	r1, r2
 8006f24:	d1f9      	bne.n	8006f1a <memcpy+0xe>
 8006f26:	bd10      	pop	{r4, pc}

08006f28 <__assert_func>:
 8006f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f2a:	4614      	mov	r4, r2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <__assert_func+0x2c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4605      	mov	r5, r0
 8006f34:	68d8      	ldr	r0, [r3, #12]
 8006f36:	b14c      	cbz	r4, 8006f4c <__assert_func+0x24>
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <__assert_func+0x30>)
 8006f3a:	9100      	str	r1, [sp, #0]
 8006f3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f40:	4906      	ldr	r1, [pc, #24]	; (8006f5c <__assert_func+0x34>)
 8006f42:	462b      	mov	r3, r5
 8006f44:	f000 f88a 	bl	800705c <fiprintf>
 8006f48:	f000 f8a7 	bl	800709a <abort>
 8006f4c:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <__assert_func+0x38>)
 8006f4e:	461c      	mov	r4, r3
 8006f50:	e7f3      	b.n	8006f3a <__assert_func+0x12>
 8006f52:	bf00      	nop
 8006f54:	20000064 	.word	0x20000064
 8006f58:	080087ef 	.word	0x080087ef
 8006f5c:	080087fc 	.word	0x080087fc
 8006f60:	0800882a 	.word	0x0800882a

08006f64 <_calloc_r>:
 8006f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f66:	fba1 2402 	umull	r2, r4, r1, r2
 8006f6a:	b94c      	cbnz	r4, 8006f80 <_calloc_r+0x1c>
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	9201      	str	r2, [sp, #4]
 8006f70:	f7ff fa34 	bl	80063dc <_malloc_r>
 8006f74:	9a01      	ldr	r2, [sp, #4]
 8006f76:	4605      	mov	r5, r0
 8006f78:	b930      	cbnz	r0, 8006f88 <_calloc_r+0x24>
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	b003      	add	sp, #12
 8006f7e:	bd30      	pop	{r4, r5, pc}
 8006f80:	220c      	movs	r2, #12
 8006f82:	6002      	str	r2, [r0, #0]
 8006f84:	2500      	movs	r5, #0
 8006f86:	e7f8      	b.n	8006f7a <_calloc_r+0x16>
 8006f88:	4621      	mov	r1, r4
 8006f8a:	f7fe f9f3 	bl	8005374 <memset>
 8006f8e:	e7f4      	b.n	8006f7a <_calloc_r+0x16>

08006f90 <_free_r>:
 8006f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f92:	2900      	cmp	r1, #0
 8006f94:	d044      	beq.n	8007020 <_free_r+0x90>
 8006f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f9a:	9001      	str	r0, [sp, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006fa2:	bfb8      	it	lt
 8006fa4:	18e4      	addlt	r4, r4, r3
 8006fa6:	f7ff fb47 	bl	8006638 <__malloc_lock>
 8006faa:	4a1e      	ldr	r2, [pc, #120]	; (8007024 <_free_r+0x94>)
 8006fac:	9801      	ldr	r0, [sp, #4]
 8006fae:	6813      	ldr	r3, [r2, #0]
 8006fb0:	b933      	cbnz	r3, 8006fc0 <_free_r+0x30>
 8006fb2:	6063      	str	r3, [r4, #4]
 8006fb4:	6014      	str	r4, [r2, #0]
 8006fb6:	b003      	add	sp, #12
 8006fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fbc:	f7ff bb42 	b.w	8006644 <__malloc_unlock>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d908      	bls.n	8006fd6 <_free_r+0x46>
 8006fc4:	6825      	ldr	r5, [r4, #0]
 8006fc6:	1961      	adds	r1, r4, r5
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	bf01      	itttt	eq
 8006fcc:	6819      	ldreq	r1, [r3, #0]
 8006fce:	685b      	ldreq	r3, [r3, #4]
 8006fd0:	1949      	addeq	r1, r1, r5
 8006fd2:	6021      	streq	r1, [r4, #0]
 8006fd4:	e7ed      	b.n	8006fb2 <_free_r+0x22>
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	b10b      	cbz	r3, 8006fe0 <_free_r+0x50>
 8006fdc:	42a3      	cmp	r3, r4
 8006fde:	d9fa      	bls.n	8006fd6 <_free_r+0x46>
 8006fe0:	6811      	ldr	r1, [r2, #0]
 8006fe2:	1855      	adds	r5, r2, r1
 8006fe4:	42a5      	cmp	r5, r4
 8006fe6:	d10b      	bne.n	8007000 <_free_r+0x70>
 8006fe8:	6824      	ldr	r4, [r4, #0]
 8006fea:	4421      	add	r1, r4
 8006fec:	1854      	adds	r4, r2, r1
 8006fee:	42a3      	cmp	r3, r4
 8006ff0:	6011      	str	r1, [r2, #0]
 8006ff2:	d1e0      	bne.n	8006fb6 <_free_r+0x26>
 8006ff4:	681c      	ldr	r4, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	6053      	str	r3, [r2, #4]
 8006ffa:	440c      	add	r4, r1
 8006ffc:	6014      	str	r4, [r2, #0]
 8006ffe:	e7da      	b.n	8006fb6 <_free_r+0x26>
 8007000:	d902      	bls.n	8007008 <_free_r+0x78>
 8007002:	230c      	movs	r3, #12
 8007004:	6003      	str	r3, [r0, #0]
 8007006:	e7d6      	b.n	8006fb6 <_free_r+0x26>
 8007008:	6825      	ldr	r5, [r4, #0]
 800700a:	1961      	adds	r1, r4, r5
 800700c:	428b      	cmp	r3, r1
 800700e:	bf04      	itt	eq
 8007010:	6819      	ldreq	r1, [r3, #0]
 8007012:	685b      	ldreq	r3, [r3, #4]
 8007014:	6063      	str	r3, [r4, #4]
 8007016:	bf04      	itt	eq
 8007018:	1949      	addeq	r1, r1, r5
 800701a:	6021      	streq	r1, [r4, #0]
 800701c:	6054      	str	r4, [r2, #4]
 800701e:	e7ca      	b.n	8006fb6 <_free_r+0x26>
 8007020:	b003      	add	sp, #12
 8007022:	bd30      	pop	{r4, r5, pc}
 8007024:	20001420 	.word	0x20001420

08007028 <__ascii_mbtowc>:
 8007028:	b082      	sub	sp, #8
 800702a:	b901      	cbnz	r1, 800702e <__ascii_mbtowc+0x6>
 800702c:	a901      	add	r1, sp, #4
 800702e:	b142      	cbz	r2, 8007042 <__ascii_mbtowc+0x1a>
 8007030:	b14b      	cbz	r3, 8007046 <__ascii_mbtowc+0x1e>
 8007032:	7813      	ldrb	r3, [r2, #0]
 8007034:	600b      	str	r3, [r1, #0]
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	1e10      	subs	r0, r2, #0
 800703a:	bf18      	it	ne
 800703c:	2001      	movne	r0, #1
 800703e:	b002      	add	sp, #8
 8007040:	4770      	bx	lr
 8007042:	4610      	mov	r0, r2
 8007044:	e7fb      	b.n	800703e <__ascii_mbtowc+0x16>
 8007046:	f06f 0001 	mvn.w	r0, #1
 800704a:	e7f8      	b.n	800703e <__ascii_mbtowc+0x16>

0800704c <_malloc_usable_size_r>:
 800704c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007050:	1f18      	subs	r0, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	bfbc      	itt	lt
 8007056:	580b      	ldrlt	r3, [r1, r0]
 8007058:	18c0      	addlt	r0, r0, r3
 800705a:	4770      	bx	lr

0800705c <fiprintf>:
 800705c:	b40e      	push	{r1, r2, r3}
 800705e:	b503      	push	{r0, r1, lr}
 8007060:	4601      	mov	r1, r0
 8007062:	ab03      	add	r3, sp, #12
 8007064:	4805      	ldr	r0, [pc, #20]	; (800707c <fiprintf+0x20>)
 8007066:	f853 2b04 	ldr.w	r2, [r3], #4
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	f000 f845 	bl	80070fc <_vfiprintf_r>
 8007072:	b002      	add	sp, #8
 8007074:	f85d eb04 	ldr.w	lr, [sp], #4
 8007078:	b003      	add	sp, #12
 800707a:	4770      	bx	lr
 800707c:	20000064 	.word	0x20000064

08007080 <__ascii_wctomb>:
 8007080:	b149      	cbz	r1, 8007096 <__ascii_wctomb+0x16>
 8007082:	2aff      	cmp	r2, #255	; 0xff
 8007084:	bf85      	ittet	hi
 8007086:	238a      	movhi	r3, #138	; 0x8a
 8007088:	6003      	strhi	r3, [r0, #0]
 800708a:	700a      	strbls	r2, [r1, #0]
 800708c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007090:	bf98      	it	ls
 8007092:	2001      	movls	r0, #1
 8007094:	4770      	bx	lr
 8007096:	4608      	mov	r0, r1
 8007098:	4770      	bx	lr

0800709a <abort>:
 800709a:	b508      	push	{r3, lr}
 800709c:	2006      	movs	r0, #6
 800709e:	f000 fa89 	bl	80075b4 <raise>
 80070a2:	2001      	movs	r0, #1
 80070a4:	f7fa fc38 	bl	8001918 <_exit>

080070a8 <__sfputc_r>:
 80070a8:	6893      	ldr	r3, [r2, #8]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	b410      	push	{r4}
 80070b0:	6093      	str	r3, [r2, #8]
 80070b2:	da08      	bge.n	80070c6 <__sfputc_r+0x1e>
 80070b4:	6994      	ldr	r4, [r2, #24]
 80070b6:	42a3      	cmp	r3, r4
 80070b8:	db01      	blt.n	80070be <__sfputc_r+0x16>
 80070ba:	290a      	cmp	r1, #10
 80070bc:	d103      	bne.n	80070c6 <__sfputc_r+0x1e>
 80070be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070c2:	f000 b935 	b.w	8007330 <__swbuf_r>
 80070c6:	6813      	ldr	r3, [r2, #0]
 80070c8:	1c58      	adds	r0, r3, #1
 80070ca:	6010      	str	r0, [r2, #0]
 80070cc:	7019      	strb	r1, [r3, #0]
 80070ce:	4608      	mov	r0, r1
 80070d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <__sfputs_r>:
 80070d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d8:	4606      	mov	r6, r0
 80070da:	460f      	mov	r7, r1
 80070dc:	4614      	mov	r4, r2
 80070de:	18d5      	adds	r5, r2, r3
 80070e0:	42ac      	cmp	r4, r5
 80070e2:	d101      	bne.n	80070e8 <__sfputs_r+0x12>
 80070e4:	2000      	movs	r0, #0
 80070e6:	e007      	b.n	80070f8 <__sfputs_r+0x22>
 80070e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ec:	463a      	mov	r2, r7
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7ff ffda 	bl	80070a8 <__sfputc_r>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d1f3      	bne.n	80070e0 <__sfputs_r+0xa>
 80070f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070fc <_vfiprintf_r>:
 80070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	460d      	mov	r5, r1
 8007102:	b09d      	sub	sp, #116	; 0x74
 8007104:	4614      	mov	r4, r2
 8007106:	4698      	mov	r8, r3
 8007108:	4606      	mov	r6, r0
 800710a:	b118      	cbz	r0, 8007114 <_vfiprintf_r+0x18>
 800710c:	6a03      	ldr	r3, [r0, #32]
 800710e:	b90b      	cbnz	r3, 8007114 <_vfiprintf_r+0x18>
 8007110:	f7fe f8fa 	bl	8005308 <__sinit>
 8007114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007116:	07d9      	lsls	r1, r3, #31
 8007118:	d405      	bmi.n	8007126 <_vfiprintf_r+0x2a>
 800711a:	89ab      	ldrh	r3, [r5, #12]
 800711c:	059a      	lsls	r2, r3, #22
 800711e:	d402      	bmi.n	8007126 <_vfiprintf_r+0x2a>
 8007120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007122:	f7fe f95e 	bl	80053e2 <__retarget_lock_acquire_recursive>
 8007126:	89ab      	ldrh	r3, [r5, #12]
 8007128:	071b      	lsls	r3, r3, #28
 800712a:	d501      	bpl.n	8007130 <_vfiprintf_r+0x34>
 800712c:	692b      	ldr	r3, [r5, #16]
 800712e:	b99b      	cbnz	r3, 8007158 <_vfiprintf_r+0x5c>
 8007130:	4629      	mov	r1, r5
 8007132:	4630      	mov	r0, r6
 8007134:	f000 f93a 	bl	80073ac <__swsetup_r>
 8007138:	b170      	cbz	r0, 8007158 <_vfiprintf_r+0x5c>
 800713a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800713c:	07dc      	lsls	r4, r3, #31
 800713e:	d504      	bpl.n	800714a <_vfiprintf_r+0x4e>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007144:	b01d      	add	sp, #116	; 0x74
 8007146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	0598      	lsls	r0, r3, #22
 800714e:	d4f7      	bmi.n	8007140 <_vfiprintf_r+0x44>
 8007150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007152:	f7fe f947 	bl	80053e4 <__retarget_lock_release_recursive>
 8007156:	e7f3      	b.n	8007140 <_vfiprintf_r+0x44>
 8007158:	2300      	movs	r3, #0
 800715a:	9309      	str	r3, [sp, #36]	; 0x24
 800715c:	2320      	movs	r3, #32
 800715e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007162:	f8cd 800c 	str.w	r8, [sp, #12]
 8007166:	2330      	movs	r3, #48	; 0x30
 8007168:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800731c <_vfiprintf_r+0x220>
 800716c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007170:	f04f 0901 	mov.w	r9, #1
 8007174:	4623      	mov	r3, r4
 8007176:	469a      	mov	sl, r3
 8007178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800717c:	b10a      	cbz	r2, 8007182 <_vfiprintf_r+0x86>
 800717e:	2a25      	cmp	r2, #37	; 0x25
 8007180:	d1f9      	bne.n	8007176 <_vfiprintf_r+0x7a>
 8007182:	ebba 0b04 	subs.w	fp, sl, r4
 8007186:	d00b      	beq.n	80071a0 <_vfiprintf_r+0xa4>
 8007188:	465b      	mov	r3, fp
 800718a:	4622      	mov	r2, r4
 800718c:	4629      	mov	r1, r5
 800718e:	4630      	mov	r0, r6
 8007190:	f7ff ffa1 	bl	80070d6 <__sfputs_r>
 8007194:	3001      	adds	r0, #1
 8007196:	f000 80a9 	beq.w	80072ec <_vfiprintf_r+0x1f0>
 800719a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800719c:	445a      	add	r2, fp
 800719e:	9209      	str	r2, [sp, #36]	; 0x24
 80071a0:	f89a 3000 	ldrb.w	r3, [sl]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80a1 	beq.w	80072ec <_vfiprintf_r+0x1f0>
 80071aa:	2300      	movs	r3, #0
 80071ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071b4:	f10a 0a01 	add.w	sl, sl, #1
 80071b8:	9304      	str	r3, [sp, #16]
 80071ba:	9307      	str	r3, [sp, #28]
 80071bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071c0:	931a      	str	r3, [sp, #104]	; 0x68
 80071c2:	4654      	mov	r4, sl
 80071c4:	2205      	movs	r2, #5
 80071c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ca:	4854      	ldr	r0, [pc, #336]	; (800731c <_vfiprintf_r+0x220>)
 80071cc:	f7f9 f808 	bl	80001e0 <memchr>
 80071d0:	9a04      	ldr	r2, [sp, #16]
 80071d2:	b9d8      	cbnz	r0, 800720c <_vfiprintf_r+0x110>
 80071d4:	06d1      	lsls	r1, r2, #27
 80071d6:	bf44      	itt	mi
 80071d8:	2320      	movmi	r3, #32
 80071da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071de:	0713      	lsls	r3, r2, #28
 80071e0:	bf44      	itt	mi
 80071e2:	232b      	movmi	r3, #43	; 0x2b
 80071e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e8:	f89a 3000 	ldrb.w	r3, [sl]
 80071ec:	2b2a      	cmp	r3, #42	; 0x2a
 80071ee:	d015      	beq.n	800721c <_vfiprintf_r+0x120>
 80071f0:	9a07      	ldr	r2, [sp, #28]
 80071f2:	4654      	mov	r4, sl
 80071f4:	2000      	movs	r0, #0
 80071f6:	f04f 0c0a 	mov.w	ip, #10
 80071fa:	4621      	mov	r1, r4
 80071fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007200:	3b30      	subs	r3, #48	; 0x30
 8007202:	2b09      	cmp	r3, #9
 8007204:	d94d      	bls.n	80072a2 <_vfiprintf_r+0x1a6>
 8007206:	b1b0      	cbz	r0, 8007236 <_vfiprintf_r+0x13a>
 8007208:	9207      	str	r2, [sp, #28]
 800720a:	e014      	b.n	8007236 <_vfiprintf_r+0x13a>
 800720c:	eba0 0308 	sub.w	r3, r0, r8
 8007210:	fa09 f303 	lsl.w	r3, r9, r3
 8007214:	4313      	orrs	r3, r2
 8007216:	9304      	str	r3, [sp, #16]
 8007218:	46a2      	mov	sl, r4
 800721a:	e7d2      	b.n	80071c2 <_vfiprintf_r+0xc6>
 800721c:	9b03      	ldr	r3, [sp, #12]
 800721e:	1d19      	adds	r1, r3, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	9103      	str	r1, [sp, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	bfbb      	ittet	lt
 8007228:	425b      	neglt	r3, r3
 800722a:	f042 0202 	orrlt.w	r2, r2, #2
 800722e:	9307      	strge	r3, [sp, #28]
 8007230:	9307      	strlt	r3, [sp, #28]
 8007232:	bfb8      	it	lt
 8007234:	9204      	strlt	r2, [sp, #16]
 8007236:	7823      	ldrb	r3, [r4, #0]
 8007238:	2b2e      	cmp	r3, #46	; 0x2e
 800723a:	d10c      	bne.n	8007256 <_vfiprintf_r+0x15a>
 800723c:	7863      	ldrb	r3, [r4, #1]
 800723e:	2b2a      	cmp	r3, #42	; 0x2a
 8007240:	d134      	bne.n	80072ac <_vfiprintf_r+0x1b0>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	1d1a      	adds	r2, r3, #4
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	9203      	str	r2, [sp, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfb8      	it	lt
 800724e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007252:	3402      	adds	r4, #2
 8007254:	9305      	str	r3, [sp, #20]
 8007256:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800732c <_vfiprintf_r+0x230>
 800725a:	7821      	ldrb	r1, [r4, #0]
 800725c:	2203      	movs	r2, #3
 800725e:	4650      	mov	r0, sl
 8007260:	f7f8 ffbe 	bl	80001e0 <memchr>
 8007264:	b138      	cbz	r0, 8007276 <_vfiprintf_r+0x17a>
 8007266:	9b04      	ldr	r3, [sp, #16]
 8007268:	eba0 000a 	sub.w	r0, r0, sl
 800726c:	2240      	movs	r2, #64	; 0x40
 800726e:	4082      	lsls	r2, r0
 8007270:	4313      	orrs	r3, r2
 8007272:	3401      	adds	r4, #1
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727a:	4829      	ldr	r0, [pc, #164]	; (8007320 <_vfiprintf_r+0x224>)
 800727c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007280:	2206      	movs	r2, #6
 8007282:	f7f8 ffad 	bl	80001e0 <memchr>
 8007286:	2800      	cmp	r0, #0
 8007288:	d03f      	beq.n	800730a <_vfiprintf_r+0x20e>
 800728a:	4b26      	ldr	r3, [pc, #152]	; (8007324 <_vfiprintf_r+0x228>)
 800728c:	bb1b      	cbnz	r3, 80072d6 <_vfiprintf_r+0x1da>
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	3307      	adds	r3, #7
 8007292:	f023 0307 	bic.w	r3, r3, #7
 8007296:	3308      	adds	r3, #8
 8007298:	9303      	str	r3, [sp, #12]
 800729a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729c:	443b      	add	r3, r7
 800729e:	9309      	str	r3, [sp, #36]	; 0x24
 80072a0:	e768      	b.n	8007174 <_vfiprintf_r+0x78>
 80072a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a6:	460c      	mov	r4, r1
 80072a8:	2001      	movs	r0, #1
 80072aa:	e7a6      	b.n	80071fa <_vfiprintf_r+0xfe>
 80072ac:	2300      	movs	r3, #0
 80072ae:	3401      	adds	r4, #1
 80072b0:	9305      	str	r3, [sp, #20]
 80072b2:	4619      	mov	r1, r3
 80072b4:	f04f 0c0a 	mov.w	ip, #10
 80072b8:	4620      	mov	r0, r4
 80072ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072be:	3a30      	subs	r2, #48	; 0x30
 80072c0:	2a09      	cmp	r2, #9
 80072c2:	d903      	bls.n	80072cc <_vfiprintf_r+0x1d0>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0c6      	beq.n	8007256 <_vfiprintf_r+0x15a>
 80072c8:	9105      	str	r1, [sp, #20]
 80072ca:	e7c4      	b.n	8007256 <_vfiprintf_r+0x15a>
 80072cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80072d0:	4604      	mov	r4, r0
 80072d2:	2301      	movs	r3, #1
 80072d4:	e7f0      	b.n	80072b8 <_vfiprintf_r+0x1bc>
 80072d6:	ab03      	add	r3, sp, #12
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	462a      	mov	r2, r5
 80072dc:	4b12      	ldr	r3, [pc, #72]	; (8007328 <_vfiprintf_r+0x22c>)
 80072de:	a904      	add	r1, sp, #16
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7fd fb8b 	bl	80049fc <_printf_float>
 80072e6:	4607      	mov	r7, r0
 80072e8:	1c78      	adds	r0, r7, #1
 80072ea:	d1d6      	bne.n	800729a <_vfiprintf_r+0x19e>
 80072ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ee:	07d9      	lsls	r1, r3, #31
 80072f0:	d405      	bmi.n	80072fe <_vfiprintf_r+0x202>
 80072f2:	89ab      	ldrh	r3, [r5, #12]
 80072f4:	059a      	lsls	r2, r3, #22
 80072f6:	d402      	bmi.n	80072fe <_vfiprintf_r+0x202>
 80072f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072fa:	f7fe f873 	bl	80053e4 <__retarget_lock_release_recursive>
 80072fe:	89ab      	ldrh	r3, [r5, #12]
 8007300:	065b      	lsls	r3, r3, #25
 8007302:	f53f af1d 	bmi.w	8007140 <_vfiprintf_r+0x44>
 8007306:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007308:	e71c      	b.n	8007144 <_vfiprintf_r+0x48>
 800730a:	ab03      	add	r3, sp, #12
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	462a      	mov	r2, r5
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <_vfiprintf_r+0x22c>)
 8007312:	a904      	add	r1, sp, #16
 8007314:	4630      	mov	r0, r6
 8007316:	f7fd fe15 	bl	8004f44 <_printf_i>
 800731a:	e7e4      	b.n	80072e6 <_vfiprintf_r+0x1ea>
 800731c:	08008579 	.word	0x08008579
 8007320:	08008583 	.word	0x08008583
 8007324:	080049fd 	.word	0x080049fd
 8007328:	080070d7 	.word	0x080070d7
 800732c:	0800857f 	.word	0x0800857f

08007330 <__swbuf_r>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	460e      	mov	r6, r1
 8007334:	4614      	mov	r4, r2
 8007336:	4605      	mov	r5, r0
 8007338:	b118      	cbz	r0, 8007342 <__swbuf_r+0x12>
 800733a:	6a03      	ldr	r3, [r0, #32]
 800733c:	b90b      	cbnz	r3, 8007342 <__swbuf_r+0x12>
 800733e:	f7fd ffe3 	bl	8005308 <__sinit>
 8007342:	69a3      	ldr	r3, [r4, #24]
 8007344:	60a3      	str	r3, [r4, #8]
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	071a      	lsls	r2, r3, #28
 800734a:	d525      	bpl.n	8007398 <__swbuf_r+0x68>
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	b31b      	cbz	r3, 8007398 <__swbuf_r+0x68>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	6922      	ldr	r2, [r4, #16]
 8007354:	1a98      	subs	r0, r3, r2
 8007356:	6963      	ldr	r3, [r4, #20]
 8007358:	b2f6      	uxtb	r6, r6
 800735a:	4283      	cmp	r3, r0
 800735c:	4637      	mov	r7, r6
 800735e:	dc04      	bgt.n	800736a <__swbuf_r+0x3a>
 8007360:	4621      	mov	r1, r4
 8007362:	4628      	mov	r0, r5
 8007364:	f7ff f940 	bl	80065e8 <_fflush_r>
 8007368:	b9e0      	cbnz	r0, 80073a4 <__swbuf_r+0x74>
 800736a:	68a3      	ldr	r3, [r4, #8]
 800736c:	3b01      	subs	r3, #1
 800736e:	60a3      	str	r3, [r4, #8]
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	6022      	str	r2, [r4, #0]
 8007376:	701e      	strb	r6, [r3, #0]
 8007378:	6962      	ldr	r2, [r4, #20]
 800737a:	1c43      	adds	r3, r0, #1
 800737c:	429a      	cmp	r2, r3
 800737e:	d004      	beq.n	800738a <__swbuf_r+0x5a>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	07db      	lsls	r3, r3, #31
 8007384:	d506      	bpl.n	8007394 <__swbuf_r+0x64>
 8007386:	2e0a      	cmp	r6, #10
 8007388:	d104      	bne.n	8007394 <__swbuf_r+0x64>
 800738a:	4621      	mov	r1, r4
 800738c:	4628      	mov	r0, r5
 800738e:	f7ff f92b 	bl	80065e8 <_fflush_r>
 8007392:	b938      	cbnz	r0, 80073a4 <__swbuf_r+0x74>
 8007394:	4638      	mov	r0, r7
 8007396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007398:	4621      	mov	r1, r4
 800739a:	4628      	mov	r0, r5
 800739c:	f000 f806 	bl	80073ac <__swsetup_r>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d0d5      	beq.n	8007350 <__swbuf_r+0x20>
 80073a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80073a8:	e7f4      	b.n	8007394 <__swbuf_r+0x64>
	...

080073ac <__swsetup_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4b2a      	ldr	r3, [pc, #168]	; (8007458 <__swsetup_r+0xac>)
 80073b0:	4605      	mov	r5, r0
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	460c      	mov	r4, r1
 80073b6:	b118      	cbz	r0, 80073c0 <__swsetup_r+0x14>
 80073b8:	6a03      	ldr	r3, [r0, #32]
 80073ba:	b90b      	cbnz	r3, 80073c0 <__swsetup_r+0x14>
 80073bc:	f7fd ffa4 	bl	8005308 <__sinit>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073c6:	0718      	lsls	r0, r3, #28
 80073c8:	d422      	bmi.n	8007410 <__swsetup_r+0x64>
 80073ca:	06d9      	lsls	r1, r3, #27
 80073cc:	d407      	bmi.n	80073de <__swsetup_r+0x32>
 80073ce:	2309      	movs	r3, #9
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073d6:	81a3      	strh	r3, [r4, #12]
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073dc:	e034      	b.n	8007448 <__swsetup_r+0x9c>
 80073de:	0758      	lsls	r0, r3, #29
 80073e0:	d512      	bpl.n	8007408 <__swsetup_r+0x5c>
 80073e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073e4:	b141      	cbz	r1, 80073f8 <__swsetup_r+0x4c>
 80073e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ea:	4299      	cmp	r1, r3
 80073ec:	d002      	beq.n	80073f4 <__swsetup_r+0x48>
 80073ee:	4628      	mov	r0, r5
 80073f0:	f7ff fdce 	bl	8006f90 <_free_r>
 80073f4:	2300      	movs	r3, #0
 80073f6:	6363      	str	r3, [r4, #52]	; 0x34
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	2300      	movs	r3, #0
 8007402:	6063      	str	r3, [r4, #4]
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	f043 0308 	orr.w	r3, r3, #8
 800740e:	81a3      	strh	r3, [r4, #12]
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	b94b      	cbnz	r3, 8007428 <__swsetup_r+0x7c>
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800741a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800741e:	d003      	beq.n	8007428 <__swsetup_r+0x7c>
 8007420:	4621      	mov	r1, r4
 8007422:	4628      	mov	r0, r5
 8007424:	f000 f840 	bl	80074a8 <__smakebuf_r>
 8007428:	89a0      	ldrh	r0, [r4, #12]
 800742a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800742e:	f010 0301 	ands.w	r3, r0, #1
 8007432:	d00a      	beq.n	800744a <__swsetup_r+0x9e>
 8007434:	2300      	movs	r3, #0
 8007436:	60a3      	str	r3, [r4, #8]
 8007438:	6963      	ldr	r3, [r4, #20]
 800743a:	425b      	negs	r3, r3
 800743c:	61a3      	str	r3, [r4, #24]
 800743e:	6923      	ldr	r3, [r4, #16]
 8007440:	b943      	cbnz	r3, 8007454 <__swsetup_r+0xa8>
 8007442:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007446:	d1c4      	bne.n	80073d2 <__swsetup_r+0x26>
 8007448:	bd38      	pop	{r3, r4, r5, pc}
 800744a:	0781      	lsls	r1, r0, #30
 800744c:	bf58      	it	pl
 800744e:	6963      	ldrpl	r3, [r4, #20]
 8007450:	60a3      	str	r3, [r4, #8]
 8007452:	e7f4      	b.n	800743e <__swsetup_r+0x92>
 8007454:	2000      	movs	r0, #0
 8007456:	e7f7      	b.n	8007448 <__swsetup_r+0x9c>
 8007458:	20000064 	.word	0x20000064

0800745c <__swhatbuf_r>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	460c      	mov	r4, r1
 8007460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007464:	2900      	cmp	r1, #0
 8007466:	b096      	sub	sp, #88	; 0x58
 8007468:	4615      	mov	r5, r2
 800746a:	461e      	mov	r6, r3
 800746c:	da0d      	bge.n	800748a <__swhatbuf_r+0x2e>
 800746e:	89a3      	ldrh	r3, [r4, #12]
 8007470:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007474:	f04f 0100 	mov.w	r1, #0
 8007478:	bf0c      	ite	eq
 800747a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800747e:	2340      	movne	r3, #64	; 0x40
 8007480:	2000      	movs	r0, #0
 8007482:	6031      	str	r1, [r6, #0]
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	b016      	add	sp, #88	; 0x58
 8007488:	bd70      	pop	{r4, r5, r6, pc}
 800748a:	466a      	mov	r2, sp
 800748c:	f000 f848 	bl	8007520 <_fstat_r>
 8007490:	2800      	cmp	r0, #0
 8007492:	dbec      	blt.n	800746e <__swhatbuf_r+0x12>
 8007494:	9901      	ldr	r1, [sp, #4]
 8007496:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800749a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800749e:	4259      	negs	r1, r3
 80074a0:	4159      	adcs	r1, r3
 80074a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074a6:	e7eb      	b.n	8007480 <__swhatbuf_r+0x24>

080074a8 <__smakebuf_r>:
 80074a8:	898b      	ldrh	r3, [r1, #12]
 80074aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074ac:	079d      	lsls	r5, r3, #30
 80074ae:	4606      	mov	r6, r0
 80074b0:	460c      	mov	r4, r1
 80074b2:	d507      	bpl.n	80074c4 <__smakebuf_r+0x1c>
 80074b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	6123      	str	r3, [r4, #16]
 80074bc:	2301      	movs	r3, #1
 80074be:	6163      	str	r3, [r4, #20]
 80074c0:	b002      	add	sp, #8
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	ab01      	add	r3, sp, #4
 80074c6:	466a      	mov	r2, sp
 80074c8:	f7ff ffc8 	bl	800745c <__swhatbuf_r>
 80074cc:	9900      	ldr	r1, [sp, #0]
 80074ce:	4605      	mov	r5, r0
 80074d0:	4630      	mov	r0, r6
 80074d2:	f7fe ff83 	bl	80063dc <_malloc_r>
 80074d6:	b948      	cbnz	r0, 80074ec <__smakebuf_r+0x44>
 80074d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074dc:	059a      	lsls	r2, r3, #22
 80074de:	d4ef      	bmi.n	80074c0 <__smakebuf_r+0x18>
 80074e0:	f023 0303 	bic.w	r3, r3, #3
 80074e4:	f043 0302 	orr.w	r3, r3, #2
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	e7e3      	b.n	80074b4 <__smakebuf_r+0xc>
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	6020      	str	r0, [r4, #0]
 80074f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f4:	81a3      	strh	r3, [r4, #12]
 80074f6:	9b00      	ldr	r3, [sp, #0]
 80074f8:	6163      	str	r3, [r4, #20]
 80074fa:	9b01      	ldr	r3, [sp, #4]
 80074fc:	6120      	str	r0, [r4, #16]
 80074fe:	b15b      	cbz	r3, 8007518 <__smakebuf_r+0x70>
 8007500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007504:	4630      	mov	r0, r6
 8007506:	f000 f81d 	bl	8007544 <_isatty_r>
 800750a:	b128      	cbz	r0, 8007518 <__smakebuf_r+0x70>
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	f023 0303 	bic.w	r3, r3, #3
 8007512:	f043 0301 	orr.w	r3, r3, #1
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	431d      	orrs	r5, r3
 800751c:	81a5      	strh	r5, [r4, #12]
 800751e:	e7cf      	b.n	80074c0 <__smakebuf_r+0x18>

08007520 <_fstat_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4d07      	ldr	r5, [pc, #28]	; (8007540 <_fstat_r+0x20>)
 8007524:	2300      	movs	r3, #0
 8007526:	4604      	mov	r4, r0
 8007528:	4608      	mov	r0, r1
 800752a:	4611      	mov	r1, r2
 800752c:	602b      	str	r3, [r5, #0]
 800752e:	f7fa fa42 	bl	80019b6 <_fstat>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	d102      	bne.n	800753c <_fstat_r+0x1c>
 8007536:	682b      	ldr	r3, [r5, #0]
 8007538:	b103      	cbz	r3, 800753c <_fstat_r+0x1c>
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	bd38      	pop	{r3, r4, r5, pc}
 800753e:	bf00      	nop
 8007540:	20001428 	.word	0x20001428

08007544 <_isatty_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4d06      	ldr	r5, [pc, #24]	; (8007560 <_isatty_r+0x1c>)
 8007548:	2300      	movs	r3, #0
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	f7fa fa41 	bl	80019d6 <_isatty>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_isatty_r+0x1a>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_isatty_r+0x1a>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20001428 	.word	0x20001428

08007564 <_raise_r>:
 8007564:	291f      	cmp	r1, #31
 8007566:	b538      	push	{r3, r4, r5, lr}
 8007568:	4604      	mov	r4, r0
 800756a:	460d      	mov	r5, r1
 800756c:	d904      	bls.n	8007578 <_raise_r+0x14>
 800756e:	2316      	movs	r3, #22
 8007570:	6003      	str	r3, [r0, #0]
 8007572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800757a:	b112      	cbz	r2, 8007582 <_raise_r+0x1e>
 800757c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007580:	b94b      	cbnz	r3, 8007596 <_raise_r+0x32>
 8007582:	4620      	mov	r0, r4
 8007584:	f000 f830 	bl	80075e8 <_getpid_r>
 8007588:	462a      	mov	r2, r5
 800758a:	4601      	mov	r1, r0
 800758c:	4620      	mov	r0, r4
 800758e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007592:	f000 b817 	b.w	80075c4 <_kill_r>
 8007596:	2b01      	cmp	r3, #1
 8007598:	d00a      	beq.n	80075b0 <_raise_r+0x4c>
 800759a:	1c59      	adds	r1, r3, #1
 800759c:	d103      	bne.n	80075a6 <_raise_r+0x42>
 800759e:	2316      	movs	r3, #22
 80075a0:	6003      	str	r3, [r0, #0]
 80075a2:	2001      	movs	r0, #1
 80075a4:	e7e7      	b.n	8007576 <_raise_r+0x12>
 80075a6:	2400      	movs	r4, #0
 80075a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075ac:	4628      	mov	r0, r5
 80075ae:	4798      	blx	r3
 80075b0:	2000      	movs	r0, #0
 80075b2:	e7e0      	b.n	8007576 <_raise_r+0x12>

080075b4 <raise>:
 80075b4:	4b02      	ldr	r3, [pc, #8]	; (80075c0 <raise+0xc>)
 80075b6:	4601      	mov	r1, r0
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	f7ff bfd3 	b.w	8007564 <_raise_r>
 80075be:	bf00      	nop
 80075c0:	20000064 	.word	0x20000064

080075c4 <_kill_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4d07      	ldr	r5, [pc, #28]	; (80075e4 <_kill_r+0x20>)
 80075c8:	2300      	movs	r3, #0
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	f7fa f991 	bl	80018f8 <_kill>
 80075d6:	1c43      	adds	r3, r0, #1
 80075d8:	d102      	bne.n	80075e0 <_kill_r+0x1c>
 80075da:	682b      	ldr	r3, [r5, #0]
 80075dc:	b103      	cbz	r3, 80075e0 <_kill_r+0x1c>
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	bd38      	pop	{r3, r4, r5, pc}
 80075e2:	bf00      	nop
 80075e4:	20001428 	.word	0x20001428

080075e8 <_getpid_r>:
 80075e8:	f7fa b97e 	b.w	80018e8 <_getpid>

080075ec <pow>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	ed2d 8b02 	vpush	{d8}
 80075f2:	eeb0 8a40 	vmov.f32	s16, s0
 80075f6:	eef0 8a60 	vmov.f32	s17, s1
 80075fa:	ec55 4b11 	vmov	r4, r5, d1
 80075fe:	f000 f873 	bl	80076e8 <__ieee754_pow>
 8007602:	4622      	mov	r2, r4
 8007604:	462b      	mov	r3, r5
 8007606:	4620      	mov	r0, r4
 8007608:	4629      	mov	r1, r5
 800760a:	ec57 6b10 	vmov	r6, r7, d0
 800760e:	f7f9 fa95 	bl	8000b3c <__aeabi_dcmpun>
 8007612:	2800      	cmp	r0, #0
 8007614:	d13b      	bne.n	800768e <pow+0xa2>
 8007616:	ec51 0b18 	vmov	r0, r1, d8
 800761a:	2200      	movs	r2, #0
 800761c:	2300      	movs	r3, #0
 800761e:	f7f9 fa5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007622:	b1b8      	cbz	r0, 8007654 <pow+0x68>
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	4620      	mov	r0, r4
 800762a:	4629      	mov	r1, r5
 800762c:	f7f9 fa54 	bl	8000ad8 <__aeabi_dcmpeq>
 8007630:	2800      	cmp	r0, #0
 8007632:	d146      	bne.n	80076c2 <pow+0xd6>
 8007634:	ec45 4b10 	vmov	d0, r4, r5
 8007638:	f000 f848 	bl	80076cc <finite>
 800763c:	b338      	cbz	r0, 800768e <pow+0xa2>
 800763e:	2200      	movs	r2, #0
 8007640:	2300      	movs	r3, #0
 8007642:	4620      	mov	r0, r4
 8007644:	4629      	mov	r1, r5
 8007646:	f7f9 fa51 	bl	8000aec <__aeabi_dcmplt>
 800764a:	b300      	cbz	r0, 800768e <pow+0xa2>
 800764c:	f7fd fe9e 	bl	800538c <__errno>
 8007650:	2322      	movs	r3, #34	; 0x22
 8007652:	e01b      	b.n	800768c <pow+0xa0>
 8007654:	ec47 6b10 	vmov	d0, r6, r7
 8007658:	f000 f838 	bl	80076cc <finite>
 800765c:	b9e0      	cbnz	r0, 8007698 <pow+0xac>
 800765e:	eeb0 0a48 	vmov.f32	s0, s16
 8007662:	eef0 0a68 	vmov.f32	s1, s17
 8007666:	f000 f831 	bl	80076cc <finite>
 800766a:	b1a8      	cbz	r0, 8007698 <pow+0xac>
 800766c:	ec45 4b10 	vmov	d0, r4, r5
 8007670:	f000 f82c 	bl	80076cc <finite>
 8007674:	b180      	cbz	r0, 8007698 <pow+0xac>
 8007676:	4632      	mov	r2, r6
 8007678:	463b      	mov	r3, r7
 800767a:	4630      	mov	r0, r6
 800767c:	4639      	mov	r1, r7
 800767e:	f7f9 fa5d 	bl	8000b3c <__aeabi_dcmpun>
 8007682:	2800      	cmp	r0, #0
 8007684:	d0e2      	beq.n	800764c <pow+0x60>
 8007686:	f7fd fe81 	bl	800538c <__errno>
 800768a:	2321      	movs	r3, #33	; 0x21
 800768c:	6003      	str	r3, [r0, #0]
 800768e:	ecbd 8b02 	vpop	{d8}
 8007692:	ec47 6b10 	vmov	d0, r6, r7
 8007696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007698:	2200      	movs	r2, #0
 800769a:	2300      	movs	r3, #0
 800769c:	4630      	mov	r0, r6
 800769e:	4639      	mov	r1, r7
 80076a0:	f7f9 fa1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d0f2      	beq.n	800768e <pow+0xa2>
 80076a8:	eeb0 0a48 	vmov.f32	s0, s16
 80076ac:	eef0 0a68 	vmov.f32	s1, s17
 80076b0:	f000 f80c 	bl	80076cc <finite>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d0ea      	beq.n	800768e <pow+0xa2>
 80076b8:	ec45 4b10 	vmov	d0, r4, r5
 80076bc:	f000 f806 	bl	80076cc <finite>
 80076c0:	e7c3      	b.n	800764a <pow+0x5e>
 80076c2:	4f01      	ldr	r7, [pc, #4]	; (80076c8 <pow+0xdc>)
 80076c4:	2600      	movs	r6, #0
 80076c6:	e7e2      	b.n	800768e <pow+0xa2>
 80076c8:	3ff00000 	.word	0x3ff00000

080076cc <finite>:
 80076cc:	b082      	sub	sp, #8
 80076ce:	ed8d 0b00 	vstr	d0, [sp]
 80076d2:	9801      	ldr	r0, [sp, #4]
 80076d4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80076d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80076dc:	0fc0      	lsrs	r0, r0, #31
 80076de:	b002      	add	sp, #8
 80076e0:	4770      	bx	lr
 80076e2:	0000      	movs	r0, r0
 80076e4:	0000      	movs	r0, r0
	...

080076e8 <__ieee754_pow>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	ed2d 8b06 	vpush	{d8-d10}
 80076f0:	b089      	sub	sp, #36	; 0x24
 80076f2:	ed8d 1b00 	vstr	d1, [sp]
 80076f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80076fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80076fe:	ea58 0102 	orrs.w	r1, r8, r2
 8007702:	ec57 6b10 	vmov	r6, r7, d0
 8007706:	d115      	bne.n	8007734 <__ieee754_pow+0x4c>
 8007708:	19b3      	adds	r3, r6, r6
 800770a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800770e:	4152      	adcs	r2, r2
 8007710:	4299      	cmp	r1, r3
 8007712:	4b89      	ldr	r3, [pc, #548]	; (8007938 <__ieee754_pow+0x250>)
 8007714:	4193      	sbcs	r3, r2
 8007716:	f080 84d1 	bcs.w	80080bc <__ieee754_pow+0x9d4>
 800771a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800771e:	4630      	mov	r0, r6
 8007720:	4639      	mov	r1, r7
 8007722:	f7f8 fdbb 	bl	800029c <__adddf3>
 8007726:	ec41 0b10 	vmov	d0, r0, r1
 800772a:	b009      	add	sp, #36	; 0x24
 800772c:	ecbd 8b06 	vpop	{d8-d10}
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007734:	4b81      	ldr	r3, [pc, #516]	; (800793c <__ieee754_pow+0x254>)
 8007736:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800773a:	429c      	cmp	r4, r3
 800773c:	ee10 aa10 	vmov	sl, s0
 8007740:	463d      	mov	r5, r7
 8007742:	dc06      	bgt.n	8007752 <__ieee754_pow+0x6a>
 8007744:	d101      	bne.n	800774a <__ieee754_pow+0x62>
 8007746:	2e00      	cmp	r6, #0
 8007748:	d1e7      	bne.n	800771a <__ieee754_pow+0x32>
 800774a:	4598      	cmp	r8, r3
 800774c:	dc01      	bgt.n	8007752 <__ieee754_pow+0x6a>
 800774e:	d10f      	bne.n	8007770 <__ieee754_pow+0x88>
 8007750:	b172      	cbz	r2, 8007770 <__ieee754_pow+0x88>
 8007752:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007756:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800775a:	ea55 050a 	orrs.w	r5, r5, sl
 800775e:	d1dc      	bne.n	800771a <__ieee754_pow+0x32>
 8007760:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007764:	18db      	adds	r3, r3, r3
 8007766:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800776a:	4152      	adcs	r2, r2
 800776c:	429d      	cmp	r5, r3
 800776e:	e7d0      	b.n	8007712 <__ieee754_pow+0x2a>
 8007770:	2d00      	cmp	r5, #0
 8007772:	da3b      	bge.n	80077ec <__ieee754_pow+0x104>
 8007774:	4b72      	ldr	r3, [pc, #456]	; (8007940 <__ieee754_pow+0x258>)
 8007776:	4598      	cmp	r8, r3
 8007778:	dc51      	bgt.n	800781e <__ieee754_pow+0x136>
 800777a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800777e:	4598      	cmp	r8, r3
 8007780:	f340 84ab 	ble.w	80080da <__ieee754_pow+0x9f2>
 8007784:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007788:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800778c:	2b14      	cmp	r3, #20
 800778e:	dd0f      	ble.n	80077b0 <__ieee754_pow+0xc8>
 8007790:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007794:	fa22 f103 	lsr.w	r1, r2, r3
 8007798:	fa01 f303 	lsl.w	r3, r1, r3
 800779c:	4293      	cmp	r3, r2
 800779e:	f040 849c 	bne.w	80080da <__ieee754_pow+0x9f2>
 80077a2:	f001 0101 	and.w	r1, r1, #1
 80077a6:	f1c1 0302 	rsb	r3, r1, #2
 80077aa:	9304      	str	r3, [sp, #16]
 80077ac:	b182      	cbz	r2, 80077d0 <__ieee754_pow+0xe8>
 80077ae:	e05f      	b.n	8007870 <__ieee754_pow+0x188>
 80077b0:	2a00      	cmp	r2, #0
 80077b2:	d15b      	bne.n	800786c <__ieee754_pow+0x184>
 80077b4:	f1c3 0314 	rsb	r3, r3, #20
 80077b8:	fa48 f103 	asr.w	r1, r8, r3
 80077bc:	fa01 f303 	lsl.w	r3, r1, r3
 80077c0:	4543      	cmp	r3, r8
 80077c2:	f040 8487 	bne.w	80080d4 <__ieee754_pow+0x9ec>
 80077c6:	f001 0101 	and.w	r1, r1, #1
 80077ca:	f1c1 0302 	rsb	r3, r1, #2
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	4b5c      	ldr	r3, [pc, #368]	; (8007944 <__ieee754_pow+0x25c>)
 80077d2:	4598      	cmp	r8, r3
 80077d4:	d132      	bne.n	800783c <__ieee754_pow+0x154>
 80077d6:	f1b9 0f00 	cmp.w	r9, #0
 80077da:	f280 8477 	bge.w	80080cc <__ieee754_pow+0x9e4>
 80077de:	4959      	ldr	r1, [pc, #356]	; (8007944 <__ieee754_pow+0x25c>)
 80077e0:	4632      	mov	r2, r6
 80077e2:	463b      	mov	r3, r7
 80077e4:	2000      	movs	r0, #0
 80077e6:	f7f9 f839 	bl	800085c <__aeabi_ddiv>
 80077ea:	e79c      	b.n	8007726 <__ieee754_pow+0x3e>
 80077ec:	2300      	movs	r3, #0
 80077ee:	9304      	str	r3, [sp, #16]
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	d13d      	bne.n	8007870 <__ieee754_pow+0x188>
 80077f4:	4b51      	ldr	r3, [pc, #324]	; (800793c <__ieee754_pow+0x254>)
 80077f6:	4598      	cmp	r8, r3
 80077f8:	d1ea      	bne.n	80077d0 <__ieee754_pow+0xe8>
 80077fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80077fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007802:	ea53 030a 	orrs.w	r3, r3, sl
 8007806:	f000 8459 	beq.w	80080bc <__ieee754_pow+0x9d4>
 800780a:	4b4f      	ldr	r3, [pc, #316]	; (8007948 <__ieee754_pow+0x260>)
 800780c:	429c      	cmp	r4, r3
 800780e:	dd08      	ble.n	8007822 <__ieee754_pow+0x13a>
 8007810:	f1b9 0f00 	cmp.w	r9, #0
 8007814:	f2c0 8456 	blt.w	80080c4 <__ieee754_pow+0x9dc>
 8007818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800781c:	e783      	b.n	8007726 <__ieee754_pow+0x3e>
 800781e:	2302      	movs	r3, #2
 8007820:	e7e5      	b.n	80077ee <__ieee754_pow+0x106>
 8007822:	f1b9 0f00 	cmp.w	r9, #0
 8007826:	f04f 0000 	mov.w	r0, #0
 800782a:	f04f 0100 	mov.w	r1, #0
 800782e:	f6bf af7a 	bge.w	8007726 <__ieee754_pow+0x3e>
 8007832:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007836:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800783a:	e774      	b.n	8007726 <__ieee754_pow+0x3e>
 800783c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007840:	d106      	bne.n	8007850 <__ieee754_pow+0x168>
 8007842:	4632      	mov	r2, r6
 8007844:	463b      	mov	r3, r7
 8007846:	4630      	mov	r0, r6
 8007848:	4639      	mov	r1, r7
 800784a:	f7f8 fedd 	bl	8000608 <__aeabi_dmul>
 800784e:	e76a      	b.n	8007726 <__ieee754_pow+0x3e>
 8007850:	4b3e      	ldr	r3, [pc, #248]	; (800794c <__ieee754_pow+0x264>)
 8007852:	4599      	cmp	r9, r3
 8007854:	d10c      	bne.n	8007870 <__ieee754_pow+0x188>
 8007856:	2d00      	cmp	r5, #0
 8007858:	db0a      	blt.n	8007870 <__ieee754_pow+0x188>
 800785a:	ec47 6b10 	vmov	d0, r6, r7
 800785e:	b009      	add	sp, #36	; 0x24
 8007860:	ecbd 8b06 	vpop	{d8-d10}
 8007864:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007868:	f000 bd20 	b.w	80082ac <__ieee754_sqrt>
 800786c:	2300      	movs	r3, #0
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	ec47 6b10 	vmov	d0, r6, r7
 8007874:	f000 fc92 	bl	800819c <fabs>
 8007878:	ec51 0b10 	vmov	r0, r1, d0
 800787c:	f1ba 0f00 	cmp.w	sl, #0
 8007880:	d129      	bne.n	80078d6 <__ieee754_pow+0x1ee>
 8007882:	b124      	cbz	r4, 800788e <__ieee754_pow+0x1a6>
 8007884:	4b2f      	ldr	r3, [pc, #188]	; (8007944 <__ieee754_pow+0x25c>)
 8007886:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800788a:	429a      	cmp	r2, r3
 800788c:	d123      	bne.n	80078d6 <__ieee754_pow+0x1ee>
 800788e:	f1b9 0f00 	cmp.w	r9, #0
 8007892:	da05      	bge.n	80078a0 <__ieee754_pow+0x1b8>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	2000      	movs	r0, #0
 800789a:	492a      	ldr	r1, [pc, #168]	; (8007944 <__ieee754_pow+0x25c>)
 800789c:	f7f8 ffde 	bl	800085c <__aeabi_ddiv>
 80078a0:	2d00      	cmp	r5, #0
 80078a2:	f6bf af40 	bge.w	8007726 <__ieee754_pow+0x3e>
 80078a6:	9b04      	ldr	r3, [sp, #16]
 80078a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80078ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80078b0:	431c      	orrs	r4, r3
 80078b2:	d108      	bne.n	80078c6 <__ieee754_pow+0x1de>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4610      	mov	r0, r2
 80078ba:	4619      	mov	r1, r3
 80078bc:	f7f8 fcec 	bl	8000298 <__aeabi_dsub>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	e78f      	b.n	80077e6 <__ieee754_pow+0xfe>
 80078c6:	9b04      	ldr	r3, [sp, #16]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	f47f af2c 	bne.w	8007726 <__ieee754_pow+0x3e>
 80078ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078d2:	4619      	mov	r1, r3
 80078d4:	e727      	b.n	8007726 <__ieee754_pow+0x3e>
 80078d6:	0feb      	lsrs	r3, r5, #31
 80078d8:	3b01      	subs	r3, #1
 80078da:	9306      	str	r3, [sp, #24]
 80078dc:	9a06      	ldr	r2, [sp, #24]
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	d102      	bne.n	80078ea <__ieee754_pow+0x202>
 80078e4:	4632      	mov	r2, r6
 80078e6:	463b      	mov	r3, r7
 80078e8:	e7e6      	b.n	80078b8 <__ieee754_pow+0x1d0>
 80078ea:	4b19      	ldr	r3, [pc, #100]	; (8007950 <__ieee754_pow+0x268>)
 80078ec:	4598      	cmp	r8, r3
 80078ee:	f340 80fb 	ble.w	8007ae8 <__ieee754_pow+0x400>
 80078f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80078f6:	4598      	cmp	r8, r3
 80078f8:	4b13      	ldr	r3, [pc, #76]	; (8007948 <__ieee754_pow+0x260>)
 80078fa:	dd0c      	ble.n	8007916 <__ieee754_pow+0x22e>
 80078fc:	429c      	cmp	r4, r3
 80078fe:	dc0f      	bgt.n	8007920 <__ieee754_pow+0x238>
 8007900:	f1b9 0f00 	cmp.w	r9, #0
 8007904:	da0f      	bge.n	8007926 <__ieee754_pow+0x23e>
 8007906:	2000      	movs	r0, #0
 8007908:	b009      	add	sp, #36	; 0x24
 800790a:	ecbd 8b06 	vpop	{d8-d10}
 800790e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007912:	f000 bc3a 	b.w	800818a <__math_oflow>
 8007916:	429c      	cmp	r4, r3
 8007918:	dbf2      	blt.n	8007900 <__ieee754_pow+0x218>
 800791a:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <__ieee754_pow+0x25c>)
 800791c:	429c      	cmp	r4, r3
 800791e:	dd19      	ble.n	8007954 <__ieee754_pow+0x26c>
 8007920:	f1b9 0f00 	cmp.w	r9, #0
 8007924:	dcef      	bgt.n	8007906 <__ieee754_pow+0x21e>
 8007926:	2000      	movs	r0, #0
 8007928:	b009      	add	sp, #36	; 0x24
 800792a:	ecbd 8b06 	vpop	{d8-d10}
 800792e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007932:	f000 bc21 	b.w	8008178 <__math_uflow>
 8007936:	bf00      	nop
 8007938:	fff00000 	.word	0xfff00000
 800793c:	7ff00000 	.word	0x7ff00000
 8007940:	433fffff 	.word	0x433fffff
 8007944:	3ff00000 	.word	0x3ff00000
 8007948:	3fefffff 	.word	0x3fefffff
 800794c:	3fe00000 	.word	0x3fe00000
 8007950:	41e00000 	.word	0x41e00000
 8007954:	4b60      	ldr	r3, [pc, #384]	; (8007ad8 <__ieee754_pow+0x3f0>)
 8007956:	2200      	movs	r2, #0
 8007958:	f7f8 fc9e 	bl	8000298 <__aeabi_dsub>
 800795c:	a354      	add	r3, pc, #336	; (adr r3, 8007ab0 <__ieee754_pow+0x3c8>)
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	4604      	mov	r4, r0
 8007964:	460d      	mov	r5, r1
 8007966:	f7f8 fe4f 	bl	8000608 <__aeabi_dmul>
 800796a:	a353      	add	r3, pc, #332	; (adr r3, 8007ab8 <__ieee754_pow+0x3d0>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	4606      	mov	r6, r0
 8007972:	460f      	mov	r7, r1
 8007974:	4620      	mov	r0, r4
 8007976:	4629      	mov	r1, r5
 8007978:	f7f8 fe46 	bl	8000608 <__aeabi_dmul>
 800797c:	4b57      	ldr	r3, [pc, #348]	; (8007adc <__ieee754_pow+0x3f4>)
 800797e:	4682      	mov	sl, r0
 8007980:	468b      	mov	fp, r1
 8007982:	2200      	movs	r2, #0
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f8 fe3e 	bl	8000608 <__aeabi_dmul>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	a14b      	add	r1, pc, #300	; (adr r1, 8007ac0 <__ieee754_pow+0x3d8>)
 8007992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007996:	f7f8 fc7f 	bl	8000298 <__aeabi_dsub>
 800799a:	4622      	mov	r2, r4
 800799c:	462b      	mov	r3, r5
 800799e:	f7f8 fe33 	bl	8000608 <__aeabi_dmul>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	2000      	movs	r0, #0
 80079a8:	494d      	ldr	r1, [pc, #308]	; (8007ae0 <__ieee754_pow+0x3f8>)
 80079aa:	f7f8 fc75 	bl	8000298 <__aeabi_dsub>
 80079ae:	4622      	mov	r2, r4
 80079b0:	4680      	mov	r8, r0
 80079b2:	4689      	mov	r9, r1
 80079b4:	462b      	mov	r3, r5
 80079b6:	4620      	mov	r0, r4
 80079b8:	4629      	mov	r1, r5
 80079ba:	f7f8 fe25 	bl	8000608 <__aeabi_dmul>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	f7f8 fe1f 	bl	8000608 <__aeabi_dmul>
 80079ca:	a33f      	add	r3, pc, #252	; (adr r3, 8007ac8 <__ieee754_pow+0x3e0>)
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f7f8 fe1a 	bl	8000608 <__aeabi_dmul>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4650      	mov	r0, sl
 80079da:	4659      	mov	r1, fp
 80079dc:	f7f8 fc5c 	bl	8000298 <__aeabi_dsub>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4680      	mov	r8, r0
 80079e6:	4689      	mov	r9, r1
 80079e8:	4630      	mov	r0, r6
 80079ea:	4639      	mov	r1, r7
 80079ec:	f7f8 fc56 	bl	800029c <__adddf3>
 80079f0:	2000      	movs	r0, #0
 80079f2:	4632      	mov	r2, r6
 80079f4:	463b      	mov	r3, r7
 80079f6:	4604      	mov	r4, r0
 80079f8:	460d      	mov	r5, r1
 80079fa:	f7f8 fc4d 	bl	8000298 <__aeabi_dsub>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4640      	mov	r0, r8
 8007a04:	4649      	mov	r1, r9
 8007a06:	f7f8 fc47 	bl	8000298 <__aeabi_dsub>
 8007a0a:	9b04      	ldr	r3, [sp, #16]
 8007a0c:	9a06      	ldr	r2, [sp, #24]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	4313      	orrs	r3, r2
 8007a12:	4682      	mov	sl, r0
 8007a14:	468b      	mov	fp, r1
 8007a16:	f040 81e7 	bne.w	8007de8 <__ieee754_pow+0x700>
 8007a1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007ad0 <__ieee754_pow+0x3e8>
 8007a1e:	eeb0 8a47 	vmov.f32	s16, s14
 8007a22:	eef0 8a67 	vmov.f32	s17, s15
 8007a26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a2a:	2600      	movs	r6, #0
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	463b      	mov	r3, r7
 8007a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a34:	f7f8 fc30 	bl	8000298 <__aeabi_dsub>
 8007a38:	4622      	mov	r2, r4
 8007a3a:	462b      	mov	r3, r5
 8007a3c:	f7f8 fde4 	bl	8000608 <__aeabi_dmul>
 8007a40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a44:	4680      	mov	r8, r0
 8007a46:	4689      	mov	r9, r1
 8007a48:	4650      	mov	r0, sl
 8007a4a:	4659      	mov	r1, fp
 8007a4c:	f7f8 fddc 	bl	8000608 <__aeabi_dmul>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4640      	mov	r0, r8
 8007a56:	4649      	mov	r1, r9
 8007a58:	f7f8 fc20 	bl	800029c <__adddf3>
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	463b      	mov	r3, r7
 8007a60:	4680      	mov	r8, r0
 8007a62:	4689      	mov	r9, r1
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f8 fdce 	bl	8000608 <__aeabi_dmul>
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4604      	mov	r4, r0
 8007a70:	460d      	mov	r5, r1
 8007a72:	4602      	mov	r2, r0
 8007a74:	4649      	mov	r1, r9
 8007a76:	4640      	mov	r0, r8
 8007a78:	f7f8 fc10 	bl	800029c <__adddf3>
 8007a7c:	4b19      	ldr	r3, [pc, #100]	; (8007ae4 <__ieee754_pow+0x3fc>)
 8007a7e:	4299      	cmp	r1, r3
 8007a80:	ec45 4b19 	vmov	d9, r4, r5
 8007a84:	4606      	mov	r6, r0
 8007a86:	460f      	mov	r7, r1
 8007a88:	468b      	mov	fp, r1
 8007a8a:	f340 82f0 	ble.w	800806e <__ieee754_pow+0x986>
 8007a8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007a92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007a96:	4303      	orrs	r3, r0
 8007a98:	f000 81e4 	beq.w	8007e64 <__ieee754_pow+0x77c>
 8007a9c:	ec51 0b18 	vmov	r0, r1, d8
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f7f9 f822 	bl	8000aec <__aeabi_dcmplt>
 8007aa8:	3800      	subs	r0, #0
 8007aaa:	bf18      	it	ne
 8007aac:	2001      	movne	r0, #1
 8007aae:	e72b      	b.n	8007908 <__ieee754_pow+0x220>
 8007ab0:	60000000 	.word	0x60000000
 8007ab4:	3ff71547 	.word	0x3ff71547
 8007ab8:	f85ddf44 	.word	0xf85ddf44
 8007abc:	3e54ae0b 	.word	0x3e54ae0b
 8007ac0:	55555555 	.word	0x55555555
 8007ac4:	3fd55555 	.word	0x3fd55555
 8007ac8:	652b82fe 	.word	0x652b82fe
 8007acc:	3ff71547 	.word	0x3ff71547
 8007ad0:	00000000 	.word	0x00000000
 8007ad4:	bff00000 	.word	0xbff00000
 8007ad8:	3ff00000 	.word	0x3ff00000
 8007adc:	3fd00000 	.word	0x3fd00000
 8007ae0:	3fe00000 	.word	0x3fe00000
 8007ae4:	408fffff 	.word	0x408fffff
 8007ae8:	4bd5      	ldr	r3, [pc, #852]	; (8007e40 <__ieee754_pow+0x758>)
 8007aea:	402b      	ands	r3, r5
 8007aec:	2200      	movs	r2, #0
 8007aee:	b92b      	cbnz	r3, 8007afc <__ieee754_pow+0x414>
 8007af0:	4bd4      	ldr	r3, [pc, #848]	; (8007e44 <__ieee754_pow+0x75c>)
 8007af2:	f7f8 fd89 	bl	8000608 <__aeabi_dmul>
 8007af6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007afa:	460c      	mov	r4, r1
 8007afc:	1523      	asrs	r3, r4, #20
 8007afe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b02:	4413      	add	r3, r2
 8007b04:	9305      	str	r3, [sp, #20]
 8007b06:	4bd0      	ldr	r3, [pc, #832]	; (8007e48 <__ieee754_pow+0x760>)
 8007b08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007b0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007b10:	429c      	cmp	r4, r3
 8007b12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007b16:	dd08      	ble.n	8007b2a <__ieee754_pow+0x442>
 8007b18:	4bcc      	ldr	r3, [pc, #816]	; (8007e4c <__ieee754_pow+0x764>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	f340 8162 	ble.w	8007de4 <__ieee754_pow+0x6fc>
 8007b20:	9b05      	ldr	r3, [sp, #20]
 8007b22:	3301      	adds	r3, #1
 8007b24:	9305      	str	r3, [sp, #20]
 8007b26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007b2a:	2400      	movs	r4, #0
 8007b2c:	00e3      	lsls	r3, r4, #3
 8007b2e:	9307      	str	r3, [sp, #28]
 8007b30:	4bc7      	ldr	r3, [pc, #796]	; (8007e50 <__ieee754_pow+0x768>)
 8007b32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b36:	ed93 7b00 	vldr	d7, [r3]
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	ec53 2b17 	vmov	r2, r3, d7
 8007b40:	eeb0 9a47 	vmov.f32	s18, s14
 8007b44:	eef0 9a67 	vmov.f32	s19, s15
 8007b48:	4682      	mov	sl, r0
 8007b4a:	f7f8 fba5 	bl	8000298 <__aeabi_dsub>
 8007b4e:	4652      	mov	r2, sl
 8007b50:	4606      	mov	r6, r0
 8007b52:	460f      	mov	r7, r1
 8007b54:	462b      	mov	r3, r5
 8007b56:	ec51 0b19 	vmov	r0, r1, d9
 8007b5a:	f7f8 fb9f 	bl	800029c <__adddf3>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	2000      	movs	r0, #0
 8007b64:	49bb      	ldr	r1, [pc, #748]	; (8007e54 <__ieee754_pow+0x76c>)
 8007b66:	f7f8 fe79 	bl	800085c <__aeabi_ddiv>
 8007b6a:	ec41 0b1a 	vmov	d10, r0, r1
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	4630      	mov	r0, r6
 8007b74:	4639      	mov	r1, r7
 8007b76:	f7f8 fd47 	bl	8000608 <__aeabi_dmul>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b80:	9302      	str	r3, [sp, #8]
 8007b82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b86:	46ab      	mov	fp, r5
 8007b88:	106d      	asrs	r5, r5, #1
 8007b8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007b8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007b92:	ec41 0b18 	vmov	d8, r0, r1
 8007b96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	4614      	mov	r4, r2
 8007ba2:	461d      	mov	r5, r3
 8007ba4:	f7f8 fd30 	bl	8000608 <__aeabi_dmul>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4630      	mov	r0, r6
 8007bae:	4639      	mov	r1, r7
 8007bb0:	f7f8 fb72 	bl	8000298 <__aeabi_dsub>
 8007bb4:	ec53 2b19 	vmov	r2, r3, d9
 8007bb8:	4606      	mov	r6, r0
 8007bba:	460f      	mov	r7, r1
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	f7f8 fb6a 	bl	8000298 <__aeabi_dsub>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4650      	mov	r0, sl
 8007bca:	4659      	mov	r1, fp
 8007bcc:	f7f8 fb64 	bl	8000298 <__aeabi_dsub>
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	f7f8 fd18 	bl	8000608 <__aeabi_dmul>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4630      	mov	r0, r6
 8007bde:	4639      	mov	r1, r7
 8007be0:	f7f8 fb5a 	bl	8000298 <__aeabi_dsub>
 8007be4:	ec53 2b1a 	vmov	r2, r3, d10
 8007be8:	f7f8 fd0e 	bl	8000608 <__aeabi_dmul>
 8007bec:	ec53 2b18 	vmov	r2, r3, d8
 8007bf0:	ec41 0b19 	vmov	d9, r0, r1
 8007bf4:	ec51 0b18 	vmov	r0, r1, d8
 8007bf8:	f7f8 fd06 	bl	8000608 <__aeabi_dmul>
 8007bfc:	a37c      	add	r3, pc, #496	; (adr r3, 8007df0 <__ieee754_pow+0x708>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	4604      	mov	r4, r0
 8007c04:	460d      	mov	r5, r1
 8007c06:	f7f8 fcff 	bl	8000608 <__aeabi_dmul>
 8007c0a:	a37b      	add	r3, pc, #492	; (adr r3, 8007df8 <__ieee754_pow+0x710>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f7f8 fb44 	bl	800029c <__adddf3>
 8007c14:	4622      	mov	r2, r4
 8007c16:	462b      	mov	r3, r5
 8007c18:	f7f8 fcf6 	bl	8000608 <__aeabi_dmul>
 8007c1c:	a378      	add	r3, pc, #480	; (adr r3, 8007e00 <__ieee754_pow+0x718>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f7f8 fb3b 	bl	800029c <__adddf3>
 8007c26:	4622      	mov	r2, r4
 8007c28:	462b      	mov	r3, r5
 8007c2a:	f7f8 fced 	bl	8000608 <__aeabi_dmul>
 8007c2e:	a376      	add	r3, pc, #472	; (adr r3, 8007e08 <__ieee754_pow+0x720>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 fb32 	bl	800029c <__adddf3>
 8007c38:	4622      	mov	r2, r4
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	f7f8 fce4 	bl	8000608 <__aeabi_dmul>
 8007c40:	a373      	add	r3, pc, #460	; (adr r3, 8007e10 <__ieee754_pow+0x728>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f7f8 fb29 	bl	800029c <__adddf3>
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	f7f8 fcdb 	bl	8000608 <__aeabi_dmul>
 8007c52:	a371      	add	r3, pc, #452	; (adr r3, 8007e18 <__ieee754_pow+0x730>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f7f8 fb20 	bl	800029c <__adddf3>
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	4606      	mov	r6, r0
 8007c60:	460f      	mov	r7, r1
 8007c62:	462b      	mov	r3, r5
 8007c64:	4620      	mov	r0, r4
 8007c66:	4629      	mov	r1, r5
 8007c68:	f7f8 fcce 	bl	8000608 <__aeabi_dmul>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f8 fcc8 	bl	8000608 <__aeabi_dmul>
 8007c78:	4642      	mov	r2, r8
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	460d      	mov	r5, r1
 8007c7e:	464b      	mov	r3, r9
 8007c80:	ec51 0b18 	vmov	r0, r1, d8
 8007c84:	f7f8 fb0a 	bl	800029c <__adddf3>
 8007c88:	ec53 2b19 	vmov	r2, r3, d9
 8007c8c:	f7f8 fcbc 	bl	8000608 <__aeabi_dmul>
 8007c90:	4622      	mov	r2, r4
 8007c92:	462b      	mov	r3, r5
 8007c94:	f7f8 fb02 	bl	800029c <__adddf3>
 8007c98:	4642      	mov	r2, r8
 8007c9a:	4682      	mov	sl, r0
 8007c9c:	468b      	mov	fp, r1
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	f7f8 fcb0 	bl	8000608 <__aeabi_dmul>
 8007ca8:	4b6b      	ldr	r3, [pc, #428]	; (8007e58 <__ieee754_pow+0x770>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	4606      	mov	r6, r0
 8007cae:	460f      	mov	r7, r1
 8007cb0:	f7f8 faf4 	bl	800029c <__adddf3>
 8007cb4:	4652      	mov	r2, sl
 8007cb6:	465b      	mov	r3, fp
 8007cb8:	f7f8 faf0 	bl	800029c <__adddf3>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	460d      	mov	r5, r1
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	4649      	mov	r1, r9
 8007cca:	f7f8 fc9d 	bl	8000608 <__aeabi_dmul>
 8007cce:	4b62      	ldr	r3, [pc, #392]	; (8007e58 <__ieee754_pow+0x770>)
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	4689      	mov	r9, r1
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	f7f8 fadd 	bl	8000298 <__aeabi_dsub>
 8007cde:	4632      	mov	r2, r6
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	f7f8 fad9 	bl	8000298 <__aeabi_dsub>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4650      	mov	r0, sl
 8007cec:	4659      	mov	r1, fp
 8007cee:	f7f8 fad3 	bl	8000298 <__aeabi_dsub>
 8007cf2:	ec53 2b18 	vmov	r2, r3, d8
 8007cf6:	f7f8 fc87 	bl	8000608 <__aeabi_dmul>
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	460f      	mov	r7, r1
 8007d00:	462b      	mov	r3, r5
 8007d02:	ec51 0b19 	vmov	r0, r1, d9
 8007d06:	f7f8 fc7f 	bl	8000608 <__aeabi_dmul>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4630      	mov	r0, r6
 8007d10:	4639      	mov	r1, r7
 8007d12:	f7f8 fac3 	bl	800029c <__adddf3>
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4640      	mov	r0, r8
 8007d20:	4649      	mov	r1, r9
 8007d22:	f7f8 fabb 	bl	800029c <__adddf3>
 8007d26:	a33e      	add	r3, pc, #248	; (adr r3, 8007e20 <__ieee754_pow+0x738>)
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	4604      	mov	r4, r0
 8007d30:	460d      	mov	r5, r1
 8007d32:	f7f8 fc69 	bl	8000608 <__aeabi_dmul>
 8007d36:	4642      	mov	r2, r8
 8007d38:	ec41 0b18 	vmov	d8, r0, r1
 8007d3c:	464b      	mov	r3, r9
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 faa9 	bl	8000298 <__aeabi_dsub>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	f7f8 faa3 	bl	8000298 <__aeabi_dsub>
 8007d52:	a335      	add	r3, pc, #212	; (adr r3, 8007e28 <__ieee754_pow+0x740>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 fc56 	bl	8000608 <__aeabi_dmul>
 8007d5c:	a334      	add	r3, pc, #208	; (adr r3, 8007e30 <__ieee754_pow+0x748>)
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	4606      	mov	r6, r0
 8007d64:	460f      	mov	r7, r1
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7f8 fc4d 	bl	8000608 <__aeabi_dmul>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4630      	mov	r0, r6
 8007d74:	4639      	mov	r1, r7
 8007d76:	f7f8 fa91 	bl	800029c <__adddf3>
 8007d7a:	9a07      	ldr	r2, [sp, #28]
 8007d7c:	4b37      	ldr	r3, [pc, #220]	; (8007e5c <__ieee754_pow+0x774>)
 8007d7e:	4413      	add	r3, r2
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 fa8a 	bl	800029c <__adddf3>
 8007d88:	4682      	mov	sl, r0
 8007d8a:	9805      	ldr	r0, [sp, #20]
 8007d8c:	468b      	mov	fp, r1
 8007d8e:	f7f8 fbd1 	bl	8000534 <__aeabi_i2d>
 8007d92:	9a07      	ldr	r2, [sp, #28]
 8007d94:	4b32      	ldr	r3, [pc, #200]	; (8007e60 <__ieee754_pow+0x778>)
 8007d96:	4413      	add	r3, r2
 8007d98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	460f      	mov	r7, r1
 8007da0:	4652      	mov	r2, sl
 8007da2:	465b      	mov	r3, fp
 8007da4:	ec51 0b18 	vmov	r0, r1, d8
 8007da8:	f7f8 fa78 	bl	800029c <__adddf3>
 8007dac:	4642      	mov	r2, r8
 8007dae:	464b      	mov	r3, r9
 8007db0:	f7f8 fa74 	bl	800029c <__adddf3>
 8007db4:	4632      	mov	r2, r6
 8007db6:	463b      	mov	r3, r7
 8007db8:	f7f8 fa70 	bl	800029c <__adddf3>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4632      	mov	r2, r6
 8007dc0:	463b      	mov	r3, r7
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	460d      	mov	r5, r1
 8007dc6:	f7f8 fa67 	bl	8000298 <__aeabi_dsub>
 8007dca:	4642      	mov	r2, r8
 8007dcc:	464b      	mov	r3, r9
 8007dce:	f7f8 fa63 	bl	8000298 <__aeabi_dsub>
 8007dd2:	ec53 2b18 	vmov	r2, r3, d8
 8007dd6:	f7f8 fa5f 	bl	8000298 <__aeabi_dsub>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4650      	mov	r0, sl
 8007de0:	4659      	mov	r1, fp
 8007de2:	e610      	b.n	8007a06 <__ieee754_pow+0x31e>
 8007de4:	2401      	movs	r4, #1
 8007de6:	e6a1      	b.n	8007b2c <__ieee754_pow+0x444>
 8007de8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007e38 <__ieee754_pow+0x750>
 8007dec:	e617      	b.n	8007a1e <__ieee754_pow+0x336>
 8007dee:	bf00      	nop
 8007df0:	4a454eef 	.word	0x4a454eef
 8007df4:	3fca7e28 	.word	0x3fca7e28
 8007df8:	93c9db65 	.word	0x93c9db65
 8007dfc:	3fcd864a 	.word	0x3fcd864a
 8007e00:	a91d4101 	.word	0xa91d4101
 8007e04:	3fd17460 	.word	0x3fd17460
 8007e08:	518f264d 	.word	0x518f264d
 8007e0c:	3fd55555 	.word	0x3fd55555
 8007e10:	db6fabff 	.word	0xdb6fabff
 8007e14:	3fdb6db6 	.word	0x3fdb6db6
 8007e18:	33333303 	.word	0x33333303
 8007e1c:	3fe33333 	.word	0x3fe33333
 8007e20:	e0000000 	.word	0xe0000000
 8007e24:	3feec709 	.word	0x3feec709
 8007e28:	dc3a03fd 	.word	0xdc3a03fd
 8007e2c:	3feec709 	.word	0x3feec709
 8007e30:	145b01f5 	.word	0x145b01f5
 8007e34:	be3e2fe0 	.word	0xbe3e2fe0
 8007e38:	00000000 	.word	0x00000000
 8007e3c:	3ff00000 	.word	0x3ff00000
 8007e40:	7ff00000 	.word	0x7ff00000
 8007e44:	43400000 	.word	0x43400000
 8007e48:	0003988e 	.word	0x0003988e
 8007e4c:	000bb679 	.word	0x000bb679
 8007e50:	08008830 	.word	0x08008830
 8007e54:	3ff00000 	.word	0x3ff00000
 8007e58:	40080000 	.word	0x40080000
 8007e5c:	08008850 	.word	0x08008850
 8007e60:	08008840 	.word	0x08008840
 8007e64:	a3b3      	add	r3, pc, #716	; (adr r3, 8008134 <__ieee754_pow+0xa4c>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	f7f8 fa15 	bl	800029c <__adddf3>
 8007e72:	4622      	mov	r2, r4
 8007e74:	ec41 0b1a 	vmov	d10, r0, r1
 8007e78:	462b      	mov	r3, r5
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	f7f8 fa0b 	bl	8000298 <__aeabi_dsub>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	ec51 0b1a 	vmov	r0, r1, d10
 8007e8a:	f7f8 fe4d 	bl	8000b28 <__aeabi_dcmpgt>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	f47f ae04 	bne.w	8007a9c <__ieee754_pow+0x3b4>
 8007e94:	4aa2      	ldr	r2, [pc, #648]	; (8008120 <__ieee754_pow+0xa38>)
 8007e96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	f340 8107 	ble.w	80080ae <__ieee754_pow+0x9c6>
 8007ea0:	151b      	asrs	r3, r3, #20
 8007ea2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007ea6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007eaa:	fa4a fa03 	asr.w	sl, sl, r3
 8007eae:	44da      	add	sl, fp
 8007eb0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007eb4:	489b      	ldr	r0, [pc, #620]	; (8008124 <__ieee754_pow+0xa3c>)
 8007eb6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007eba:	4108      	asrs	r0, r1
 8007ebc:	ea00 030a 	and.w	r3, r0, sl
 8007ec0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007ec4:	f1c1 0114 	rsb	r1, r1, #20
 8007ec8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007ecc:	fa4a fa01 	asr.w	sl, sl, r1
 8007ed0:	f1bb 0f00 	cmp.w	fp, #0
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	4620      	mov	r0, r4
 8007eda:	4629      	mov	r1, r5
 8007edc:	bfb8      	it	lt
 8007ede:	f1ca 0a00 	rsblt	sl, sl, #0
 8007ee2:	f7f8 f9d9 	bl	8000298 <__aeabi_dsub>
 8007ee6:	ec41 0b19 	vmov	d9, r0, r1
 8007eea:	4642      	mov	r2, r8
 8007eec:	464b      	mov	r3, r9
 8007eee:	ec51 0b19 	vmov	r0, r1, d9
 8007ef2:	f7f8 f9d3 	bl	800029c <__adddf3>
 8007ef6:	a37a      	add	r3, pc, #488	; (adr r3, 80080e0 <__ieee754_pow+0x9f8>)
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	2000      	movs	r0, #0
 8007efe:	4604      	mov	r4, r0
 8007f00:	460d      	mov	r5, r1
 8007f02:	f7f8 fb81 	bl	8000608 <__aeabi_dmul>
 8007f06:	ec53 2b19 	vmov	r2, r3, d9
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	4620      	mov	r0, r4
 8007f10:	4629      	mov	r1, r5
 8007f12:	f7f8 f9c1 	bl	8000298 <__aeabi_dsub>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	f7f8 f9bb 	bl	8000298 <__aeabi_dsub>
 8007f22:	a371      	add	r3, pc, #452	; (adr r3, 80080e8 <__ieee754_pow+0xa00>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	a370      	add	r3, pc, #448	; (adr r3, 80080f0 <__ieee754_pow+0xa08>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	4680      	mov	r8, r0
 8007f34:	4689      	mov	r9, r1
 8007f36:	4620      	mov	r0, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7f8 fb65 	bl	8000608 <__aeabi_dmul>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4640      	mov	r0, r8
 8007f44:	4649      	mov	r1, r9
 8007f46:	f7f8 f9a9 	bl	800029c <__adddf3>
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4630      	mov	r0, r6
 8007f54:	4639      	mov	r1, r7
 8007f56:	f7f8 f9a1 	bl	800029c <__adddf3>
 8007f5a:	4632      	mov	r2, r6
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	4680      	mov	r8, r0
 8007f60:	4689      	mov	r9, r1
 8007f62:	f7f8 f999 	bl	8000298 <__aeabi_dsub>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	f7f8 f993 	bl	8000298 <__aeabi_dsub>
 8007f72:	4642      	mov	r2, r8
 8007f74:	4606      	mov	r6, r0
 8007f76:	460f      	mov	r7, r1
 8007f78:	464b      	mov	r3, r9
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 fb43 	bl	8000608 <__aeabi_dmul>
 8007f82:	a35d      	add	r3, pc, #372	; (adr r3, 80080f8 <__ieee754_pow+0xa10>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	4604      	mov	r4, r0
 8007f8a:	460d      	mov	r5, r1
 8007f8c:	f7f8 fb3c 	bl	8000608 <__aeabi_dmul>
 8007f90:	a35b      	add	r3, pc, #364	; (adr r3, 8008100 <__ieee754_pow+0xa18>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 f97f 	bl	8000298 <__aeabi_dsub>
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	462b      	mov	r3, r5
 8007f9e:	f7f8 fb33 	bl	8000608 <__aeabi_dmul>
 8007fa2:	a359      	add	r3, pc, #356	; (adr r3, 8008108 <__ieee754_pow+0xa20>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 f978 	bl	800029c <__adddf3>
 8007fac:	4622      	mov	r2, r4
 8007fae:	462b      	mov	r3, r5
 8007fb0:	f7f8 fb2a 	bl	8000608 <__aeabi_dmul>
 8007fb4:	a356      	add	r3, pc, #344	; (adr r3, 8008110 <__ieee754_pow+0xa28>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 f96d 	bl	8000298 <__aeabi_dsub>
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	462b      	mov	r3, r5
 8007fc2:	f7f8 fb21 	bl	8000608 <__aeabi_dmul>
 8007fc6:	a354      	add	r3, pc, #336	; (adr r3, 8008118 <__ieee754_pow+0xa30>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7f8 f966 	bl	800029c <__adddf3>
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	462b      	mov	r3, r5
 8007fd4:	f7f8 fb18 	bl	8000608 <__aeabi_dmul>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4640      	mov	r0, r8
 8007fde:	4649      	mov	r1, r9
 8007fe0:	f7f8 f95a 	bl	8000298 <__aeabi_dsub>
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	460d      	mov	r5, r1
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4640      	mov	r0, r8
 8007fee:	4649      	mov	r1, r9
 8007ff0:	f7f8 fb0a 	bl	8000608 <__aeabi_dmul>
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	ec41 0b19 	vmov	d9, r0, r1
 8007ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ffe:	4620      	mov	r0, r4
 8008000:	4629      	mov	r1, r5
 8008002:	f7f8 f949 	bl	8000298 <__aeabi_dsub>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	ec51 0b19 	vmov	r0, r1, d9
 800800e:	f7f8 fc25 	bl	800085c <__aeabi_ddiv>
 8008012:	4632      	mov	r2, r6
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	463b      	mov	r3, r7
 800801a:	4640      	mov	r0, r8
 800801c:	4649      	mov	r1, r9
 800801e:	f7f8 faf3 	bl	8000608 <__aeabi_dmul>
 8008022:	4632      	mov	r2, r6
 8008024:	463b      	mov	r3, r7
 8008026:	f7f8 f939 	bl	800029c <__adddf3>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 f931 	bl	8000298 <__aeabi_dsub>
 8008036:	4642      	mov	r2, r8
 8008038:	464b      	mov	r3, r9
 800803a:	f7f8 f92d 	bl	8000298 <__aeabi_dsub>
 800803e:	460b      	mov	r3, r1
 8008040:	4602      	mov	r2, r0
 8008042:	4939      	ldr	r1, [pc, #228]	; (8008128 <__ieee754_pow+0xa40>)
 8008044:	2000      	movs	r0, #0
 8008046:	f7f8 f927 	bl	8000298 <__aeabi_dsub>
 800804a:	ec41 0b10 	vmov	d0, r0, r1
 800804e:	ee10 3a90 	vmov	r3, s1
 8008052:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800805a:	da2b      	bge.n	80080b4 <__ieee754_pow+0x9cc>
 800805c:	4650      	mov	r0, sl
 800805e:	f000 f8a7 	bl	80081b0 <scalbn>
 8008062:	ec51 0b10 	vmov	r0, r1, d0
 8008066:	ec53 2b18 	vmov	r2, r3, d8
 800806a:	f7ff bbee 	b.w	800784a <__ieee754_pow+0x162>
 800806e:	4b2f      	ldr	r3, [pc, #188]	; (800812c <__ieee754_pow+0xa44>)
 8008070:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008074:	429e      	cmp	r6, r3
 8008076:	f77f af0d 	ble.w	8007e94 <__ieee754_pow+0x7ac>
 800807a:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <__ieee754_pow+0xa48>)
 800807c:	440b      	add	r3, r1
 800807e:	4303      	orrs	r3, r0
 8008080:	d009      	beq.n	8008096 <__ieee754_pow+0x9ae>
 8008082:	ec51 0b18 	vmov	r0, r1, d8
 8008086:	2200      	movs	r2, #0
 8008088:	2300      	movs	r3, #0
 800808a:	f7f8 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800808e:	3800      	subs	r0, #0
 8008090:	bf18      	it	ne
 8008092:	2001      	movne	r0, #1
 8008094:	e448      	b.n	8007928 <__ieee754_pow+0x240>
 8008096:	4622      	mov	r2, r4
 8008098:	462b      	mov	r3, r5
 800809a:	f7f8 f8fd 	bl	8000298 <__aeabi_dsub>
 800809e:	4642      	mov	r2, r8
 80080a0:	464b      	mov	r3, r9
 80080a2:	f7f8 fd37 	bl	8000b14 <__aeabi_dcmpge>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	f43f aef4 	beq.w	8007e94 <__ieee754_pow+0x7ac>
 80080ac:	e7e9      	b.n	8008082 <__ieee754_pow+0x99a>
 80080ae:	f04f 0a00 	mov.w	sl, #0
 80080b2:	e71a      	b.n	8007eea <__ieee754_pow+0x802>
 80080b4:	ec51 0b10 	vmov	r0, r1, d0
 80080b8:	4619      	mov	r1, r3
 80080ba:	e7d4      	b.n	8008066 <__ieee754_pow+0x97e>
 80080bc:	491a      	ldr	r1, [pc, #104]	; (8008128 <__ieee754_pow+0xa40>)
 80080be:	2000      	movs	r0, #0
 80080c0:	f7ff bb31 	b.w	8007726 <__ieee754_pow+0x3e>
 80080c4:	2000      	movs	r0, #0
 80080c6:	2100      	movs	r1, #0
 80080c8:	f7ff bb2d 	b.w	8007726 <__ieee754_pow+0x3e>
 80080cc:	4630      	mov	r0, r6
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7ff bb29 	b.w	8007726 <__ieee754_pow+0x3e>
 80080d4:	9204      	str	r2, [sp, #16]
 80080d6:	f7ff bb7b 	b.w	80077d0 <__ieee754_pow+0xe8>
 80080da:	2300      	movs	r3, #0
 80080dc:	f7ff bb65 	b.w	80077aa <__ieee754_pow+0xc2>
 80080e0:	00000000 	.word	0x00000000
 80080e4:	3fe62e43 	.word	0x3fe62e43
 80080e8:	fefa39ef 	.word	0xfefa39ef
 80080ec:	3fe62e42 	.word	0x3fe62e42
 80080f0:	0ca86c39 	.word	0x0ca86c39
 80080f4:	be205c61 	.word	0xbe205c61
 80080f8:	72bea4d0 	.word	0x72bea4d0
 80080fc:	3e663769 	.word	0x3e663769
 8008100:	c5d26bf1 	.word	0xc5d26bf1
 8008104:	3ebbbd41 	.word	0x3ebbbd41
 8008108:	af25de2c 	.word	0xaf25de2c
 800810c:	3f11566a 	.word	0x3f11566a
 8008110:	16bebd93 	.word	0x16bebd93
 8008114:	3f66c16c 	.word	0x3f66c16c
 8008118:	5555553e 	.word	0x5555553e
 800811c:	3fc55555 	.word	0x3fc55555
 8008120:	3fe00000 	.word	0x3fe00000
 8008124:	fff00000 	.word	0xfff00000
 8008128:	3ff00000 	.word	0x3ff00000
 800812c:	4090cbff 	.word	0x4090cbff
 8008130:	3f6f3400 	.word	0x3f6f3400
 8008134:	652b82fe 	.word	0x652b82fe
 8008138:	3c971547 	.word	0x3c971547

0800813c <with_errno>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	4604      	mov	r4, r0
 8008140:	460d      	mov	r5, r1
 8008142:	4616      	mov	r6, r2
 8008144:	f7fd f922 	bl	800538c <__errno>
 8008148:	4629      	mov	r1, r5
 800814a:	6006      	str	r6, [r0, #0]
 800814c:	4620      	mov	r0, r4
 800814e:	bd70      	pop	{r4, r5, r6, pc}

08008150 <xflow>:
 8008150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008152:	4614      	mov	r4, r2
 8008154:	461d      	mov	r5, r3
 8008156:	b108      	cbz	r0, 800815c <xflow+0xc>
 8008158:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800815c:	e9cd 2300 	strd	r2, r3, [sp]
 8008160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008164:	4620      	mov	r0, r4
 8008166:	4629      	mov	r1, r5
 8008168:	f7f8 fa4e 	bl	8000608 <__aeabi_dmul>
 800816c:	2222      	movs	r2, #34	; 0x22
 800816e:	b003      	add	sp, #12
 8008170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008174:	f7ff bfe2 	b.w	800813c <with_errno>

08008178 <__math_uflow>:
 8008178:	b508      	push	{r3, lr}
 800817a:	2200      	movs	r2, #0
 800817c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008180:	f7ff ffe6 	bl	8008150 <xflow>
 8008184:	ec41 0b10 	vmov	d0, r0, r1
 8008188:	bd08      	pop	{r3, pc}

0800818a <__math_oflow>:
 800818a:	b508      	push	{r3, lr}
 800818c:	2200      	movs	r2, #0
 800818e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008192:	f7ff ffdd 	bl	8008150 <xflow>
 8008196:	ec41 0b10 	vmov	d0, r0, r1
 800819a:	bd08      	pop	{r3, pc}

0800819c <fabs>:
 800819c:	ec51 0b10 	vmov	r0, r1, d0
 80081a0:	ee10 2a10 	vmov	r2, s0
 80081a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081a8:	ec43 2b10 	vmov	d0, r2, r3
 80081ac:	4770      	bx	lr
	...

080081b0 <scalbn>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	ec55 4b10 	vmov	r4, r5, d0
 80081b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80081ba:	4606      	mov	r6, r0
 80081bc:	462b      	mov	r3, r5
 80081be:	b999      	cbnz	r1, 80081e8 <scalbn+0x38>
 80081c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80081c4:	4323      	orrs	r3, r4
 80081c6:	d03f      	beq.n	8008248 <scalbn+0x98>
 80081c8:	4b35      	ldr	r3, [pc, #212]	; (80082a0 <scalbn+0xf0>)
 80081ca:	4629      	mov	r1, r5
 80081cc:	ee10 0a10 	vmov	r0, s0
 80081d0:	2200      	movs	r2, #0
 80081d2:	f7f8 fa19 	bl	8000608 <__aeabi_dmul>
 80081d6:	4b33      	ldr	r3, [pc, #204]	; (80082a4 <scalbn+0xf4>)
 80081d8:	429e      	cmp	r6, r3
 80081da:	4604      	mov	r4, r0
 80081dc:	460d      	mov	r5, r1
 80081de:	da10      	bge.n	8008202 <scalbn+0x52>
 80081e0:	a327      	add	r3, pc, #156	; (adr r3, 8008280 <scalbn+0xd0>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	e01f      	b.n	8008228 <scalbn+0x78>
 80081e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80081ec:	4291      	cmp	r1, r2
 80081ee:	d10c      	bne.n	800820a <scalbn+0x5a>
 80081f0:	ee10 2a10 	vmov	r2, s0
 80081f4:	4620      	mov	r0, r4
 80081f6:	4629      	mov	r1, r5
 80081f8:	f7f8 f850 	bl	800029c <__adddf3>
 80081fc:	4604      	mov	r4, r0
 80081fe:	460d      	mov	r5, r1
 8008200:	e022      	b.n	8008248 <scalbn+0x98>
 8008202:	460b      	mov	r3, r1
 8008204:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008208:	3936      	subs	r1, #54	; 0x36
 800820a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800820e:	4296      	cmp	r6, r2
 8008210:	dd0d      	ble.n	800822e <scalbn+0x7e>
 8008212:	2d00      	cmp	r5, #0
 8008214:	a11c      	add	r1, pc, #112	; (adr r1, 8008288 <scalbn+0xd8>)
 8008216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800821a:	da02      	bge.n	8008222 <scalbn+0x72>
 800821c:	a11c      	add	r1, pc, #112	; (adr r1, 8008290 <scalbn+0xe0>)
 800821e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008222:	a319      	add	r3, pc, #100	; (adr r3, 8008288 <scalbn+0xd8>)
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	f7f8 f9ee 	bl	8000608 <__aeabi_dmul>
 800822c:	e7e6      	b.n	80081fc <scalbn+0x4c>
 800822e:	1872      	adds	r2, r6, r1
 8008230:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008234:	428a      	cmp	r2, r1
 8008236:	dcec      	bgt.n	8008212 <scalbn+0x62>
 8008238:	2a00      	cmp	r2, #0
 800823a:	dd08      	ble.n	800824e <scalbn+0x9e>
 800823c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008240:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008244:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008248:	ec45 4b10 	vmov	d0, r4, r5
 800824c:	bd70      	pop	{r4, r5, r6, pc}
 800824e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008252:	da08      	bge.n	8008266 <scalbn+0xb6>
 8008254:	2d00      	cmp	r5, #0
 8008256:	a10a      	add	r1, pc, #40	; (adr r1, 8008280 <scalbn+0xd0>)
 8008258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800825c:	dac0      	bge.n	80081e0 <scalbn+0x30>
 800825e:	a10e      	add	r1, pc, #56	; (adr r1, 8008298 <scalbn+0xe8>)
 8008260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008264:	e7bc      	b.n	80081e0 <scalbn+0x30>
 8008266:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800826a:	3236      	adds	r2, #54	; 0x36
 800826c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008270:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008274:	4620      	mov	r0, r4
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <scalbn+0xf8>)
 8008278:	2200      	movs	r2, #0
 800827a:	e7d5      	b.n	8008228 <scalbn+0x78>
 800827c:	f3af 8000 	nop.w
 8008280:	c2f8f359 	.word	0xc2f8f359
 8008284:	01a56e1f 	.word	0x01a56e1f
 8008288:	8800759c 	.word	0x8800759c
 800828c:	7e37e43c 	.word	0x7e37e43c
 8008290:	8800759c 	.word	0x8800759c
 8008294:	fe37e43c 	.word	0xfe37e43c
 8008298:	c2f8f359 	.word	0xc2f8f359
 800829c:	81a56e1f 	.word	0x81a56e1f
 80082a0:	43500000 	.word	0x43500000
 80082a4:	ffff3cb0 	.word	0xffff3cb0
 80082a8:	3c900000 	.word	0x3c900000

080082ac <__ieee754_sqrt>:
 80082ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b0:	ec55 4b10 	vmov	r4, r5, d0
 80082b4:	4e67      	ldr	r6, [pc, #412]	; (8008454 <__ieee754_sqrt+0x1a8>)
 80082b6:	43ae      	bics	r6, r5
 80082b8:	ee10 0a10 	vmov	r0, s0
 80082bc:	ee10 2a10 	vmov	r2, s0
 80082c0:	4629      	mov	r1, r5
 80082c2:	462b      	mov	r3, r5
 80082c4:	d10d      	bne.n	80082e2 <__ieee754_sqrt+0x36>
 80082c6:	f7f8 f99f 	bl	8000608 <__aeabi_dmul>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4620      	mov	r0, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	f7f7 ffe3 	bl	800029c <__adddf3>
 80082d6:	4604      	mov	r4, r0
 80082d8:	460d      	mov	r5, r1
 80082da:	ec45 4b10 	vmov	d0, r4, r5
 80082de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e2:	2d00      	cmp	r5, #0
 80082e4:	dc0b      	bgt.n	80082fe <__ieee754_sqrt+0x52>
 80082e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80082ea:	4326      	orrs	r6, r4
 80082ec:	d0f5      	beq.n	80082da <__ieee754_sqrt+0x2e>
 80082ee:	b135      	cbz	r5, 80082fe <__ieee754_sqrt+0x52>
 80082f0:	f7f7 ffd2 	bl	8000298 <__aeabi_dsub>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	f7f8 fab0 	bl	800085c <__aeabi_ddiv>
 80082fc:	e7eb      	b.n	80082d6 <__ieee754_sqrt+0x2a>
 80082fe:	1509      	asrs	r1, r1, #20
 8008300:	f000 808d 	beq.w	800841e <__ieee754_sqrt+0x172>
 8008304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008308:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800830c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008310:	07c9      	lsls	r1, r1, #31
 8008312:	bf5c      	itt	pl
 8008314:	005b      	lslpl	r3, r3, #1
 8008316:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800831a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800831e:	bf58      	it	pl
 8008320:	0052      	lslpl	r2, r2, #1
 8008322:	2500      	movs	r5, #0
 8008324:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008328:	1076      	asrs	r6, r6, #1
 800832a:	0052      	lsls	r2, r2, #1
 800832c:	f04f 0e16 	mov.w	lr, #22
 8008330:	46ac      	mov	ip, r5
 8008332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008336:	eb0c 0001 	add.w	r0, ip, r1
 800833a:	4298      	cmp	r0, r3
 800833c:	bfde      	ittt	le
 800833e:	1a1b      	suble	r3, r3, r0
 8008340:	eb00 0c01 	addle.w	ip, r0, r1
 8008344:	186d      	addle	r5, r5, r1
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	f1be 0e01 	subs.w	lr, lr, #1
 800834c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008350:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008354:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008358:	d1ed      	bne.n	8008336 <__ieee754_sqrt+0x8a>
 800835a:	4674      	mov	r4, lr
 800835c:	2720      	movs	r7, #32
 800835e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008362:	4563      	cmp	r3, ip
 8008364:	eb01 000e 	add.w	r0, r1, lr
 8008368:	dc02      	bgt.n	8008370 <__ieee754_sqrt+0xc4>
 800836a:	d113      	bne.n	8008394 <__ieee754_sqrt+0xe8>
 800836c:	4290      	cmp	r0, r2
 800836e:	d811      	bhi.n	8008394 <__ieee754_sqrt+0xe8>
 8008370:	2800      	cmp	r0, #0
 8008372:	eb00 0e01 	add.w	lr, r0, r1
 8008376:	da57      	bge.n	8008428 <__ieee754_sqrt+0x17c>
 8008378:	f1be 0f00 	cmp.w	lr, #0
 800837c:	db54      	blt.n	8008428 <__ieee754_sqrt+0x17c>
 800837e:	f10c 0801 	add.w	r8, ip, #1
 8008382:	eba3 030c 	sub.w	r3, r3, ip
 8008386:	4290      	cmp	r0, r2
 8008388:	bf88      	it	hi
 800838a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800838e:	1a12      	subs	r2, r2, r0
 8008390:	440c      	add	r4, r1
 8008392:	46c4      	mov	ip, r8
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	3f01      	subs	r7, #1
 8008398:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800839c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80083a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80083a4:	d1dd      	bne.n	8008362 <__ieee754_sqrt+0xb6>
 80083a6:	4313      	orrs	r3, r2
 80083a8:	d01b      	beq.n	80083e2 <__ieee754_sqrt+0x136>
 80083aa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008458 <__ieee754_sqrt+0x1ac>
 80083ae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800845c <__ieee754_sqrt+0x1b0>
 80083b2:	e9da 0100 	ldrd	r0, r1, [sl]
 80083b6:	e9db 2300 	ldrd	r2, r3, [fp]
 80083ba:	f7f7 ff6d 	bl	8000298 <__aeabi_dsub>
 80083be:	e9da 8900 	ldrd	r8, r9, [sl]
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4640      	mov	r0, r8
 80083c8:	4649      	mov	r1, r9
 80083ca:	f7f8 fb99 	bl	8000b00 <__aeabi_dcmple>
 80083ce:	b140      	cbz	r0, 80083e2 <__ieee754_sqrt+0x136>
 80083d0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80083d4:	e9da 0100 	ldrd	r0, r1, [sl]
 80083d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80083dc:	d126      	bne.n	800842c <__ieee754_sqrt+0x180>
 80083de:	3501      	adds	r5, #1
 80083e0:	463c      	mov	r4, r7
 80083e2:	106a      	asrs	r2, r5, #1
 80083e4:	0863      	lsrs	r3, r4, #1
 80083e6:	07e9      	lsls	r1, r5, #31
 80083e8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80083ec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80083f0:	bf48      	it	mi
 80083f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80083f6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80083fa:	461c      	mov	r4, r3
 80083fc:	e76d      	b.n	80082da <__ieee754_sqrt+0x2e>
 80083fe:	0ad3      	lsrs	r3, r2, #11
 8008400:	3815      	subs	r0, #21
 8008402:	0552      	lsls	r2, r2, #21
 8008404:	2b00      	cmp	r3, #0
 8008406:	d0fa      	beq.n	80083fe <__ieee754_sqrt+0x152>
 8008408:	02dc      	lsls	r4, r3, #11
 800840a:	d50a      	bpl.n	8008422 <__ieee754_sqrt+0x176>
 800840c:	f1c1 0420 	rsb	r4, r1, #32
 8008410:	fa22 f404 	lsr.w	r4, r2, r4
 8008414:	1e4d      	subs	r5, r1, #1
 8008416:	408a      	lsls	r2, r1
 8008418:	4323      	orrs	r3, r4
 800841a:	1b41      	subs	r1, r0, r5
 800841c:	e772      	b.n	8008304 <__ieee754_sqrt+0x58>
 800841e:	4608      	mov	r0, r1
 8008420:	e7f0      	b.n	8008404 <__ieee754_sqrt+0x158>
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	3101      	adds	r1, #1
 8008426:	e7ef      	b.n	8008408 <__ieee754_sqrt+0x15c>
 8008428:	46e0      	mov	r8, ip
 800842a:	e7aa      	b.n	8008382 <__ieee754_sqrt+0xd6>
 800842c:	f7f7 ff36 	bl	800029c <__adddf3>
 8008430:	e9da 8900 	ldrd	r8, r9, [sl]
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4640      	mov	r0, r8
 800843a:	4649      	mov	r1, r9
 800843c:	f7f8 fb56 	bl	8000aec <__aeabi_dcmplt>
 8008440:	b120      	cbz	r0, 800844c <__ieee754_sqrt+0x1a0>
 8008442:	1ca0      	adds	r0, r4, #2
 8008444:	bf08      	it	eq
 8008446:	3501      	addeq	r5, #1
 8008448:	3402      	adds	r4, #2
 800844a:	e7ca      	b.n	80083e2 <__ieee754_sqrt+0x136>
 800844c:	3401      	adds	r4, #1
 800844e:	f024 0401 	bic.w	r4, r4, #1
 8008452:	e7c6      	b.n	80083e2 <__ieee754_sqrt+0x136>
 8008454:	7ff00000 	.word	0x7ff00000
 8008458:	200001d8 	.word	0x200001d8
 800845c:	200001e0 	.word	0x200001e0

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr

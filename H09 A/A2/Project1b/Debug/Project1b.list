
Project1b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d70  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f24  08003f24  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f2c  08003f2c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f2c  08003f2c  00013f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000001c  08003f50  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003f50  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd42  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c38  00000000  00000000  0002cdd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  0002ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097e  00000000  00000000  0002f620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016099  00000000  00000000  0002ff9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d7d8  00000000  00000000  00046037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ce3f  00000000  00000000  0005380f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032f4  00000000  00000000  000e0650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e3944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003eec 	.word	0x08003eec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08003eec 	.word	0x08003eec

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	  if(HAL_GPIO_ReadPin(PIN_R0)==GPIO_PIN_SET){
 80004d8:	2108      	movs	r1, #8
 80004da:	487e      	ldr	r0, [pc, #504]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80004dc:	f001 fb60 	bl	8001ba0 <HAL_GPIO_ReadPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d107      	bne.n	80004f6 <HAL_TIM_PeriodElapsedCallback+0x26>
		  keypress[4*column_index]=0;
 80004e6:	4b7c      	ldr	r3, [pc, #496]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4a7b      	ldr	r2, [pc, #492]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80004f4:	e006      	b.n	8000504 <HAL_TIM_PeriodElapsedCallback+0x34>
	  }else{
		  keypress[4*column_index]=1;
 80004f6:	4b78      	ldr	r3, [pc, #480]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4a77      	ldr	r2, [pc, #476]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80004fe:	2101      	movs	r1, #1
 8000500:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }

	  if(HAL_GPIO_ReadPin(PIN_R1)==GPIO_PIN_SET){
 8000504:	2104      	movs	r1, #4
 8000506:	4873      	ldr	r0, [pc, #460]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000508:	f001 fb4a 	bl	8001ba0 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	2b01      	cmp	r3, #1
 8000510:	d108      	bne.n	8000524 <HAL_TIM_PeriodElapsedCallback+0x54>
		  keypress[4*column_index+1]=0;
 8000512:	4b71      	ldr	r3, [pc, #452]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	3301      	adds	r3, #1
 800051a:	4a70      	ldr	r2, [pc, #448]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800051c:	2100      	movs	r1, #0
 800051e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000522:	e007      	b.n	8000534 <HAL_TIM_PeriodElapsedCallback+0x64>
	  }else{
		  keypress[4*column_index+1]=1;
 8000524:	4b6c      	ldr	r3, [pc, #432]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	3301      	adds	r3, #1
 800052c:	4a6b      	ldr	r2, [pc, #428]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800052e:	2101      	movs	r1, #1
 8000530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }

	  if(HAL_GPIO_ReadPin(PIN_R2)==GPIO_PIN_SET){
 8000534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000538:	4866      	ldr	r0, [pc, #408]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800053a:	f001 fb31 	bl	8001ba0 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b01      	cmp	r3, #1
 8000542:	d108      	bne.n	8000556 <HAL_TIM_PeriodElapsedCallback+0x86>
		  keypress[4*column_index+2]=0;
 8000544:	4b64      	ldr	r3, [pc, #400]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	3302      	adds	r3, #2
 800054c:	4a63      	ldr	r2, [pc, #396]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800054e:	2100      	movs	r1, #0
 8000550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000554:	e007      	b.n	8000566 <HAL_TIM_PeriodElapsedCallback+0x96>
	  }else{
		  keypress[4*column_index+2]=1;
 8000556:	4b60      	ldr	r3, [pc, #384]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	3302      	adds	r3, #2
 800055e:	4a5f      	ldr	r2, [pc, #380]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000560:	2101      	movs	r1, #1
 8000562:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }

	  if(HAL_GPIO_ReadPin(PIN_R3)==GPIO_PIN_SET){
 8000566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056a:	485a      	ldr	r0, [pc, #360]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800056c:	f001 fb18 	bl	8001ba0 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d108      	bne.n	8000588 <HAL_TIM_PeriodElapsedCallback+0xb8>
		  keypress[4*column_index+3]=0;
 8000576:	4b58      	ldr	r3, [pc, #352]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	3303      	adds	r3, #3
 800057e:	4a57      	ldr	r2, [pc, #348]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000580:	2100      	movs	r1, #0
 8000582:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000586:	e007      	b.n	8000598 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  }else{
		  keypress[4*column_index+3]=1;
 8000588:	4b53      	ldr	r3, [pc, #332]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	3303      	adds	r3, #3
 8000590:	4a52      	ldr	r2, [pc, #328]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000592:	2101      	movs	r1, #1
 8000594:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }
	  for(int i=0;i<4;i++){
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e052      	b.n	8000644 <HAL_TIM_PeriodElapsedCallback+0x174>
		  if(keypress[4*column_index+i] == 1){
 800059e:	4b4e      	ldr	r3, [pc, #312]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	009a      	lsls	r2, r3, #2
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a4c      	ldr	r2, [pc, #304]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80005aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d13c      	bne.n	800062c <HAL_TIM_PeriodElapsedCallback+0x15c>
			  if(ack[4*column_index+i] == 0){
 80005b2:	4b49      	ldr	r3, [pc, #292]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	009a      	lsls	r2, r3, #2
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a48      	ldr	r2, [pc, #288]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80005be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d13b      	bne.n	800063e <HAL_TIM_PeriodElapsedCallback+0x16e>
				  if(debounce_time[4*column_index+i] == 0){
 80005c6:	4b44      	ldr	r3, [pc, #272]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	009a      	lsls	r2, r3, #2
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a44      	ldr	r2, [pc, #272]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80005d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d11e      	bne.n	8000618 <HAL_TIM_PeriodElapsedCallback+0x148>
				  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)&map[4*column_index+i],1);
 80005da:	4b3f      	ldr	r3, [pc, #252]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	009a      	lsls	r2, r3, #2
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a40      	ldr	r2, [pc, #256]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80005e6:	4413      	add	r3, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	4619      	mov	r1, r3
 80005ec:	483f      	ldr	r0, [pc, #252]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80005ee:	f002 fc35 	bl	8002e5c <HAL_UART_Transmit_DMA>
				  ack[4*column_index+i] = 1;
 80005f2:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	009a      	lsls	r2, r3, #2
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4413      	add	r3, r2
 80005fc:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80005fe:	2101      	movs	r1, #1
 8000600:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  debounce_time[4*column_index+i] = 1;
 8000604:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	009a      	lsls	r2, r3, #2
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	4a35      	ldr	r2, [pc, #212]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000610:	2101      	movs	r1, #1
 8000612:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000616:	e012      	b.n	800063e <HAL_TIM_PeriodElapsedCallback+0x16e>
				  }
				  else{
					  debounce_time[4*column_index+i] = 0;
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	009a      	lsls	r2, r3, #2
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	4413      	add	r3, r2
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000624:	2100      	movs	r1, #0
 8000626:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800062a:	e008      	b.n	800063e <HAL_TIM_PeriodElapsedCallback+0x16e>
				  }
			  }
		  }else{
			  ack[4*column_index+i] = 0;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	009a      	lsls	r2, r3, #2
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	4a2a      	ldr	r2, [pc, #168]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000638:	2100      	movs	r1, #0
 800063a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(int i=0;i<4;i++){
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2b03      	cmp	r3, #3
 8000648:	dda9      	ble.n	800059e <HAL_TIM_PeriodElapsedCallback+0xce>
		  }
	  }

	  column_index++;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000652:	6013      	str	r3, [r2, #0]
	  if(column_index==4){
 8000654:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b04      	cmp	r3, #4
 800065a:	d102      	bne.n	8000662 <HAL_TIM_PeriodElapsedCallback+0x192>
		  column_index=0;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(PIN_C0,(column_index==0)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	bf0c      	ite	eq
 800066a:	2301      	moveq	r3, #1
 800066c:	2300      	movne	r3, #0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000676:	4817      	ldr	r0, [pc, #92]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000678:	f001 faaa 	bl	8001bd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PIN_C1,(column_index==1)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	bf0c      	ite	eq
 8000684:	2301      	moveq	r3, #1
 8000686:	2300      	movne	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000692:	f001 fa9d 	bl	8001bd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PIN_C2,(column_index==2)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b02      	cmp	r3, #2
 800069c:	bf0c      	ite	eq
 800069e:	2301      	moveq	r3, #1
 80006a0:	2300      	movne	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80006ac:	f001 fa90 	bl	8001bd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PIN_C3,(column_index==3)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	bf0c      	ite	eq
 80006b8:	2301      	moveq	r3, #1
 80006ba:	2300      	movne	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80006c6:	f001 fa83 	bl	8001bd0 <HAL_GPIO_WritePin>

}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020800 	.word	0x40020800
 80006d8:	200001a4 	.word	0x200001a4
 80006dc:	20000124 	.word	0x20000124
 80006e0:	20000164 	.word	0x20000164
 80006e4:	200001a8 	.word	0x200001a8
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000080 	.word	0x20000080

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f000 fb49 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f869 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 f969 	bl	80009d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000702:	f000 f947 	bl	8000994 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000706:	f000 f91b 	bl	8000940 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800070a:	f000 f8cd 	bl	80008a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  for(int i=0;i<16;i++){
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	e011      	b.n	8000738 <main+0x48>
	  keypress[i] = 0;
 8000714:	4a28      	ldr	r2, [pc, #160]	; (80007b8 <main+0xc8>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2100      	movs	r1, #0
 800071a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  ack[i] = 0;
 800071e:	4a27      	ldr	r2, [pc, #156]	; (80007bc <main+0xcc>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2100      	movs	r1, #0
 8000724:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  debounce_time[i] = 1;
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <main+0xd0>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2101      	movs	r1, #1
 800072e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0;i<16;i++){
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3301      	adds	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b0f      	cmp	r3, #15
 800073c:	ddea      	ble.n	8000714 <main+0x24>
  }
  HAL_GPIO_WritePin(PIN_C0,(column_index==0)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <main+0xd4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf0c      	ite	eq
 8000746:	2301      	moveq	r3, #1
 8000748:	2300      	movne	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000752:	481d      	ldr	r0, [pc, #116]	; (80007c8 <main+0xd8>)
 8000754:	f001 fa3c 	bl	8001bd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PIN_C1,(column_index==1)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <main+0xd4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	bf0c      	ite	eq
 8000760:	2301      	moveq	r3, #1
 8000762:	2300      	movne	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076c:	4816      	ldr	r0, [pc, #88]	; (80007c8 <main+0xd8>)
 800076e:	f001 fa2f 	bl	8001bd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PIN_C2,(column_index==2)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <main+0xd4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b02      	cmp	r3, #2
 8000778:	bf0c      	ite	eq
 800077a:	2301      	moveq	r3, #1
 800077c:	2300      	movne	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000786:	4810      	ldr	r0, [pc, #64]	; (80007c8 <main+0xd8>)
 8000788:	f001 fa22 	bl	8001bd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PIN_C3,(column_index==3)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <main+0xd4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b03      	cmp	r3, #3
 8000792:	bf0c      	ite	eq
 8000794:	2301      	moveq	r3, #1
 8000796:	2300      	movne	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <main+0xd8>)
 80007a2:	f001 fa15 	bl	8001bd0 <HAL_GPIO_WritePin>
  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK){
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <main+0xdc>)
 80007a8:	f001 ff14 	bl	80025d4 <HAL_TIM_Base_Start_IT>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <main+0xc6>
  	  Error_Handler();
 80007b2:	f000 f991 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <main+0xc6>
 80007b8:	20000124 	.word	0x20000124
 80007bc:	20000164 	.word	0x20000164
 80007c0:	200001a8 	.word	0x200001a8
 80007c4:	200001a4 	.word	0x200001a4
 80007c8:	40020800 	.word	0x40020800
 80007cc:	20000038 	.word	0x20000038

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	; 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 fb58 	bl	8003e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <SystemClock_Config+0xd0>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a28      	ldr	r2, [pc, #160]	; (80008a0 <SystemClock_Config+0xd0>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <SystemClock_Config+0xd0>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <SystemClock_Config+0xd4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800081c:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <SystemClock_Config+0xd4>)
 800081e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <SystemClock_Config+0xd4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2310      	movs	r3, #16
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000844:	2310      	movs	r3, #16
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000848:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800084c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800084e:	2304      	movs	r3, #4
 8000850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000852:	2307      	movs	r3, #7
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	4618      	mov	r0, r3
 800085c:	f001 f9d2 	bl	8001c04 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000866:	f000 f937 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2302      	movs	r3, #2
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2102      	movs	r1, #2
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fc34 	bl	80020f4 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000892:	f000 f921 	bl	8000ad8 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	; 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_TIM2_Init+0x94>)
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_TIM2_Init+0x94>)
 80008ce:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80008d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_TIM2_Init+0x94>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_TIM2_Init+0x94>)
 80008dc:	2263      	movs	r2, #99	; 0x63
 80008de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_TIM2_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_TIM2_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ec:	4813      	ldr	r0, [pc, #76]	; (800093c <MX_TIM2_Init+0x94>)
 80008ee:	f001 fe21 	bl	8002534 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008f8:	f000 f8ee 	bl	8000ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_TIM2_Init+0x94>)
 800090a:	f001 ffcd 	bl	80028a8 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000914:	f000 f8e0 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_TIM2_Init+0x94>)
 8000926:	f002 f9c9 	bl	8002cbc <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 f8d2 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000038 	.word	0x20000038

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_USART2_UART_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000978:	f002 fa22 	bl	8002dc0 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f8a9 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000080 	.word	0x20000080
 8000990:	40004400 	.word	0x40004400

08000994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_DMA_Init+0x3c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <MX_DMA_Init+0x3c>)
 80009a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_DMA_Init+0x3c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2011      	movs	r0, #17
 80009bc:	f000 fb33 	bl	8001026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009c0:	2011      	movs	r0, #17
 80009c2:	f000 fb4c 	bl	800105e <HAL_NVIC_EnableIRQ>

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b37      	ldr	r3, [pc, #220]	; (8000acc <MX_GPIO_Init+0xf8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a36      	ldr	r2, [pc, #216]	; (8000acc <MX_GPIO_Init+0xf8>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b34      	ldr	r3, [pc, #208]	; (8000acc <MX_GPIO_Init+0xf8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <MX_GPIO_Init+0xf8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a2f      	ldr	r2, [pc, #188]	; (8000acc <MX_GPIO_Init+0xf8>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <MX_GPIO_Init+0xf8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_GPIO_Init+0xf8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a28      	ldr	r2, [pc, #160]	; (8000acc <MX_GPIO_Init+0xf8>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_GPIO_Init+0xf8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_GPIO_Init+0xf8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a21      	ldr	r2, [pc, #132]	; (8000acc <MX_GPIO_Init+0xf8>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_GPIO_Init+0xf8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <MX_GPIO_Init+0xfc>)
 8000a60:	f001 f8b6 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000a6a:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <MX_GPIO_Init+0x100>)
 8000a6c:	f001 f8b0 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 8000a70:	f243 030c 	movw	r3, #12300	; 0x300c
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_GPIO_Init+0x100>)
 8000a86:	f000 ff07 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <MX_GPIO_Init+0xfc>)
 8000aa2:	f000 fef9 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000aa6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_GPIO_Init+0x100>)
 8000ac0:	f000 feea 	bl	8001898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b22:	2007      	movs	r0, #7
 8000b24:	f000 fa74 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800

08000b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b44:	d115      	bne.n	8000b72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_TIM_Base_MspInit+0x48>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <HAL_TIM_Base_MspInit+0x48>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_TIM_Base_MspInit+0x48>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	201c      	movs	r0, #28
 8000b68:	f000 fa5d 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b6c:	201c      	movs	r0, #28
 8000b6e:	f000 fa76 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a34      	ldr	r2, [pc, #208]	; (8000c70 <HAL_UART_MspInit+0xf0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d161      	bne.n	8000c66 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_UART_MspInit+0xf4>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a32      	ldr	r2, [pc, #200]	; (8000c74 <HAL_UART_MspInit+0xf4>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <HAL_UART_MspInit+0xf4>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <HAL_UART_MspInit+0xf4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a2b      	ldr	r2, [pc, #172]	; (8000c74 <HAL_UART_MspInit+0xf4>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <HAL_UART_MspInit+0xf4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bea:	2307      	movs	r3, #7
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4820      	ldr	r0, [pc, #128]	; (8000c78 <HAL_UART_MspInit+0xf8>)
 8000bf6:	f000 fe4f 	bl	8001898 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000bfc:	4a20      	ldr	r2, [pc, #128]	; (8000c80 <HAL_UART_MspInit+0x100>)
 8000bfe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c06:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c0a:	2240      	movs	r2, #64	; 0x40
 8000c0c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c3a:	4810      	ldr	r0, [pc, #64]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c3c:	f000 fa2a 	bl	8001094 <HAL_DMA_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000c46:	f7ff ff47 	bl	8000ad8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2026      	movs	r0, #38	; 0x26
 8000c5c:	f000 f9e3 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c60:	2026      	movs	r0, #38	; 0x26
 8000c62:	f000 f9fc 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	200000c4 	.word	0x200000c4
 8000c80:	400260a0 	.word	0x400260a0

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8ae 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <DMA1_Stream6_IRQHandler+0x10>)
 8000cde:	f000 fb71 	bl	80013c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000c4 	.word	0x200000c4

08000cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <TIM2_IRQHandler+0x10>)
 8000cf2:	f001 fcd1 	bl	8002698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000038 	.word	0x20000038

08000d00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <USART2_IRQHandler+0x10>)
 8000d06:	f002 f927 	bl	8002f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000080 	.word	0x20000080

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d62:	f7ff ffd7 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f003 f89d 	bl	8003ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fcc1 	bl	80006f0 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d7c:	08003f34 	.word	0x08003f34
  ldr r2, =_sbss
 8000d80:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d84:	200001ec 	.word	0x200001ec

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f92b 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fe90 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f943 	bl	800107a <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e0c:	f000 f90b 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000010 	.word	0x20000010
 8000e28:	20000018 	.word	0x20000018
 8000e2c:	20000014 	.word	0x20000014

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000018 	.word	0x20000018
 8000e54:	200001e8 	.word	0x200001e8

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200001e8 	.word	0x200001e8

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff29 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff3e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff feda 	bl	8000e58 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e099      	b.n	80011e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2202      	movs	r2, #2
 80010b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d0:	e00f      	b.n	80010f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010d2:	f7ff fec1 	bl	8000e58 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d908      	bls.n	80010f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2220      	movs	r2, #32
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e078      	b.n	80011e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e8      	bne.n	80010d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <HAL_DMA_Init+0x158>)
 800110c:	4013      	ands	r3, r2
 800110e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800111e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800112a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001136:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4313      	orrs	r3, r2
 8001142:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	2b04      	cmp	r3, #4
 800114a:	d107      	bne.n	800115c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4313      	orrs	r3, r2
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f023 0307 	bic.w	r3, r3, #7
 8001172:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	4313      	orrs	r3, r2
 800117c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	2b04      	cmp	r3, #4
 8001184:	d117      	bne.n	80011b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4313      	orrs	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00e      	beq.n	80011b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 fb01 	bl	80017a0 <DMA_CheckFifoParam>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011b2:	2301      	movs	r3, #1
 80011b4:	e016      	b.n	80011e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fab8 	bl	8001734 <DMA_CalcBaseAndBitshift>
 80011c4:	4603      	mov	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	223f      	movs	r2, #63	; 0x3f
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	f010803f 	.word	0xf010803f

080011f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800120e:	2b01      	cmp	r3, #1
 8001210:	d101      	bne.n	8001216 <HAL_DMA_Start_IT+0x26>
 8001212:	2302      	movs	r3, #2
 8001214:	e040      	b.n	8001298 <HAL_DMA_Start_IT+0xa8>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d12f      	bne.n	800128a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2202      	movs	r2, #2
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 fa4a 	bl	80016d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	223f      	movs	r2, #63	; 0x3f
 800124a:	409a      	lsls	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0216 	orr.w	r2, r2, #22
 800125e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0208 	orr.w	r2, r2, #8
 8001276:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0201 	orr.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e005      	b.n	8001296 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001292:	2302      	movs	r3, #2
 8001294:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001296:	7dfb      	ldrb	r3, [r7, #23]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012ae:	f7ff fdd3 	bl	8000e58 <HAL_GetTick>
 80012b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d008      	beq.n	80012d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e052      	b.n	8001378 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0216 	bic.w	r2, r2, #22
 80012e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <HAL_DMA_Abort+0x62>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0208 	bic.w	r2, r2, #8
 8001310:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001322:	e013      	b.n	800134c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001324:	f7ff fd98 	bl	8000e58 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b05      	cmp	r3, #5
 8001330:	d90c      	bls.n	800134c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2220      	movs	r2, #32
 8001336:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2203      	movs	r2, #3
 800133c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e015      	b.n	8001378 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1e4      	bne.n	8001324 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135e:	223f      	movs	r2, #63	; 0x3f
 8001360:	409a      	lsls	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d004      	beq.n	800139e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00c      	b.n	80013b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2205      	movs	r2, #5
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0201 	bic.w	r2, r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013d0:	4b8e      	ldr	r3, [pc, #568]	; (800160c <HAL_DMA_IRQHandler+0x248>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a8e      	ldr	r2, [pc, #568]	; (8001610 <HAL_DMA_IRQHandler+0x24c>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0a9b      	lsrs	r3, r3, #10
 80013dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	2208      	movs	r2, #8
 80013f0:	409a      	lsls	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d01a      	beq.n	8001430 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0204 	bic.w	r2, r2, #4
 8001416:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141c:	2208      	movs	r2, #8
 800141e:	409a      	lsls	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	f043 0201 	orr.w	r2, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	2201      	movs	r2, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d012      	beq.n	8001466 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001452:	2201      	movs	r2, #1
 8001454:	409a      	lsls	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145e:	f043 0202 	orr.w	r2, r3, #2
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	2204      	movs	r2, #4
 800146c:	409a      	lsls	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d012      	beq.n	800149c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00b      	beq.n	800149c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	2204      	movs	r2, #4
 800148a:	409a      	lsls	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001494:	f043 0204 	orr.w	r2, r3, #4
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	2210      	movs	r2, #16
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d043      	beq.n	8001534 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d03c      	beq.n	8001534 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014be:	2210      	movs	r2, #16
 80014c0:	409a      	lsls	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d018      	beq.n	8001506 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d108      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d024      	beq.n	8001534 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	4798      	blx	r3
 80014f2:	e01f      	b.n	8001534 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01b      	beq.n	8001534 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
 8001504:	e016      	b.n	8001534 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d107      	bne.n	8001524 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0208 	bic.w	r2, r2, #8
 8001522:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	2220      	movs	r2, #32
 800153a:	409a      	lsls	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 808f 	beq.w	8001664 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8087 	beq.w	8001664 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	2220      	movs	r2, #32
 800155c:	409a      	lsls	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b05      	cmp	r3, #5
 800156c:	d136      	bne.n	80015dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0216 	bic.w	r2, r2, #22
 800157c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800158c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d103      	bne.n	800159e <HAL_DMA_IRQHandler+0x1da>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159a:	2b00      	cmp	r3, #0
 800159c:	d007      	beq.n	80015ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0208 	bic.w	r2, r2, #8
 80015ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	223f      	movs	r2, #63	; 0x3f
 80015b4:	409a      	lsls	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d07e      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	4798      	blx	r3
        }
        return;
 80015da:	e079      	b.n	80016d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01d      	beq.n	8001626 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10d      	bne.n	8001614 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d031      	beq.n	8001664 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	4798      	blx	r3
 8001608:	e02c      	b.n	8001664 <HAL_DMA_IRQHandler+0x2a0>
 800160a:	bf00      	nop
 800160c:	20000010 	.word	0x20000010
 8001610:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001618:	2b00      	cmp	r3, #0
 800161a:	d023      	beq.n	8001664 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
 8001624:	e01e      	b.n	8001664 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10f      	bne.n	8001654 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0210 	bic.w	r2, r2, #16
 8001642:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	2b00      	cmp	r3, #0
 800166a:	d032      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d022      	beq.n	80016be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2205      	movs	r2, #5
 800167c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3301      	adds	r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	429a      	cmp	r2, r3
 800169a:	d307      	bcc.n	80016ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f2      	bne.n	8001690 <HAL_DMA_IRQHandler+0x2cc>
 80016aa:	e000      	b.n	80016ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	4798      	blx	r3
 80016ce:	e000      	b.n	80016d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80016d0:	bf00      	nop
    }
  }
}
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b40      	cmp	r3, #64	; 0x40
 8001704:	d108      	bne.n	8001718 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001716:	e007      	b.n	8001728 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	60da      	str	r2, [r3, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	3b10      	subs	r3, #16
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <DMA_CalcBaseAndBitshift+0x64>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800174e:	4a13      	ldr	r2, [pc, #76]	; (800179c <DMA_CalcBaseAndBitshift+0x68>)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d909      	bls.n	8001776 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800176a:	f023 0303 	bic.w	r3, r3, #3
 800176e:	1d1a      	adds	r2, r3, #4
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	659a      	str	r2, [r3, #88]	; 0x58
 8001774:	e007      	b.n	8001786 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800177e:	f023 0303 	bic.w	r3, r3, #3
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	aaaaaaab 	.word	0xaaaaaaab
 800179c:	08003f1c 	.word	0x08003f1c

080017a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d11f      	bne.n	80017fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d856      	bhi.n	800186e <DMA_CheckFifoParam+0xce>
 80017c0:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <DMA_CheckFifoParam+0x28>)
 80017c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c6:	bf00      	nop
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	080017eb 	.word	0x080017eb
 80017d0:	080017d9 	.word	0x080017d9
 80017d4:	0800186f 	.word	0x0800186f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d046      	beq.n	8001872 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e8:	e043      	b.n	8001872 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017f2:	d140      	bne.n	8001876 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f8:	e03d      	b.n	8001876 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001802:	d121      	bne.n	8001848 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d837      	bhi.n	800187a <DMA_CheckFifoParam+0xda>
 800180a:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <DMA_CheckFifoParam+0x70>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	08001821 	.word	0x08001821
 8001814:	08001827 	.word	0x08001827
 8001818:	08001821 	.word	0x08001821
 800181c:	08001839 	.word	0x08001839
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
      break;
 8001824:	e030      	b.n	8001888 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d025      	beq.n	800187e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001836:	e022      	b.n	800187e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001840:	d11f      	bne.n	8001882 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001846:	e01c      	b.n	8001882 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d903      	bls.n	8001856 <DMA_CheckFifoParam+0xb6>
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d003      	beq.n	800185c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001854:	e018      	b.n	8001888 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
      break;
 800185a:	e015      	b.n	8001888 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00e      	beq.n	8001886 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
      break;
 800186c:	e00b      	b.n	8001886 <DMA_CheckFifoParam+0xe6>
      break;
 800186e:	bf00      	nop
 8001870:	e00a      	b.n	8001888 <DMA_CheckFifoParam+0xe8>
      break;
 8001872:	bf00      	nop
 8001874:	e008      	b.n	8001888 <DMA_CheckFifoParam+0xe8>
      break;
 8001876:	bf00      	nop
 8001878:	e006      	b.n	8001888 <DMA_CheckFifoParam+0xe8>
      break;
 800187a:	bf00      	nop
 800187c:	e004      	b.n	8001888 <DMA_CheckFifoParam+0xe8>
      break;
 800187e:	bf00      	nop
 8001880:	e002      	b.n	8001888 <DMA_CheckFifoParam+0xe8>
      break;   
 8001882:	bf00      	nop
 8001884:	e000      	b.n	8001888 <DMA_CheckFifoParam+0xe8>
      break;
 8001886:	bf00      	nop
    }
  } 
  
  return status; 
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	e159      	b.n	8001b68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 8148 	bne.w	8001b62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d005      	beq.n	80018ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d130      	bne.n	800194c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 0201 	and.w	r2, r3, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b03      	cmp	r3, #3
 8001956:	d017      	beq.n	8001988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d123      	bne.n	80019dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80a2 	beq.w	8001b62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3a:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_GPIO_Init+0x2ec>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a49      	ldr	r2, [pc, #292]	; (8001b88 <HAL_GPIO_Init+0x2f0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d019      	beq.n	8001a9a <HAL_GPIO_Init+0x202>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a48      	ldr	r2, [pc, #288]	; (8001b8c <HAL_GPIO_Init+0x2f4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x1fe>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a47      	ldr	r2, [pc, #284]	; (8001b90 <HAL_GPIO_Init+0x2f8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x1fa>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a46      	ldr	r2, [pc, #280]	; (8001b94 <HAL_GPIO_Init+0x2fc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x1f6>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a45      	ldr	r2, [pc, #276]	; (8001b98 <HAL_GPIO_Init+0x300>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x1f2>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_GPIO_Init+0x2ec>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ade:	4a2f      	ldr	r2, [pc, #188]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b08:	4a24      	ldr	r2, [pc, #144]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b32:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f aea2 	bls.w	80018b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e001      	b.n	8001bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bec:	e003      	b.n	8001bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bee:	887b      	ldrh	r3, [r7, #2]
 8001bf0:	041a      	lsls	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e267      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d075      	beq.n	8001d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c22:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d00c      	beq.n	8001c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2e:	4b85      	ldr	r3, [pc, #532]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d112      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3a:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c46:	d10b      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	4b7e      	ldr	r3, [pc, #504]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d05b      	beq.n	8001d0c <HAL_RCC_OscConfig+0x108>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d157      	bne.n	8001d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e242      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c68:	d106      	bne.n	8001c78 <HAL_RCC_OscConfig+0x74>
 8001c6a:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a75      	ldr	r2, [pc, #468]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb0>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b70      	ldr	r3, [pc, #448]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6f      	ldr	r2, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6c      	ldr	r2, [pc, #432]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb0>
 8001c9c:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a68      	ldr	r2, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b66      	ldr	r3, [pc, #408]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a65      	ldr	r2, [pc, #404]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f8cc 	bl	8000e58 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f8c8 	bl	8000e58 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e207      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xc0>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f8b8 	bl	8000e58 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff f8b4 	bl	8000e58 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1f3      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0xe8>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d063      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d26:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d32:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x152>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1c7      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4937      	ldr	r1, [pc, #220]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e03a      	b.n	8001de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f86d 	bl	8000e58 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff f869 	bl	8000e58 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1a8      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4925      	ldr	r1, [pc, #148]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f84c 	bl	8000e58 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f848 	bl	8000e58 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e187      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d036      	beq.n	8001e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_RCC_OscConfig+0x248>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f82c 	bl	8000e58 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff f828 	bl	8000e58 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e167      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x200>
 8001e22:	e01b      	b.n	8001e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_OscConfig+0x248>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f815 	bl	8000e58 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	e00e      	b.n	8001e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e32:	f7ff f811 	bl	8000e58 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d907      	bls.n	8001e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e150      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
 8001e44:	40023800 	.word	0x40023800
 8001e48:	42470000 	.word	0x42470000
 8001e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	4b88      	ldr	r3, [pc, #544]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ea      	bne.n	8001e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8097 	beq.w	8001f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6e:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10f      	bne.n	8001e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a7c      	ldr	r2, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b7a      	ldr	r3, [pc, #488]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e96:	2301      	movs	r3, #1
 8001e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9a:	4b77      	ldr	r3, [pc, #476]	; (8002078 <HAL_RCC_OscConfig+0x474>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d118      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea6:	4b74      	ldr	r3, [pc, #464]	; (8002078 <HAL_RCC_OscConfig+0x474>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a73      	ldr	r2, [pc, #460]	; (8002078 <HAL_RCC_OscConfig+0x474>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb2:	f7fe ffd1 	bl	8000e58 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7fe ffcd 	bl	8000e58 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e10c      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_OscConfig+0x474>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x2ea>
 8001ee0:	4b64      	ldr	r3, [pc, #400]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4a63      	ldr	r2, [pc, #396]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70
 8001eec:	e01c      	b.n	8001f28 <HAL_RCC_OscConfig+0x324>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x30c>
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	4a5e      	ldr	r2, [pc, #376]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6713      	str	r3, [r2, #112]	; 0x70
 8001f02:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	4a5b      	ldr	r2, [pc, #364]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0x324>
 8001f10:	4b58      	ldr	r3, [pc, #352]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4a57      	ldr	r2, [pc, #348]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1c:	4b55      	ldr	r3, [pc, #340]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a54      	ldr	r2, [pc, #336]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f22:	f023 0304 	bic.w	r3, r3, #4
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d015      	beq.n	8001f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7fe ff92 	bl	8000e58 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f38:	f7fe ff8e 	bl	8000e58 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0cb      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0ee      	beq.n	8001f38 <HAL_RCC_OscConfig+0x334>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5c:	f7fe ff7c 	bl	8000e58 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f7fe ff78 	bl	8000e58 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e0b5      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ee      	bne.n	8001f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	4a38      	ldr	r2, [pc, #224]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80a1 	beq.w	80020e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa2:	4b34      	ldr	r3, [pc, #208]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d05c      	beq.n	8002068 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d141      	bne.n	800203a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_RCC_OscConfig+0x478>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ff4c 	bl	8000e58 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe ff48 	bl	8000e58 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e087      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	019b      	lsls	r3, r3, #6
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	491b      	ldr	r1, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_RCC_OscConfig+0x478>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7fe ff21 	bl	8000e58 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201a:	f7fe ff1d 	bl	8000e58 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e05c      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x416>
 8002038:	e054      	b.n	80020e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_RCC_OscConfig+0x478>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe ff0a 	bl	8000e58 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe ff06 	bl	8000e58 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e045      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x444>
 8002066:	e03d      	b.n	80020e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e038      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
 8002074:	40023800 	.word	0x40023800
 8002078:	40007000 	.word	0x40007000
 800207c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_RCC_OscConfig+0x4ec>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d028      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d121      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d11a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020b0:	4013      	ands	r3, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d111      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800

080020f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0cc      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002108:	4b68      	ldr	r3, [pc, #416]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d90c      	bls.n	8002130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b65      	ldr	r3, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d044      	beq.n	8002214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d119      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e067      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 0203 	bic.w	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4934      	ldr	r1, [pc, #208]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e4:	f7fe fe38 	bl	8000e58 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7fe fe34 	bl	8000e58 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e04f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 020c 	and.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	429a      	cmp	r2, r3
 8002212:	d1eb      	bne.n	80021ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d20c      	bcs.n	800223c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fd98 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00
 80022b0:	40023800 	.word	0x40023800
 80022b4:	08003f04 	.word	0x08003f04
 80022b8:	20000010 	.word	0x20000010
 80022bc:	20000014 	.word	0x20000014

080022c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c4:	b094      	sub	sp, #80	; 0x50
 80022c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
 80022cc:	2300      	movs	r3, #0
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d0:	2300      	movs	r3, #0
 80022d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d8:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d00d      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x40>
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	f200 80e1 	bhi.w	80024ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x3a>
 80022f2:	e0db      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022f8:	e0db      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80022fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022fe:	e0d8      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002300:	4b6f      	ldr	r3, [pc, #444]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230a:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d063      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002316:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	2200      	movs	r2, #0
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002320:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
 800232a:	2300      	movs	r3, #0
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
 800232e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002332:	4622      	mov	r2, r4
 8002334:	462b      	mov	r3, r5
 8002336:	f04f 0000 	mov.w	r0, #0
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	0159      	lsls	r1, r3, #5
 8002340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002344:	0150      	lsls	r0, r2, #5
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4621      	mov	r1, r4
 800234c:	1a51      	subs	r1, r2, r1
 800234e:	6139      	str	r1, [r7, #16]
 8002350:	4629      	mov	r1, r5
 8002352:	eb63 0301 	sbc.w	r3, r3, r1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002364:	4659      	mov	r1, fp
 8002366:	018b      	lsls	r3, r1, #6
 8002368:	4651      	mov	r1, sl
 800236a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800236e:	4651      	mov	r1, sl
 8002370:	018a      	lsls	r2, r1, #6
 8002372:	4651      	mov	r1, sl
 8002374:	ebb2 0801 	subs.w	r8, r2, r1
 8002378:	4659      	mov	r1, fp
 800237a:	eb63 0901 	sbc.w	r9, r3, r1
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800238a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800238e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002392:	4690      	mov	r8, r2
 8002394:	4699      	mov	r9, r3
 8002396:	4623      	mov	r3, r4
 8002398:	eb18 0303 	adds.w	r3, r8, r3
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	462b      	mov	r3, r5
 80023a0:	eb49 0303 	adc.w	r3, r9, r3
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023b2:	4629      	mov	r1, r5
 80023b4:	024b      	lsls	r3, r1, #9
 80023b6:	4621      	mov	r1, r4
 80023b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023bc:	4621      	mov	r1, r4
 80023be:	024a      	lsls	r2, r1, #9
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c6:	2200      	movs	r2, #0
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023d0:	f7fd ff00 	bl	80001d4 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023dc:	e058      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	2200      	movs	r2, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	4611      	mov	r1, r2
 80023ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ee:	623b      	str	r3, [r7, #32]
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023f8:	4642      	mov	r2, r8
 80023fa:	464b      	mov	r3, r9
 80023fc:	f04f 0000 	mov.w	r0, #0
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	0159      	lsls	r1, r3, #5
 8002406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240a:	0150      	lsls	r0, r2, #5
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4641      	mov	r1, r8
 8002412:	ebb2 0a01 	subs.w	sl, r2, r1
 8002416:	4649      	mov	r1, r9
 8002418:	eb63 0b01 	sbc.w	fp, r3, r1
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800242c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002430:	ebb2 040a 	subs.w	r4, r2, sl
 8002434:	eb63 050b 	sbc.w	r5, r3, fp
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	00eb      	lsls	r3, r5, #3
 8002442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002446:	00e2      	lsls	r2, r4, #3
 8002448:	4614      	mov	r4, r2
 800244a:	461d      	mov	r5, r3
 800244c:	4643      	mov	r3, r8
 800244e:	18e3      	adds	r3, r4, r3
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	464b      	mov	r3, r9
 8002454:	eb45 0303 	adc.w	r3, r5, r3
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002466:	4629      	mov	r1, r5
 8002468:	028b      	lsls	r3, r1, #10
 800246a:	4621      	mov	r1, r4
 800246c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002470:	4621      	mov	r1, r4
 8002472:	028a      	lsls	r2, r1, #10
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247a:	2200      	movs	r2, #0
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	61fa      	str	r2, [r7, #28]
 8002480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002484:	f7fd fea6 	bl	80001d4 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4613      	mov	r3, r2
 800248e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	3301      	adds	r3, #1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024aa:	e002      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3750      	adds	r7, #80	; 0x50
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	007a1200 	.word	0x007a1200

080024cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000010 	.word	0x20000010

080024e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024e8:	f7ff fff0 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0a9b      	lsrs	r3, r3, #10
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	08003f14 	.word	0x08003f14

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002510:	f7ff ffdc 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0b5b      	lsrs	r3, r3, #13
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	08003f14 	.word	0x08003f14

08002534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e041      	b.n	80025ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe faea 	bl	8000b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3304      	adds	r3, #4
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f000 fa88 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d001      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e044      	b.n	8002676 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <HAL_TIM_Base_Start_IT+0xb0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d018      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x6c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002616:	d013      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x6c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_TIM_Base_Start_IT+0xb4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00e      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x6c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_TIM_Base_Start_IT+0xb8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x6c>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a17      	ldr	r2, [pc, #92]	; (8002690 <HAL_TIM_Base_Start_IT+0xbc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d004      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x6c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_TIM_Base_Start_IT+0xc0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d111      	bne.n	8002664 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d010      	beq.n	8002674 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002662:	e007      	b.n	8002674 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40010000 	.word	0x40010000
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
 8002690:	40000c00 	.word	0x40000c00
 8002694:	40014000 	.word	0x40014000

08002698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d122      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0202 	mvn.w	r2, #2
 80026c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f9b5 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f9a7 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f9b8 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b04      	cmp	r3, #4
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0204 	mvn.w	r2, #4
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f98b 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f97d 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f98e 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b08      	cmp	r3, #8
 8002754:	d122      	bne.n	800279c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b08      	cmp	r3, #8
 8002762:	d11b      	bne.n	800279c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0208 	mvn.w	r2, #8
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2204      	movs	r2, #4
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f961 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f953 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f964 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d122      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d11b      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0210 	mvn.w	r2, #16
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2208      	movs	r2, #8
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f937 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f929 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f93a 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0201 	mvn.w	r2, #1
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fd fe5a 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fab2 	bl	8002dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002860:	2b40      	cmp	r3, #64	; 0x40
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f8ff 	bl	8002a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b20      	cmp	r3, #32
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b20      	cmp	r3, #32
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0220 	mvn.w	r2, #32
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa7c 	bl	8002d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_TIM_ConfigClockSource+0x1c>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e0b4      	b.n	8002a2e <HAL_TIM_ConfigClockSource+0x186>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fc:	d03e      	beq.n	800297c <HAL_TIM_ConfigClockSource+0xd4>
 80028fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002902:	f200 8087 	bhi.w	8002a14 <HAL_TIM_ConfigClockSource+0x16c>
 8002906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290a:	f000 8086 	beq.w	8002a1a <HAL_TIM_ConfigClockSource+0x172>
 800290e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002912:	d87f      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x16c>
 8002914:	2b70      	cmp	r3, #112	; 0x70
 8002916:	d01a      	beq.n	800294e <HAL_TIM_ConfigClockSource+0xa6>
 8002918:	2b70      	cmp	r3, #112	; 0x70
 800291a:	d87b      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x16c>
 800291c:	2b60      	cmp	r3, #96	; 0x60
 800291e:	d050      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002920:	2b60      	cmp	r3, #96	; 0x60
 8002922:	d877      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x16c>
 8002924:	2b50      	cmp	r3, #80	; 0x50
 8002926:	d03c      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002928:	2b50      	cmp	r3, #80	; 0x50
 800292a:	d873      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x16c>
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d058      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d86f      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x16c>
 8002934:	2b30      	cmp	r3, #48	; 0x30
 8002936:	d064      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x15a>
 8002938:	2b30      	cmp	r3, #48	; 0x30
 800293a:	d86b      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x16c>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d060      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x15a>
 8002940:	2b20      	cmp	r3, #32
 8002942:	d867      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x16c>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d05c      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x15a>
 8002948:	2b10      	cmp	r3, #16
 800294a:	d05a      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x15a>
 800294c:	e062      	b.n	8002a14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6899      	ldr	r1, [r3, #8]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f000 f98d 	bl	8002c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	609a      	str	r2, [r3, #8]
      break;
 800297a:	e04f      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6899      	ldr	r1, [r3, #8]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f000 f976 	bl	8002c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800299e:	609a      	str	r2, [r3, #8]
      break;
 80029a0:	e03c      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f000 f8ea 	bl	8002b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2150      	movs	r1, #80	; 0x50
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f943 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 80029c0:	e02c      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f000 f909 	bl	8002be6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2160      	movs	r1, #96	; 0x60
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f933 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 80029e0:	e01c      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f000 f8ca 	bl	8002b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2140      	movs	r1, #64	; 0x40
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f923 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 8002a00:	e00c      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	f000 f91a 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 8002a12:	e003      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      break;
 8002a18:	e000      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <TIM_Base_SetConfig+0xe4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00f      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa6:	d00b      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a31      	ldr	r2, [pc, #196]	; (8002b70 <TIM_Base_SetConfig+0xe8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <TIM_Base_SetConfig+0xec>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <TIM_Base_SetConfig+0xf0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a25      	ldr	r2, [pc, #148]	; (8002b6c <TIM_Base_SetConfig+0xe4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01b      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae0:	d017      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <TIM_Base_SetConfig+0xe8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <TIM_Base_SetConfig+0xec>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00f      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <TIM_Base_SetConfig+0xf0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00b      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <TIM_Base_SetConfig+0xf4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <TIM_Base_SetConfig+0xf8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <TIM_Base_SetConfig+0xfc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d108      	bne.n	8002b24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <TIM_Base_SetConfig+0xe4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d103      	bne.n	8002b58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	615a      	str	r2, [r3, #20]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40000800 	.word	0x40000800
 8002b78:	40000c00 	.word	0x40000c00
 8002b7c:	40014000 	.word	0x40014000
 8002b80:	40014400 	.word	0x40014400
 8002b84:	40014800 	.word	0x40014800

08002b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f023 0201 	bic.w	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f023 030a 	bic.w	r3, r3, #10
 8002bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b087      	sub	sp, #28
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f023 0210 	bic.w	r2, r3, #16
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	031b      	lsls	r3, r3, #12
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	621a      	str	r2, [r3, #32]
}
 8002c3a:	bf00      	nop
 8002c3c:	371c      	adds	r7, #28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f043 0307 	orr.w	r3, r3, #7
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	609a      	str	r2, [r3, #8]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	021a      	lsls	r2, r3, #8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	609a      	str	r2, [r3, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e050      	b.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d018      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d20:	d013      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a16      	ldr	r2, [pc, #88]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10c      	bne.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40000800 	.word	0x40000800
 8002d90:	40000c00 	.word	0x40000c00
 8002d94:	40014000 	.word	0x40014000

08002d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e03f      	b.n	8002e52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd feca 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	; 0x24
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fdd1 	bl	80039ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08c      	sub	sp, #48	; 0x30
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	4613      	mov	r3, r2
 8002e68:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d165      	bne.n	8002f42 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_UART_Transmit_DMA+0x26>
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e05e      	b.n	8002f44 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_UART_Transmit_DMA+0x38>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e057      	b.n	8002f44 <HAL_UART_Transmit_DMA+0xe8>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	88fa      	ldrh	r2, [r7, #6]
 8002ea6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2221      	movs	r2, #33	; 0x21
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec0:	4a22      	ldr	r2, [pc, #136]	; (8002f4c <HAL_UART_Transmit_DMA+0xf0>)
 8002ec2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec8:	4a21      	ldr	r2, [pc, #132]	; (8002f50 <HAL_UART_Transmit_DMA+0xf4>)
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed0:	4a20      	ldr	r2, [pc, #128]	; (8002f54 <HAL_UART_Transmit_DMA+0xf8>)
 8002ed2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	2200      	movs	r2, #0
 8002eda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002edc:	f107 0308 	add.w	r3, r7, #8
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	6819      	ldr	r1, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	f7fe f97c 	bl	80011f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f00:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3314      	adds	r3, #20
 8002f10:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	e853 3f00 	ldrex	r3, [r3]
 8002f18:	617b      	str	r3, [r7, #20]
   return(result);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3314      	adds	r3, #20
 8002f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f2a:	627a      	str	r2, [r7, #36]	; 0x24
 8002f2c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2e:	6a39      	ldr	r1, [r7, #32]
 8002f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e5      	bne.n	8002f0a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e000      	b.n	8002f44 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3730      	adds	r7, #48	; 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	080034dd 	.word	0x080034dd
 8002f50:	08003577 	.word	0x08003577
 8002f54:	08003593 	.word	0x08003593

08002f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b0ba      	sub	sp, #232	; 0xe8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_UART_IRQHandler+0x66>
 8002faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fc3c 	bl	8003834 <UART_Receive_IT>
      return;
 8002fbc:	e256      	b.n	800346c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80de 	beq.w	8003184 <HAL_UART_IRQHandler+0x22c>
 8002fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80d1 	beq.w	8003184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_UART_IRQHandler+0xae>
 8002fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_UART_IRQHandler+0xd2>
 8003012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_UART_IRQHandler+0xf6>
 8003036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f043 0204 	orr.w	r2, r3, #4
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d011      	beq.n	800307e <HAL_UART_IRQHandler+0x126>
 800305a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0208 	orr.w	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 81ed 	beq.w	8003462 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_UART_IRQHandler+0x14e>
 8003094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fbc7 	bl	8003834 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <HAL_UART_IRQHandler+0x17a>
 80030ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d04f      	beq.n	8003172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 facf 	bl	8003676 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d141      	bne.n	800316a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3314      	adds	r3, #20
 80030ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3314      	adds	r3, #20
 800310e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800311e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800312a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1d9      	bne.n	80030e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	2b00      	cmp	r3, #0
 8003138:	d013      	beq.n	8003162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	4a7d      	ldr	r2, [pc, #500]	; (8003334 <HAL_UART_IRQHandler+0x3dc>)
 8003140:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe f91a 	bl	8001380 <HAL_DMA_Abort_IT>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d016      	beq.n	8003180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800315c:	4610      	mov	r0, r2
 800315e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	e00e      	b.n	8003180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f9a4 	bl	80034b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e00a      	b.n	8003180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f9a0 	bl	80034b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e006      	b.n	8003180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f99c 	bl	80034b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800317e:	e170      	b.n	8003462 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	bf00      	nop
    return;
 8003182:	e16e      	b.n	8003462 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	2b01      	cmp	r3, #1
 800318a:	f040 814a 	bne.w	8003422 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800318e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8143 	beq.w	8003422 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800319c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 813c 	beq.w	8003422 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	f040 80b4 	bne.w	8003338 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8140 	beq.w	8003466 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ee:	429a      	cmp	r2, r3
 80031f0:	f080 8139 	bcs.w	8003466 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003206:	f000 8088 	beq.w	800331a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003236:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800323a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800324e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1d9      	bne.n	800320a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3314      	adds	r3, #20
 800325c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3314      	adds	r3, #20
 8003276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800327a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800327e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003282:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003286:	e841 2300 	strex	r3, r2, [r1]
 800328a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800328c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e1      	bne.n	8003256 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3314      	adds	r3, #20
 8003298:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3314      	adds	r3, #20
 80032b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e3      	bne.n	8003292 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e2:	e853 3f00 	ldrex	r3, [r3]
 80032e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ea:	f023 0310 	bic.w	r3, r3, #16
 80032ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80032fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003304:	e841 2300 	strex	r3, r2, [r1]
 8003308:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800330a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e3      	bne.n	80032d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd ffc3 	bl	80012a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003322:	b29b      	uxth	r3, r3
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	b29b      	uxth	r3, r3
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8ca 	bl	80034c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003330:	e099      	b.n	8003466 <HAL_UART_IRQHandler+0x50e>
 8003332:	bf00      	nop
 8003334:	0800373d 	.word	0x0800373d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003340:	b29b      	uxth	r3, r3
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 808b 	beq.w	800346a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8086 	beq.w	800346a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	330c      	adds	r3, #12
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003382:	647a      	str	r2, [r7, #68]	; 0x44
 8003384:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e3      	bne.n	800335e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3314      	adds	r3, #20
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	623b      	str	r3, [r7, #32]
   return(result);
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3314      	adds	r3, #20
 80033b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033ba:	633a      	str	r2, [r7, #48]	; 0x30
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e3      	bne.n	8003396 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0310 	bic.w	r3, r3, #16
 80033f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003400:	61fa      	str	r2, [r7, #28]
 8003402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	617b      	str	r3, [r7, #20]
   return(result);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e3      	bne.n	80033dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f852 	bl	80034c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003420:	e023      	b.n	800346a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <HAL_UART_IRQHandler+0x4ea>
 800342e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f992 	bl	8003764 <UART_Transmit_IT>
    return;
 8003440:	e014      	b.n	800346c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00e      	beq.n	800346c <HAL_UART_IRQHandler+0x514>
 800344e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f9d2 	bl	8003804 <UART_EndTransmit_IT>
    return;
 8003460:	e004      	b.n	800346c <HAL_UART_IRQHandler+0x514>
    return;
 8003462:	bf00      	nop
 8003464:	e002      	b.n	800346c <HAL_UART_IRQHandler+0x514>
      return;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_UART_IRQHandler+0x514>
      return;
 800346a:	bf00      	nop
  }
}
 800346c:	37e8      	adds	r7, #232	; 0xe8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop

08003474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b090      	sub	sp, #64	; 0x40
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d137      	bne.n	8003568 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	2200      	movs	r2, #0
 80034fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3314      	adds	r3, #20
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	623b      	str	r3, [r7, #32]
   return(result);
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
 8003516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3314      	adds	r3, #20
 800351c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800351e:	633a      	str	r2, [r7, #48]	; 0x30
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e5      	bne.n	80034fe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	60fb      	str	r3, [r7, #12]
   return(result);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
 800354a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003552:	61fa      	str	r2, [r7, #28]
 8003554:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	69b9      	ldr	r1, [r7, #24]
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	617b      	str	r3, [r7, #20]
   return(result);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e5      	bne.n	8003532 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003566:	e002      	b.n	800356e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003568:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800356a:	f7ff ff83 	bl	8003474 <HAL_UART_TxCpltCallback>
}
 800356e:	bf00      	nop
 8003570:	3740      	adds	r7, #64	; 0x40
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff ff7f 	bl	8003488 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b21      	cmp	r3, #33	; 0x21
 80035c4:	d108      	bne.n	80035d8 <UART_DMAError+0x46>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80035d2:	68b8      	ldr	r0, [r7, #8]
 80035d4:	f000 f827 	bl	8003626 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b22      	cmp	r3, #34	; 0x22
 80035f8:	d108      	bne.n	800360c <UART_DMAError+0x7a>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2200      	movs	r2, #0
 8003604:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003606:	68b8      	ldr	r0, [r7, #8]
 8003608:	f000 f835 	bl	8003676 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	f043 0210 	orr.w	r2, r3, #16
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003618:	68b8      	ldr	r0, [r7, #8]
 800361a:	f7ff ff49 	bl	80034b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003626:	b480      	push	{r7}
 8003628:	b089      	sub	sp, #36	; 0x24
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	60bb      	str	r3, [r7, #8]
   return(result);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	61ba      	str	r2, [r7, #24]
 8003650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	613b      	str	r3, [r7, #16]
   return(result);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e5      	bne.n	800362e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800366a:	bf00      	nop
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003676:	b480      	push	{r7}
 8003678:	b095      	sub	sp, #84	; 0x54
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003694:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	330c      	adds	r3, #12
 800369c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800369e:	643a      	str	r2, [r7, #64]	; 0x40
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e5      	bne.n	800367e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3314      	adds	r3, #20
 80036b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3314      	adds	r3, #20
 80036d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e5      	bne.n	80036b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d119      	bne.n	8003722 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f023 0310 	bic.w	r3, r3, #16
 8003704:	647b      	str	r3, [r7, #68]	; 0x44
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800370e:	61ba      	str	r2, [r7, #24]
 8003710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	6979      	ldr	r1, [r7, #20]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	613b      	str	r3, [r7, #16]
   return(result);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e5      	bne.n	80036ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003730:	bf00      	nop
 8003732:	3754      	adds	r7, #84	; 0x54
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff feaa 	bl	80034b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b21      	cmp	r3, #33	; 0x21
 8003776:	d13e      	bne.n	80037f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003780:	d114      	bne.n	80037ac <UART_Transmit_IT+0x48>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d110      	bne.n	80037ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	1c9a      	adds	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]
 80037aa:	e008      	b.n	80037be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	1c59      	adds	r1, r3, #1
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6211      	str	r1, [r2, #32]
 80037b6:	781a      	ldrb	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4619      	mov	r1, r3
 80037cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037f6:	2302      	movs	r3, #2
  }
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fe25 	bl	8003474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08c      	sub	sp, #48	; 0x30
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b22      	cmp	r3, #34	; 0x22
 8003846:	f040 80ab 	bne.w	80039a0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003852:	d117      	bne.n	8003884 <UART_Receive_IT+0x50>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d113      	bne.n	8003884 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003872:	b29a      	uxth	r2, r3
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	1c9a      	adds	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	629a      	str	r2, [r3, #40]	; 0x28
 8003882:	e026      	b.n	80038d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003896:	d007      	beq.n	80038a8 <UART_Receive_IT+0x74>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <UART_Receive_IT+0x82>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	e008      	b.n	80038c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29b      	uxth	r3, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4619      	mov	r1, r3
 80038e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d15a      	bne.n	800399c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0220 	bic.w	r2, r2, #32
 80038f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003904:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	2b01      	cmp	r3, #1
 8003924:	d135      	bne.n	8003992 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	613b      	str	r3, [r7, #16]
   return(result);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f023 0310 	bic.w	r3, r3, #16
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394c:	623a      	str	r2, [r7, #32]
 800394e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	69f9      	ldr	r1, [r7, #28]
 8003952:	6a3a      	ldr	r2, [r7, #32]
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	61bb      	str	r3, [r7, #24]
   return(result);
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e5      	bne.n	800392c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b10      	cmp	r3, #16
 800396c:	d10a      	bne.n	8003984 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003988:	4619      	mov	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fd9a 	bl	80034c4 <HAL_UARTEx_RxEventCallback>
 8003990:	e002      	b.n	8003998 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fd82 	bl	800349c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e002      	b.n	80039a2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	e000      	b.n	80039a2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
  }
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3730      	adds	r7, #48	; 0x30
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b0:	b0c0      	sub	sp, #256	; 0x100
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	68d9      	ldr	r1, [r3, #12]
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	ea40 0301 	orr.w	r3, r0, r1
 80039d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a04:	f021 010c 	bic.w	r1, r1, #12
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a12:	430b      	orrs	r3, r1
 8003a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	6999      	ldr	r1, [r3, #24]
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	ea40 0301 	orr.w	r3, r0, r1
 8003a32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b8f      	ldr	r3, [pc, #572]	; (8003c78 <UART_SetConfig+0x2cc>)
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d005      	beq.n	8003a4c <UART_SetConfig+0xa0>
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b8d      	ldr	r3, [pc, #564]	; (8003c7c <UART_SetConfig+0x2d0>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d104      	bne.n	8003a56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a4c:	f7fe fd5e 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003a50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a54:	e003      	b.n	8003a5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a56:	f7fe fd45 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8003a5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a68:	f040 810c 	bne.w	8003c84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a7e:	4622      	mov	r2, r4
 8003a80:	462b      	mov	r3, r5
 8003a82:	1891      	adds	r1, r2, r2
 8003a84:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a86:	415b      	adcs	r3, r3
 8003a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a8e:	4621      	mov	r1, r4
 8003a90:	eb12 0801 	adds.w	r8, r2, r1
 8003a94:	4629      	mov	r1, r5
 8003a96:	eb43 0901 	adc.w	r9, r3, r1
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aae:	4690      	mov	r8, r2
 8003ab0:	4699      	mov	r9, r3
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	eb18 0303 	adds.w	r3, r8, r3
 8003ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003abc:	462b      	mov	r3, r5
 8003abe:	eb49 0303 	adc.w	r3, r9, r3
 8003ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ada:	460b      	mov	r3, r1
 8003adc:	18db      	adds	r3, r3, r3
 8003ade:	653b      	str	r3, [r7, #80]	; 0x50
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	eb42 0303 	adc.w	r3, r2, r3
 8003ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003aec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003af0:	f7fc fb70 	bl	80001d4 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4b61      	ldr	r3, [pc, #388]	; (8003c80 <UART_SetConfig+0x2d4>)
 8003afa:	fba3 2302 	umull	r2, r3, r3, r2
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	011c      	lsls	r4, r3, #4
 8003b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b14:	4642      	mov	r2, r8
 8003b16:	464b      	mov	r3, r9
 8003b18:	1891      	adds	r1, r2, r2
 8003b1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b1c:	415b      	adcs	r3, r3
 8003b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b24:	4641      	mov	r1, r8
 8003b26:	eb12 0a01 	adds.w	sl, r2, r1
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b44:	4692      	mov	sl, r2
 8003b46:	469b      	mov	fp, r3
 8003b48:	4643      	mov	r3, r8
 8003b4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b52:	464b      	mov	r3, r9
 8003b54:	eb4b 0303 	adc.w	r3, fp, r3
 8003b58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b70:	460b      	mov	r3, r1
 8003b72:	18db      	adds	r3, r3, r3
 8003b74:	643b      	str	r3, [r7, #64]	; 0x40
 8003b76:	4613      	mov	r3, r2
 8003b78:	eb42 0303 	adc.w	r3, r2, r3
 8003b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b86:	f7fc fb25 	bl	80001d4 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <UART_SetConfig+0x2d4>)
 8003b92:	fba3 2301 	umull	r2, r3, r3, r1
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2264      	movs	r2, #100	; 0x64
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	1acb      	subs	r3, r1, r3
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ba6:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <UART_SetConfig+0x2d4>)
 8003ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb4:	441c      	add	r4, r3
 8003bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bc8:	4642      	mov	r2, r8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	1891      	adds	r1, r2, r2
 8003bce:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bd0:	415b      	adcs	r3, r3
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bd8:	4641      	mov	r1, r8
 8003bda:	1851      	adds	r1, r2, r1
 8003bdc:	6339      	str	r1, [r7, #48]	; 0x30
 8003bde:	4649      	mov	r1, r9
 8003be0:	414b      	adcs	r3, r1
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bf0:	4659      	mov	r1, fp
 8003bf2:	00cb      	lsls	r3, r1, #3
 8003bf4:	4651      	mov	r1, sl
 8003bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bfa:	4651      	mov	r1, sl
 8003bfc:	00ca      	lsls	r2, r1, #3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	4642      	mov	r2, r8
 8003c06:	189b      	adds	r3, r3, r2
 8003c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	460a      	mov	r2, r1
 8003c10:	eb42 0303 	adc.w	r3, r2, r3
 8003c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	18db      	adds	r3, r3, r3
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c32:	4613      	mov	r3, r2
 8003c34:	eb42 0303 	adc.w	r3, r2, r3
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c42:	f7fc fac7 	bl	80001d4 <__aeabi_uldivmod>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <UART_SetConfig+0x2d4>)
 8003c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	2164      	movs	r1, #100	; 0x64
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	3332      	adds	r3, #50	; 0x32
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <UART_SetConfig+0x2d4>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	f003 0207 	and.w	r2, r3, #7
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4422      	add	r2, r4
 8003c72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c74:	e106      	b.n	8003e84 <UART_SetConfig+0x4d8>
 8003c76:	bf00      	nop
 8003c78:	40011000 	.word	0x40011000
 8003c7c:	40011400 	.word	0x40011400
 8003c80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c96:	4642      	mov	r2, r8
 8003c98:	464b      	mov	r3, r9
 8003c9a:	1891      	adds	r1, r2, r2
 8003c9c:	6239      	str	r1, [r7, #32]
 8003c9e:	415b      	adcs	r3, r3
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	1854      	adds	r4, r2, r1
 8003caa:	4649      	mov	r1, r9
 8003cac:	eb43 0501 	adc.w	r5, r3, r1
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	00eb      	lsls	r3, r5, #3
 8003cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cbe:	00e2      	lsls	r2, r4, #3
 8003cc0:	4614      	mov	r4, r2
 8003cc2:	461d      	mov	r5, r3
 8003cc4:	4643      	mov	r3, r8
 8003cc6:	18e3      	adds	r3, r4, r3
 8003cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ccc:	464b      	mov	r3, r9
 8003cce:	eb45 0303 	adc.w	r3, r5, r3
 8003cd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	008b      	lsls	r3, r1, #2
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	008a      	lsls	r2, r1, #2
 8003d00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d04:	f7fc fa66 	bl	80001d4 <__aeabi_uldivmod>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4b60      	ldr	r3, [pc, #384]	; (8003e90 <UART_SetConfig+0x4e4>)
 8003d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	011c      	lsls	r4, r3, #4
 8003d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d28:	4642      	mov	r2, r8
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	1891      	adds	r1, r2, r2
 8003d2e:	61b9      	str	r1, [r7, #24]
 8003d30:	415b      	adcs	r3, r3
 8003d32:	61fb      	str	r3, [r7, #28]
 8003d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d38:	4641      	mov	r1, r8
 8003d3a:	1851      	adds	r1, r2, r1
 8003d3c:	6139      	str	r1, [r7, #16]
 8003d3e:	4649      	mov	r1, r9
 8003d40:	414b      	adcs	r3, r1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d50:	4659      	mov	r1, fp
 8003d52:	00cb      	lsls	r3, r1, #3
 8003d54:	4651      	mov	r1, sl
 8003d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	00ca      	lsls	r2, r1, #3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	4642      	mov	r2, r8
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	460a      	mov	r2, r1
 8003d70:	eb42 0303 	adc.w	r3, r2, r3
 8003d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d90:	4649      	mov	r1, r9
 8003d92:	008b      	lsls	r3, r1, #2
 8003d94:	4641      	mov	r1, r8
 8003d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	008a      	lsls	r2, r1, #2
 8003d9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003da2:	f7fc fa17 	bl	80001d4 <__aeabi_uldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4611      	mov	r1, r2
 8003dac:	4b38      	ldr	r3, [pc, #224]	; (8003e90 <UART_SetConfig+0x4e4>)
 8003dae:	fba3 2301 	umull	r2, r3, r3, r1
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	2264      	movs	r2, #100	; 0x64
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	1acb      	subs	r3, r1, r3
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	3332      	adds	r3, #50	; 0x32
 8003dc0:	4a33      	ldr	r2, [pc, #204]	; (8003e90 <UART_SetConfig+0x4e4>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dcc:	441c      	add	r4, r3
 8003dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	673b      	str	r3, [r7, #112]	; 0x70
 8003dd6:	677a      	str	r2, [r7, #116]	; 0x74
 8003dd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ddc:	4642      	mov	r2, r8
 8003dde:	464b      	mov	r3, r9
 8003de0:	1891      	adds	r1, r2, r2
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	415b      	adcs	r3, r3
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dec:	4641      	mov	r1, r8
 8003dee:	1851      	adds	r1, r2, r1
 8003df0:	6039      	str	r1, [r7, #0]
 8003df2:	4649      	mov	r1, r9
 8003df4:	414b      	adcs	r3, r1
 8003df6:	607b      	str	r3, [r7, #4]
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e04:	4659      	mov	r1, fp
 8003e06:	00cb      	lsls	r3, r1, #3
 8003e08:	4651      	mov	r1, sl
 8003e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e0e:	4651      	mov	r1, sl
 8003e10:	00ca      	lsls	r2, r1, #3
 8003e12:	4610      	mov	r0, r2
 8003e14:	4619      	mov	r1, r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	4642      	mov	r2, r8
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e1e:	464b      	mov	r3, r9
 8003e20:	460a      	mov	r2, r1
 8003e22:	eb42 0303 	adc.w	r3, r2, r3
 8003e26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	663b      	str	r3, [r7, #96]	; 0x60
 8003e32:	667a      	str	r2, [r7, #100]	; 0x64
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e40:	4649      	mov	r1, r9
 8003e42:	008b      	lsls	r3, r1, #2
 8003e44:	4641      	mov	r1, r8
 8003e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e4a:	4641      	mov	r1, r8
 8003e4c:	008a      	lsls	r2, r1, #2
 8003e4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e52:	f7fc f9bf 	bl	80001d4 <__aeabi_uldivmod>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <UART_SetConfig+0x4e4>)
 8003e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	2164      	movs	r1, #100	; 0x64
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	3332      	adds	r3, #50	; 0x32
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <UART_SetConfig+0x4e4>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4422      	add	r2, r4
 8003e82:	609a      	str	r2, [r3, #8]
}
 8003e84:	bf00      	nop
 8003e86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e90:	51eb851f 	.word	0x51eb851f

08003e94 <memset>:
 8003e94:	4402      	add	r2, r0
 8003e96:	4603      	mov	r3, r0
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <memset+0xa>
 8003e9c:	4770      	bx	lr
 8003e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea2:	e7f9      	b.n	8003e98 <memset+0x4>

08003ea4 <__libc_init_array>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	4d0d      	ldr	r5, [pc, #52]	; (8003edc <__libc_init_array+0x38>)
 8003ea8:	4c0d      	ldr	r4, [pc, #52]	; (8003ee0 <__libc_init_array+0x3c>)
 8003eaa:	1b64      	subs	r4, r4, r5
 8003eac:	10a4      	asrs	r4, r4, #2
 8003eae:	2600      	movs	r6, #0
 8003eb0:	42a6      	cmp	r6, r4
 8003eb2:	d109      	bne.n	8003ec8 <__libc_init_array+0x24>
 8003eb4:	4d0b      	ldr	r5, [pc, #44]	; (8003ee4 <__libc_init_array+0x40>)
 8003eb6:	4c0c      	ldr	r4, [pc, #48]	; (8003ee8 <__libc_init_array+0x44>)
 8003eb8:	f000 f818 	bl	8003eec <_init>
 8003ebc:	1b64      	subs	r4, r4, r5
 8003ebe:	10a4      	asrs	r4, r4, #2
 8003ec0:	2600      	movs	r6, #0
 8003ec2:	42a6      	cmp	r6, r4
 8003ec4:	d105      	bne.n	8003ed2 <__libc_init_array+0x2e>
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ecc:	4798      	blx	r3
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7ee      	b.n	8003eb0 <__libc_init_array+0xc>
 8003ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed6:	4798      	blx	r3
 8003ed8:	3601      	adds	r6, #1
 8003eda:	e7f2      	b.n	8003ec2 <__libc_init_array+0x1e>
 8003edc:	08003f2c 	.word	0x08003f2c
 8003ee0:	08003f2c 	.word	0x08003f2c
 8003ee4:	08003f2c 	.word	0x08003f2c
 8003ee8:	08003f30 	.word	0x08003f30

08003eec <_init>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr

08003ef8 <_fini>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr
